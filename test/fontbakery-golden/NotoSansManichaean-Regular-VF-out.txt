Start ... running 77 individual check executions.
 >> [1;35;107mcom.google.fonts/check/unicode_range_bits[0m
    [0;36;107mEnsure UnicodeRange bits are properly set.[0m
    with NotoSansManichaean-Regular-VF.ttf

    [1;35;107m  Rationale:                                                                [0m
    [0;30;107m  When the UnicodeRange bits on the OS/2 table are not properly set, some   [0m
    [0;30;107m  programs running on Windows may not recognize the font and use a system   [0m
    [0;30;107m  fallback font instead. For that reason, this check calculates the proper  [0m
    [0;30;107m  settings by inspecting the glyphs declared on the cmap table and then     [0m
    [0;30;107m  ensures that their corresponding ranges are enabled.                      [0m

    * [1;30;103mWARN[0m: UnicodeRange bit 57 "Non-Plane 0 *" should be 0 because cmap has none of the 2048 codepoints in this range. [code: bad-range-bit]


    Result: [1;30;103mWARN[0m

 >> [1;35;107mcom.google.fonts/check/required_tables[0m
    [0;36;107mFont contains all required tables?[0m
    with NotoSansManichaean-Regular-VF.ttf

    [1;35;107m  Rationale:                                                                [0m
    [0;30;107m  Depending on the typeface and coverage of a font, certain tables are      [0m
    [0;30;107m  recommended for optimum quality. For example, the performance of a        [0m
    [0;30;107m  non-linear font is improved if the VDMX, LTSH, and hdmx tables are        [0m
    [0;30;107m  present. Non-monospaced Latin fonts should have a kern table. A gasp      [0m
    [0;30;107m  table is necessary if a designer wants to influence the sizes at which    [0m
    [0;30;107m  grayscaling is used under Windows. A DSIG table containing a digital      [0m
    [0;30;107m  signature helps ensure the integrity of the font file. Etc.               [0m

    * [0;36;107mINFO[0m: This font contains the following optional tables [loca, GPOS, GSUB]


    Result: [0;36;107mINFO[0m

 >> [1;35;107mcom.google.fonts/check/superfamily/list[0m
    [0;36;107mList all superfamily filepaths[0m
    with NotoSansManichaean-Regular-VF.ttf

    [1;35;107m  Rationale:                                                                [0m
    [0;30;107m  This is a merely informative check that lists all sibling families        [0m
    [0;30;107m  detected by fontbakery.                                                   [0m
    [0;30;107m                                                                            [0m
    [0;30;107m  Only the fontfiles in these directories will be considered in             [0m
    [0;30;107m  superfamily-level checks.                                                 [0m

    * [0;36;107mINFO[0m: . [code: family-path]


    Result: [0;36;107mINFO[0m

 >> [1;35;107mcom.google.fonts/check/monospace[0m
    [0;36;107mChecking correctness of monospaced metadata.[0m
    with NotoSansManichaean-Regular-VF.ttf

    [1;35;107m  Rationale:                                                                [0m
    [0;30;107m  There are various metadata in the OpenType spec to specify if a font is   [0m
    [0;30;107m  monospaced or not. If the font is not truly monospaced, then no           [0m
    [0;30;107m  monospaced metadata should be set (as sometimes they mistakenly are...)   [0m
    [0;30;107m                                                                            [0m
    [0;30;107m  Requirements for monospace fonts:                                         [0m
    [0;30;107m                                                                            [0m
    [0;30;107m  * post.isFixedPitch - "Set to 0 if the font is proportionally spaced,     [0m
    [0;30;107m  non-zero if the font is not proportionally spaced (monospaced)"           [0m
    [0;30;107m    www.microsoft.com/typography/otspec/post.htm                            [0m
    [0;30;107m                                                                            [0m
    [0;30;107m  * hhea.advanceWidthMax must be correct, meaning no glyph's width value is [0m
    [0;30;107m  greater.                                                                  [0m
    [0;30;107m    www.microsoft.com/typography/otspec/hhea.htm                            [0m
    [0;30;107m                                                                            [0m
    [0;30;107m  * OS/2.panose.bProportion must be set to 9 (monospace). Spec says: "The   [0m
    [0;30;107m  PANOSE definition contains ten digits each of which currently describes   [0m
    [0;30;107m  up to sixteen variations. Windows uses bFamilyType, bSerifStyle and       [0m
    [0;30;107m  bProportion in the font mapper to determine family type. It also uses     [0m
    [0;30;107m  bProportion to determine if the font is monospaced."                      [0m
    [0;30;107m    www.microsoft.com/typography/otspec/os2.htm#pan                         [0m
    [0;30;107m    monotypecom-test.monotype.de/services/pan2                              [0m
    [0;30;107m                                                                            [0m
    [0;30;107m  * OS/2.xAvgCharWidth must be set accurately.                              [0m
    [0;30;107m    "OS/2.xAvgCharWidth is used when rendering monospaced fonts, at least   [0m
    [0;30;107m  by Windows GDI"                                                           [0m
    [0;30;107m    http://typedrawers.com/discussion/comment/15397/#Comment_15397          [0m
    [0;30;107m                                                                            [0m
    [0;30;107m  Also we should report an error for glyphs not of average width.           [0m
    [0;30;107m                                                                            [0m
    [0;30;107m  Please also note:                                                         [0m
    [0;30;107m  Thomas Phinney told us that a few years ago (as of December 2019), if you [0m
    [0;30;107m  gave a font a monospace flag in Panose, Microsoft Word would ignore the   [0m
    [0;30;107m  actual advance widths and treat it as monospaced. Source:                 [0m
    [0;30;107m  https://typedrawers.com/discussion/comment/45140/#Comment_45140           [0m

    * [1;91;107mFAIL[0m: On monospaced fonts, the value of post.isFixedPitch must be set to a non-zero value (meaning 'fixed width monospaced'), but got 0 instead. [code: mono-bad-post-isFixedPitch]
    * [1;91;107mFAIL[0m: On monospaced fonts, the value of OS/2.panose.bProportion must be set to 9 (proportion: monospaced), but got 2 instead. [code: mono-bad-panose-proportion]
    * [1;30;103mWARN[0m: Font is monospaced but 140 glyphs (91.50%) have a different width. You should check the widths of: ['CR', 'space', 'u10AC0', 'u10AC1', 'u10AC2', 'u10AC3', 'u10AC4', 'u10AC5', 'u10AC6', 'u10AC7', 'u10AC8', 'u10AC9', 'u10ACA', 'u10ACB', 'u10ACC', 'u10ACD', 'u10ACE', 'u10ACF', 'u10AD3', 'u10AD4', 'u10AD5', 'u10AD6', 'u10AD7', 'u10AD8', 'u10AD9', 'u10ADA', 'u10ADB', 'u10ADC', 'u10ADD', 'u10ADE', 'u10ADF', 'u10AE0', 'u10AE1', 'u10AE2', 'u10AE3', 'u10AE4', 'u10AEB', 'u10AEC', 'u10AED', 'u10AEE', 'u10AEF', 'u10AF0', 'u10AF1', 'u10AF2', 'u10AF3', 'u10AF4', 'u10AF5', 'u10AF6', 'uni0640', 'u10ADD10ACF', 'u10ADD10ACF.fina', 'u10ADD10AD7', 'u10ADD10AD7.fina', 'u10AC0.fina', 'u10AC0.medi', 'u10AC0.init', 'u10AC1.fina', 'u10AC1.medi', 'u10AC1.init', 'u10AC2.fina', 'u10AC2.medi', 'u10AC2.init', 'u10AC3.fina', 'u10AC3.medi', 'u10AC3.init', 'u10AC4.fina', 'u10AC4.medi', 'u10AC4.init', 'u10AC5.fina', 'u10AC7.fina', 'u10AC9.fina', 'u10ACA.fina', 'u10ACD.init', 'u10ACE.fina', 'u10ACF.fina', 'u10AD3.fina', 'u10AD3.medi', 'u10AD3.init', 'u10AD4.fina', 'u10AD4.medi', 'u10AD4.init', 'u10AD5.fina', 'u10AD5.medi', 'u10AD5.init', 'u10AD6.fina', 'u10AD6.medi', 'u10AD6.init', 'u10AD7.init', 'u10AD8.fina', 'u10AD8.medi', 'u10AD8.init', 'u10AD9.fina', 'u10AD9.medi', 'u10AD9.init', 'u10ADA.fina', 'u10ADA.medi', 'u10ADA.init', 'u10ADB.fina', 'u10ADB.medi', 'u10ADB.init', 'u10ADC.fina', 'u10ADC.medi', 'u10ADC.init', 'u10ADD.fina', 'u10ADE.fina', 'u10ADE.medi', 'u10ADE.init', 'u10ADF.fina', 'u10ADF.medi', 'u10ADF.init', 'u10AE0.fina', 'u10AE0.medi', 'u10AE0.init', 'u10AE1.fina', 'u10AE4.fina', 'u10AC5.alt', 'u10AC6.alt', 'u10AD6.alt', 'u10AD6.alt.fina', 'u10AD7.alt', 'u10AE1.alt', 'u10AEB.fina', 'u10AEB.medi', 'u10AEB.init', 'u10AEC.fina', 'u10AEC.medi', 'u10AEC.init', 'u10AED.fina', 'u10AED.medi', 'u10AED.init', 'u10AEE.fina', 'u10AEE.medi', 'u10AEE.init', 'u10AEF.fina', 'uni25CC', 'u10AEB.fina.high', 'u10AEB.medi.high', 'u10AEC.fina.high', 'u10AEC.medi.high', 'uni00A0'] [code: mono-outliers]


    Result: [1;91;107mFAIL[0m

 >> [1;35;107mcom.google.fonts/check/dsig[0m
    [0;36;107mDoes the font have a DSIG table?[0m
    with NotoSansManichaean-Regular-VF.ttf

    [1;35;107m  Rationale:                                                                [0m
    [0;30;107m  Microsoft Office 2013 and below products expect fonts to have a digital   [0m
    [0;30;107m  signature declared in a DSIG table in order to implement OpenType         [0m
    [0;30;107m  features. The EOL date for Microsoft Office 2013 products is 4/11/2023.   [0m
    [0;30;107m  This issue does not impact Microsoft Office 2016 and above products.      [0m
    [0;30;107m                                                                            [0m
    [0;30;107m  This checks verifies that this signature is available in the font.        [0m
    [0;30;107m                                                                            [0m
    [0;30;107m  A fake signature is enough to address this issue. If needed, a dummy      [0m
    [0;30;107m  table can be added to the font with the `gftools fix-dsig` script         [0m
    [0;30;107m  available at https://github.com/googlefonts/gftools                       [0m
    [0;30;107m                                                                            [0m
    [0;30;107m  Reference: https://github.com/googlefonts/fontbakery/issues/1845          [0m

    * [1;91;107mFAIL[0m: This font lacks a digital signature (DSIG table). Some applications may require one (even if only a dummy placeholder) in order to work properly. You can add a DSIG table by running the `gftools fix-dsig` script. [code: lacks-signature]


    Result: [1;91;107mFAIL[0m

 >> [1;35;107mcom.google.fonts/check/gpos_kerning_info[0m
    [0;36;107mDoes GPOS table have kerning information? This check skips monospaced fonts as defined by post.isFixedPitch value[0m
    with NotoSansManichaean-Regular-VF.ttf

    * [1;30;103mWARN[0m: GPOS table lacks kerning information. [code: lacks-kern-info]


    Result: [1;30;103mWARN[0m

 >> [1;35;107mcom.google.fonts/check/outline_alignment_miss[0m
    [0;36;107mAre there any misaligned on-curve points?[0m
    with NotoSansManichaean-Regular-VF.ttf

    [1;35;107m  Rationale:                                                                [0m
    [0;30;107m  This test heuristically looks for on-curve points which are close to, but [0m
    [0;30;107m  do not sit on, significant boundary coordinates. For example, a point     [0m
    [0;30;107m  which has a Y-coordinate of 1 or -1 might be a misplaced baseline point.  [0m
    [0;30;107m  As well as the baseline, the test also checks for points near the         [0m
    [0;30;107m  x-height (but only for lower case Latin letters), cap-height, ascender    [0m
    [0;30;107m  and descender Y coordinates.                                              [0m
    [0;30;107m                                                                            [0m
    [0;30;107m  Not all such misaligned curve points are a mistake, and sometimes the     [0m
    [0;30;107m  design may call for points in locations near the boundaries. As this test [0m
    [0;30;107m  is liable to generate significant numbers of false positives, the test    [0m
    [0;30;107m  will pass if there are more than 100 reported misalignments.              [0m

    * [1;30;103mWARN[0m: The following glyphs have on-curve points which have potentially incorrect y coordinates:
	* u10AC0: X=465.0,Y=1.5 (should be at baseline 0?)
	* u10ACE: X=372.0,Y=-2.0 (should be at baseline 0?)
	* u10ACE: X=197.0,Y=1.0 (should be at baseline 0?)
	* u10ACE: X=461.0,Y=2.0 (should be at baseline 0?)
	* u10ACF: X=107.5,Y=-1.5 (should be at baseline 0?)
	* u10AD0: X=869.0,Y=-1.5 (should be at baseline 0?)
	* u10AD1: X=869.0,Y=-1.5 (should be at baseline 0?)
	* u10AD2: X=869.0,Y=-1.5 (should be at baseline 0?)
	* u10AE4: X=218.5,Y=2.0 (should be at baseline 0?)
	* u10AE4: X=618.0,Y=-1.5 (should be at baseline 0?) and 22 more. [code: found-misalignments]


    Result: [1;30;103mWARN[0m


Total:

    [1;97;101mERROR[0m: 0
    [1;91;107mFAIL[0m: 2
    [1;30;103mWARN[0m: 3
    [0;36;107mINFO[0m: 2
    [0;34;107mSKIP[0m: 16
    [0;32;107mPASS[0m: 54


DONE!

    [1;30;107mMeaning of check results:[0m

    An [1;97;101mERROR[0m is something wrong with FontBakery itself, possibly a bug.
    A [1;91;107mFAIL[0m is a problem with the font that must be fixed.
    A [1;30;103mWARN[0m is something that you should consider addressing.
    An [0;36;107mINFO[0m result simply prints something useful. Typically stats.
    A [0;32;107mPASS[0m means the font looks good for the given checking routine.
    And a [0;34;107mSKIP[0m happens when the check does not apply to the given font.

    If you get [1;97;101mERROR[0ms, please help us improve the tool by reporting them at
    [1;36;107mhttps://github.com/googlefonts/fontbakery/issues[0m

    (but other kinds of bug reports and/or
     feature requests are also always welcome, of course!)

