Start ... running 77 individual check executions.
 >> [1;35;107mcom.google.fonts/check/required_tables[0m
    [0;36;107mFont contains all required tables?[0m
    with NotoSerifMyanmar-Condensed.ttf

    [1;35;107m  Rationale:                                                                [0m
    [0;30;107m  Depending on the typeface and coverage of a font, certain tables are      [0m
    [0;30;107m  recommended for optimum quality. For example, the performance of a        [0m
    [0;30;107m  non-linear font is improved if the VDMX, LTSH, and hdmx tables are        [0m
    [0;30;107m  present. Non-monospaced Latin fonts should have a kern table. A gasp      [0m
    [0;30;107m  table is necessary if a designer wants to influence the sizes at which    [0m
    [0;30;107m  grayscaling is used under Windows. A DSIG table containing a digital      [0m
    [0;30;107m  signature helps ensure the integrity of the font file. Etc.               [0m

    * [0;36;107mINFO[0m: This font contains the following optional tables [loca, GPOS, GSUB]


    Result: [0;36;107mINFO[0m

 >> [1;35;107mcom.google.fonts/check/superfamily/list[0m
    [0;36;107mList all superfamily filepaths[0m
    with NotoSerifMyanmar-Condensed.ttf

    [1;35;107m  Rationale:                                                                [0m
    [0;30;107m  This is a merely informative check that lists all sibling families        [0m
    [0;30;107m  detected by fontbakery.                                                   [0m
    [0;30;107m                                                                            [0m
    [0;30;107m  Only the fontfiles in these directories will be considered in             [0m
    [0;30;107m  superfamily-level checks.                                                 [0m

    * [0;36;107mINFO[0m: . [code: family-path]


    Result: [0;36;107mINFO[0m

 >> [1;35;107mcom.google.fonts/check/dsig[0m
    [0;36;107mDoes the font have a DSIG table?[0m
    with NotoSerifMyanmar-Condensed.ttf

    [1;35;107m  Rationale:                                                                [0m
    [0;30;107m  Microsoft Office 2013 and below products expect fonts to have a digital   [0m
    [0;30;107m  signature declared in a DSIG table in order to implement OpenType         [0m
    [0;30;107m  features. The EOL date for Microsoft Office 2013 products is 4/11/2023.   [0m
    [0;30;107m  This issue does not impact Microsoft Office 2016 and above products.      [0m
    [0;30;107m                                                                            [0m
    [0;30;107m  This checks verifies that this signature is available in the font.        [0m
    [0;30;107m                                                                            [0m
    [0;30;107m  A fake signature is enough to address this issue. If needed, a dummy      [0m
    [0;30;107m  table can be added to the font with the `gftools fix-dsig` script         [0m
    [0;30;107m  available at https://github.com/googlefonts/gftools                       [0m
    [0;30;107m                                                                            [0m
    [0;30;107m  Reference: https://github.com/googlefonts/fontbakery/issues/1845          [0m

    * [1;91;107mFAIL[0m: This font lacks a digital signature (DSIG table). Some applications may require one (even if only a dummy placeholder) in order to work properly. You can add a DSIG table by running the `gftools fix-dsig` script. [code: lacks-signature]


    Result: [1;91;107mFAIL[0m

 >> [1;35;107mcom.google.fonts/check/gdef_spacing_marks[0m
    [0;36;107mCheck mark characters are in GDEF mark glyph class)[0m
    with NotoSerifMyanmar-Condensed.ttf

    [1;35;107m  Rationale:                                                                [0m
    [0;30;107m  Glyphs in the GDEF mark glyph class should be non-spacing.                [0m
    [0;30;107m  Spacing glyphs in the GDEF mark glyph class may have incorrect anchor     [0m
    [0;30;107m  positioning that was only intended for building composite glyphs during   [0m
    [0;30;107m  design.                                                                   [0m

    * [1;30;103mWARN[0m: The following spacing glyphs may be in the GDEF mark glyph class by mistake:
	 dot_below_pr [code: spacing-mark-glyphs]


    Result: [1;30;103mWARN[0m

 >> [1;35;107mcom.google.fonts/check/gdef_mark_chars[0m
    [0;36;107mCheck mark characters are in GDEF mark glyph class[0m
    with NotoSerifMyanmar-Condensed.ttf

    [1;35;107m  Rationale:                                                                [0m
    [0;30;107m  Mark characters should be in the GDEF mark glyph class.                   [0m

    * [1;30;103mWARN[0m: The following mark characters could be in the GDEF mark glyph class:
	 U+102B, U+102C, U+1031, U+1038, U+103B, U+103C, U+1056, U+1057, U+1062, U+1063, U+1064, U+1067, U+1068, U+1069, U+106A, U+106B, U+106C, U+106D, U+1083, U+1084, U+1087, U+1088, U+1089, U+108A, U+108B, U+108C, U+108F, U+109A, U+109B, U+109C, U+AA7B and U+AA7D [code: mark-chars]


    Result: [1;30;103mWARN[0m

 >> [1;35;107mcom.google.fonts/check/gpos_kerning_info[0m
    [0;36;107mDoes GPOS table have kerning information? This check skips monospaced fonts as defined by post.isFixedPitch value[0m
    with NotoSerifMyanmar-Condensed.ttf

    * [1;30;103mWARN[0m: GPOS table lacks kerning information. [code: lacks-kern-info]


    Result: [1;30;103mWARN[0m

 >> [1;35;107mcom.google.fonts/check/glyf_nested_components[0m
    [0;36;107mCheck glyphs do not have components which are themselves components.[0m
    with NotoSerifMyanmar-Condensed.ttf

    [1;35;107m  Rationale:                                                                [0m
    [0;30;107m  There have been bugs rendering variable fonts with nested components.     [0m
    [0;30;107m  Additionally, some static fonts with nested components have been reported [0m
    [0;30;107m  to have rendering and printing issues.                                    [0m
    [0;30;107m                                                                            [0m
    [0;30;107m  For more info, see:                                                       [0m
    [0;30;107m  * https://github.com/googlefonts/fontbakery/issues/2961                   [0m
    [0;30;107m  * https://github.com/arrowtype/recursive/issues/412                       [0m

    * [1;91;107mFAIL[0m: The following glyphs have components which themselves are component glyphs:
	* quotedblleft
	* tha_wpk
	* cha_shw
	* ha_shn_medial_ha
	* ya_khm
	* medial_ha_obl_u_dot
	* medial_ha_u
	* medial_ha_dot
	* medial_ha_u_dot
	* uu and 21 more. [code: found-nested-components]


    Result: [1;91;107mFAIL[0m

 >> [1;35;107mcom.google.fonts/check/outline_alignment_miss[0m
    [0;36;107mAre there any misaligned on-curve points?[0m
    with NotoSerifMyanmar-Condensed.ttf

    [1;35;107m  Rationale:                                                                [0m
    [0;30;107m  This test heuristically looks for on-curve points which are close to, but [0m
    [0;30;107m  do not sit on, significant boundary coordinates. For example, a point     [0m
    [0;30;107m  which has a Y-coordinate of 1 or -1 might be a misplaced baseline point.  [0m
    [0;30;107m  As well as the baseline, the test also checks for points near the         [0m
    [0;30;107m  x-height (but only for lower case Latin letters), cap-height, ascender    [0m
    [0;30;107m  and descender Y coordinates.                                              [0m
    [0;30;107m                                                                            [0m
    [0;30;107m  Not all such misaligned curve points are a mistake, and sometimes the     [0m
    [0;30;107m  design may call for points in locations near the boundaries. As this test [0m
    [0;30;107m  is liable to generate significant numbers of false positives, the test    [0m
    [0;30;107m  will pass if there are more than 100 reported misalignments.              [0m

    * [1;30;103mWARN[0m: The following glyphs have on-curve points which have potentially incorrect y coordinates:
	* question: X=391.0,Y=716.0 (should be at cap-height 714?)
	* quotedblright: X=144.0,Y=715.0 (should be at cap-height 714?)
	* quotedblright: X=424.0,Y=715.0 (should be at cap-height 714?)
	* quoteright: X=144.0,Y=715.0 (should be at cap-height 714?)
	* seven_m: X=337.0,Y=-1.0 (should be at baseline 0?)
	* eight_tlg: X=119.0,Y=715.0 (should be at cap-height 714?)
	* nya: X=174.0,Y=1.5 (should be at baseline 0?)
	* nnya: X=174.0,Y=1.5 (should be at baseline 0?)
	* nnya.halftail: X=174.0,Y=1.5 (should be at baseline 0?)
	* nnya.thirdtail: X=174.0,Y=1.5 (should be at baseline 0?) and 14 more. [code: found-misalignments]


    Result: [1;30;103mWARN[0m

 >> [1;35;107mcom.google.fonts/check/outline_colinear_vectors[0m
    [0;36;107mDo any segments have colinear vectors?[0m
    with NotoSerifMyanmar-Condensed.ttf

    [1;35;107m  Rationale:                                                                [0m
    [0;30;107m  This test looks for consecutive line segments which have the same angle.  [0m
    [0;30;107m  This normally happens if an outline point has been added by accident.     [0m
    [0;30;107m                                                                            [0m
    [0;30;107m  This test is not run for variable fonts, as they may legitimately have    [0m
    [0;30;107m  colinear vectors.                                                         [0m

    * [1;30;103mWARN[0m: The following glyphs have colinear vectors:
	* ka_shn_dot.sub: L<<-306.0,-430.0>--<-306.0,-430.0>> -> L<<-306.0,-430.0>--<-306.0,-430.0>>
	* la_khm.sub: L<<-307.0,-430.0>--<-307.0,-430.0>> -> L<<-307.0,-430.0>--<-307.0,-430.0>>
	* lla_lla: L<<370.0,218.0>--<433.0,218.0>> -> L<<433.0,218.0>--<433.0,218.0>>
	* lla_lla: L<<433.0,218.0>--<433.0,218.0>> -> L<<433.0,218.0>--<433.0,218.0>>
	* ra_asat: L<<-402.0,714.0>--<-402.0,714.0>> -> L<<-402.0,714.0>--<-402.0,714.0>>
	* ra_i: L<<-402.0,714.0>--<-402.0,714.0>> -> L<<-402.0,714.0>--<-402.0,714.0>>
	* ra_ii: L<<-402.0,714.0>--<-402.0,714.0>> -> L<<-402.0,714.0>--<-402.0,714.0>>
	* ra_mark: L<<-284.0,714.0>--<-284.0,714.0>> -> L<<-284.0,714.0>--<-284.0,714.0>>
	* ta_khm.sub2: L<<-189.0,-908.0>--<-189.0,-908.0>> -> L<<-189.0,-908.0>--<-189.0,-908.0>>
	* ta_khm.sub2: L<<-189.0,-910.0>--<-189.0,-909.0>> -> L<<-189.0,-909.0>--<-189.0,-908.0>> and ta_khm.sub: L<<-178.0,-429.0>--<-178.0,-429.0>> -> L<<-178.0,-429.0>--<-178.0,-429.0>> [code: found-colinear-vectors]


    Result: [1;30;103mWARN[0m

 >> [1;35;107mcom.google.fonts/check/outline_jaggy_segments[0m
    [0;36;107mDo outlines contain any jaggy segments?[0m
    with NotoSerifMyanmar-Condensed.ttf

    [1;35;107m  Rationale:                                                                [0m
    [0;30;107m  This test heuristically detects outline segments which form a             [0m
    [0;30;107m  particularly small angle, indicative of an outline error. This may cause  [0m
    [0;30;107m  false positives in cases such as extreme ink traps, so should be regarded [0m
    [0;30;107m  as advisory and backed up by manual inspection.                           [0m

    * [1;30;103mWARN[0m: The following glyphs have jaggy segments:
	* a_m.sub2: B<<-60.0,-806.5>-<-39.0,-817.0>-<-33.0,-849.0>>/B<<-33.0,-849.0>-<-33.0,-842.0>-<-32.5,-833.5>> = 10.61965527615514
	* da_shn.sub2: B<<-53.0,-806.5>-<-32.0,-817.0>-<-26.0,-849.0>>/B<<-26.0,-849.0>-<-26.0,-842.0>-<-25.5,-833.5>> = 10.61965527615514
	* ha_shn_uu: L<<255.0,-532.0>--<255.0,-167.0>>/L<<255.0,-167.0>--<209.0,-364.0>> = 13.14321610919178
	* jha_shn.sub2: B<<-25.5,-767.5>-<-26.0,-759.0>-<-26.0,-751.0>>/B<<-26.0,-751.0>-<-32.0,-784.0>-<-53.0,-794.5>> = 10.304846468766009
	* ra.sub2: B<<-340.5,-833.5>-<-340.0,-842.0>-<-340.0,-850.0>>/B<<-340.0,-850.0>-<-334.0,-817.0>-<-313.0,-806.5>> = 10.304846468766009 and za_shn.sub2: B<<-433.0,-806.5>-<-454.0,-817.0>-<-460.0,-849.0>>/B<<-460.0,-849.0>-<-460.0,-842.0>-<-460.5,-833.5>> = 10.61965527615514 [code: found-jaggy-segments]


    Result: [1;30;103mWARN[0m

 >> [1;35;107mcom.google.fonts/check/outline_semi_vertical[0m
    [0;36;107mDo outlines contain any semi-vertical or semi-horizontal lines?[0m
    with NotoSerifMyanmar-Condensed.ttf

    [1;35;107m  Rationale:                                                                [0m
    [0;30;107m  This test detects line segments which are nearly, but not quite, exactly  [0m
    [0;30;107m  horizontal or vertical. Sometimes such lines are created by design, but   [0m
    [0;30;107m  often they are indicative of a design error.                              [0m
    [0;30;107m                                                                            [0m
    [0;30;107m  This test is disabled for italic styles, which often contain              [0m
    [0;30;107m  nearly-upright lines.                                                     [0m

    * [1;30;103mWARN[0m: The following glyphs have semi-vertical/semi-horizontal lines:
	* _u_dot_spacing.alt: L<<213.0,-412.0>--<212.0,-539.0>>
	* _u_dot_spacing: L<<213.0,-412.0>--<212.0,-539.0>>
	* _u_spacing: L<<213.0,-412.0>--<212.0,-539.0>>
	* _uu_dot_spacing.alt: L<<403.0,-412.0>--<402.0,-539.0>>
	* _uu_dot_spacing: L<<403.0,-412.0>--<402.0,-539.0>>
	* _uu_spacing: L<<403.0,-412.0>--<402.0,-539.0>>
	* dda_ddha: L<<377.0,-412.0>--<376.0,-539.0>>
	* ii: L<<654.0,-292.0>--<652.0,277.0>>
	* medial_ra_bt: L<<238.0,-414.0>--<239.0,-541.0>>
	* medial_ra_ha_tt2: L<<204.0,1077.0>--<203.0,950.0>> and 21 more. [code: found-semi-vertical]


    Result: [1;30;103mWARN[0m


Total:

    [1;97;101mERROR[0m: 0
    [1;91;107mFAIL[0m: 2
    [1;30;103mWARN[0m: 7
    [0;36;107mINFO[0m: 2
    [0;34;107mSKIP[0m: 18
    [0;32;107mPASS[0m: 48


DONE!

    [1;30;107mMeaning of check results:[0m

    An [1;97;101mERROR[0m is something wrong with FontBakery itself, possibly a bug.
    A [1;91;107mFAIL[0m is a problem with the font that must be fixed.
    A [1;30;103mWARN[0m is something that you should consider addressing.
    An [0;36;107mINFO[0m result simply prints something useful. Typically stats.
    A [0;32;107mPASS[0m means the font looks good for the given checking routine.
    And a [0;34;107mSKIP[0m happens when the check does not apply to the given font.

    If you get [1;97;101mERROR[0ms, please help us improve the tool by reporting them at
    [1;36;107mhttps://github.com/googlefonts/fontbakery/issues[0m

    (but other kinds of bug reports and/or
     feature requests are also always welcome, of course!)

