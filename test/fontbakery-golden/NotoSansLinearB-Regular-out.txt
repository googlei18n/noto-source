Start ... running 77 individual check executions.
 >> [1;35;107mcom.google.fonts/check/unicode_range_bits[0m
    [0;36;107mEnsure UnicodeRange bits are properly set.[0m
    with NotoSansLinearB-Regular.ttf

    [1;35;107m  Rationale:                                                                [0m
    [0;30;107m  When the UnicodeRange bits on the OS/2 table are not properly set, some   [0m
    [0;30;107m  programs running on Windows may not recognize the font and use a system   [0m
    [0;30;107m  fallback font instead. For that reason, this check calculates the proper  [0m
    [0;30;107m  settings by inspecting the glyphs declared on the cmap table and then     [0m
    [0;30;107m  ensures that their corresponding ranges are enabled.                      [0m

    * [1;30;103mWARN[0m: UnicodeRange bit 57 "Non-Plane 0 *" should be 0 because cmap has none of the 2048 codepoints in this range. [code: bad-range-bit]


    Result: [1;30;103mWARN[0m

 >> [1;35;107mcom.google.fonts/check/family/win_ascent_and_descent[0m
    [0;36;107mChecking OS/2 usWinAscent & usWinDescent.[0m
    with NotoSansLinearB-Regular.ttf

    [1;35;107m  Rationale:                                                                [0m
    [0;30;107m  A font's winAscent and winDescent values should be greater than the head  [0m
    [0;30;107m  table's yMax, abs(yMin) values. If they are less than these values,       [0m
    [0;30;107m  clipping can occur on Windows platforms                                   [0m
    [0;30;107m  (https://github.com/RedHatBrand/Overpass/issues/33).                      [0m
    [0;30;107m                                                                            [0m
    [0;30;107m  If the font includes tall/deep writing systems such as Arabic or          [0m
    [0;30;107m  Devanagari, the winAscent and winDescent can be greater than the yMax and [0m
    [0;30;107m  abs(yMin) to accommodate vowel marks.                                     [0m
    [0;30;107m                                                                            [0m
    [0;30;107m  When the win Metrics are significantly greater than the upm, the          [0m
    [0;30;107m  linespacing can appear too loose. To counteract this, enabling the OS/2   [0m
    [0;30;107m  fsSelection bit 7 (Use_Typo_Metrics), will force Windows to use the OS/2  [0m
    [0;30;107m  typo values instead. This means the font developer can control the        [0m
    [0;30;107m  linespacing with the typo values, whilst avoiding clipping by setting the [0m
    [0;30;107m  win values to values greater than the yMax and abs(yMin).                 [0m

    * [1;91;107mFAIL[0m: OS/2.usWinDescent value 293 is too large. It should be less than double the yMin. Current absolute yMin value is 128 [code: descent]


    Result: [1;91;107mFAIL[0m

 >> [1;35;107mcom.google.fonts/check/required_tables[0m
    [0;36;107mFont contains all required tables?[0m
    with NotoSansLinearB-Regular.ttf

    [1;35;107m  Rationale:                                                                [0m
    [0;30;107m  Depending on the typeface and coverage of a font, certain tables are      [0m
    [0;30;107m  recommended for optimum quality. For example, the performance of a        [0m
    [0;30;107m  non-linear font is improved if the VDMX, LTSH, and hdmx tables are        [0m
    [0;30;107m  present. Non-monospaced Latin fonts should have a kern table. A gasp      [0m
    [0;30;107m  table is necessary if a designer wants to influence the sizes at which    [0m
    [0;30;107m  grayscaling is used under Windows. A DSIG table containing a digital      [0m
    [0;30;107m  signature helps ensure the integrity of the font file. Etc.               [0m

    * [0;36;107mINFO[0m: This font contains the following optional tables [loca]


    Result: [0;36;107mINFO[0m

 >> [1;35;107mcom.google.fonts/check/superfamily/list[0m
    [0;36;107mList all superfamily filepaths[0m
    with NotoSansLinearB-Regular.ttf

    [1;35;107m  Rationale:                                                                [0m
    [0;30;107m  This is a merely informative check that lists all sibling families        [0m
    [0;30;107m  detected by fontbakery.                                                   [0m
    [0;30;107m                                                                            [0m
    [0;30;107m  Only the fontfiles in these directories will be considered in             [0m
    [0;30;107m  superfamily-level checks.                                                 [0m

    * [0;36;107mINFO[0m: . [code: family-path]


    Result: [0;36;107mINFO[0m

 >> [1;35;107mcom.google.fonts/check/monospace[0m
    [0;36;107mChecking correctness of monospaced metadata.[0m
    with NotoSansLinearB-Regular.ttf

    [1;35;107m  Rationale:                                                                [0m
    [0;30;107m  There are various metadata in the OpenType spec to specify if a font is   [0m
    [0;30;107m  monospaced or not. If the font is not truly monospaced, then no           [0m
    [0;30;107m  monospaced metadata should be set (as sometimes they mistakenly are...)   [0m
    [0;30;107m                                                                            [0m
    [0;30;107m  Requirements for monospace fonts:                                         [0m
    [0;30;107m                                                                            [0m
    [0;30;107m  * post.isFixedPitch - "Set to 0 if the font is proportionally spaced,     [0m
    [0;30;107m  non-zero if the font is not proportionally spaced (monospaced)"           [0m
    [0;30;107m    www.microsoft.com/typography/otspec/post.htm                            [0m
    [0;30;107m                                                                            [0m
    [0;30;107m  * hhea.advanceWidthMax must be correct, meaning no glyph's width value is [0m
    [0;30;107m  greater.                                                                  [0m
    [0;30;107m    www.microsoft.com/typography/otspec/hhea.htm                            [0m
    [0;30;107m                                                                            [0m
    [0;30;107m  * OS/2.panose.bProportion must be set to 9 (monospace). Spec says: "The   [0m
    [0;30;107m  PANOSE definition contains ten digits each of which currently describes   [0m
    [0;30;107m  up to sixteen variations. Windows uses bFamilyType, bSerifStyle and       [0m
    [0;30;107m  bProportion in the font mapper to determine family type. It also uses     [0m
    [0;30;107m  bProportion to determine if the font is monospaced."                      [0m
    [0;30;107m    www.microsoft.com/typography/otspec/os2.htm#pan                         [0m
    [0;30;107m    monotypecom-test.monotype.de/services/pan2                              [0m
    [0;30;107m                                                                            [0m
    [0;30;107m  * OS/2.xAvgCharWidth must be set accurately.                              [0m
    [0;30;107m    "OS/2.xAvgCharWidth is used when rendering monospaced fonts, at least   [0m
    [0;30;107m  by Windows GDI"                                                           [0m
    [0;30;107m    http://typedrawers.com/discussion/comment/15397/#Comment_15397          [0m
    [0;30;107m                                                                            [0m
    [0;30;107m  Also we should report an error for glyphs not of average width.           [0m
    [0;30;107m                                                                            [0m
    [0;30;107m  Please also note:                                                         [0m
    [0;30;107m  Thomas Phinney told us that a few years ago (as of December 2019), if you [0m
    [0;30;107m  gave a font a monospace flag in Panose, Microsoft Word would ignore the   [0m
    [0;30;107m  actual advance widths and treat it as monospaced. Source:                 [0m
    [0;30;107m  https://typedrawers.com/discussion/comment/45140/#Comment_45140           [0m

    * [1;91;107mFAIL[0m: On monospaced fonts, the value of post.isFixedPitch must be set to a non-zero value (meaning 'fixed width monospaced'), but got 0 instead. [code: mono-bad-post-isFixedPitch]
    * [1;91;107mFAIL[0m: On monospaced fonts, the value of OS/2.panose.bProportion must be set to 9 (proportion: monospaced), but got 2 instead. [code: mono-bad-panose-proportion]
    * [1;30;103mWARN[0m: Font is monospaced but 226 glyphs (82.78%) have a different width. You should check the widths of: ['CR', 'space', 'uni00A0', 'uni10000', 'uni10001', 'uni10002', 'uni10003', 'uni10004', 'uni10005', 'uni10006', 'uni10007', 'uni10008', 'uni10009', 'uni1000A', 'uni1000B', 'uni1000D', 'uni1000E', 'uni1000F', 'uni10010', 'uni10011', 'uni10012', 'uni10013', 'uni10014', 'uni10015', 'uni10016', 'uni10017', 'uni10018', 'uni10019', 'uni1001A', 'uni1001B', 'uni1001C', 'uni1001D', 'uni1001E', 'uni1001F', 'uni10020', 'uni10021', 'uni10022', 'uni10023', 'uni10024', 'uni10025', 'uni10026', 'uni10028', 'uni10029', 'uni1002A', 'uni1002B', 'uni1002C', 'uni1002D', 'uni1002E', 'uni1002F', 'uni10030', 'uni10031', 'uni10032', 'uni10033', 'uni10034', 'uni10035', 'uni10036', 'uni10037', 'uni10038', 'uni10039', 'uni1003A', 'uni1003C', 'uni1003D', 'uni1003F', 'uni10040', 'uni10041', 'uni10042', 'uni10043', 'uni10044', 'uni10045', 'uni10046', 'uni10047', 'uni10048', 'uni10049', 'uni1004A', 'uni1004B', 'uni1004C', 'uni1004D', 'uni10050', 'uni10051', 'uni10052', 'uni10053', 'uni10054', 'uni10055', 'uni10056', 'uni10057', 'uni10058', 'uni10059', 'uni1005A', 'uni1005B', 'uni1005C', 'uni1005D', 'uni10080', 'uni10081', 'uni10082', 'uni10083', 'uni10084', 'uni10085', 'uni10086', 'uni10087', 'uni10088', 'uni10089', 'uni1008A', 'uni1008B', 'uni1008C', 'uni1008D', 'uni1008E', 'uni1008F', 'uni10090', 'uni10091', 'uni10092', 'uni10093', 'uni10094', 'uni10095', 'uni10096', 'uni10097', 'uni10098', 'uni10099', 'uni1009A', 'uni1009B', 'uni1009C', 'uni1009D', 'uni1009E', 'uni1009F', 'uni100A0', 'uni100A1', 'uni100A2', 'uni100A3', 'uni100A4', 'uni100A5', 'uni100A6', 'uni100A7', 'uni100A8', 'uni100A9', 'uni100AA', 'uni100AB', 'uni100AC', 'uni100AD', 'uni100AE', 'uni100AF', 'uni100B0', 'uni100B1', 'uni100B2', 'uni100B3', 'uni100B4', 'uni100B5', 'uni100B6', 'uni100B7', 'uni100B8', 'uni100B9', 'uni100BA', 'uni100BB', 'uni100BC', 'uni100BD', 'uni100BE', 'uni100BF', 'uni100C0', 'uni100C1', 'uni100C2', 'uni100C3', 'uni100C4', 'uni100C5', 'uni100C6', 'uni100C7', 'uni100C8', 'uni100C9', 'uni100CA', 'uni100CB', 'uni100CC', 'uni100CD', 'uni100CE', 'uni100CF', 'uni100D0', 'uni100D1', 'uni100D2', 'uni100D3', 'uni100D4', 'uni100D5', 'uni100D6', 'uni100D7', 'uni100D8', 'uni100D9', 'uni100DA', 'uni100DB', 'uni100DC', 'uni100DD', 'uni100DE', 'uni100DF', 'uni100E0', 'uni100E1', 'uni100E2', 'uni100E3', 'uni100E4', 'uni100E5', 'uni100E6', 'uni100E7', 'uni100E8', 'uni100E9', 'uni100EA', 'uni100EB', 'uni100EC', 'uni100ED', 'uni100EE', 'uni100EF', 'uni100F0', 'uni100F1', 'uni100F2', 'uni100F3', 'uni100F4', 'uni100F5', 'uni100F6', 'uni100F7', 'uni100F8', 'uni100F9', 'uni100FA', 'uni10100', 'uni10101', 'uni10102', 'uni10137', 'uni10138', 'uni10139', 'uni1013A', 'uni1013B', 'uni1013C', 'uni1013D', 'uni1013E', 'uni1013F'] [code: mono-outliers]


    Result: [1;91;107mFAIL[0m

 >> [1;35;107mcom.google.fonts/check/dsig[0m
    [0;36;107mDoes the font have a DSIG table?[0m
    with NotoSansLinearB-Regular.ttf

    [1;35;107m  Rationale:                                                                [0m
    [0;30;107m  Microsoft Office 2013 and below products expect fonts to have a digital   [0m
    [0;30;107m  signature declared in a DSIG table in order to implement OpenType         [0m
    [0;30;107m  features. The EOL date for Microsoft Office 2013 products is 4/11/2023.   [0m
    [0;30;107m  This issue does not impact Microsoft Office 2016 and above products.      [0m
    [0;30;107m                                                                            [0m
    [0;30;107m  This checks verifies that this signature is available in the font.        [0m
    [0;30;107m                                                                            [0m
    [0;30;107m  A fake signature is enough to address this issue. If needed, a dummy      [0m
    [0;30;107m  table can be added to the font with the `gftools fix-dsig` script         [0m
    [0;30;107m  available at https://github.com/googlefonts/gftools                       [0m
    [0;30;107m                                                                            [0m
    [0;30;107m  Reference: https://github.com/googlefonts/fontbakery/issues/1845          [0m

    * [1;91;107mFAIL[0m: This font lacks a digital signature (DSIG table). Some applications may require one (even if only a dummy placeholder) in order to work properly. You can add a DSIG table by running the `gftools fix-dsig` script. [code: lacks-signature]


    Result: [1;91;107mFAIL[0m

 >> [1;35;107mcom.google.fonts/check/gpos_kerning_info[0m
    [0;36;107mDoes GPOS table have kerning information? This check skips monospaced fonts as defined by post.isFixedPitch value[0m
    with NotoSansLinearB-Regular.ttf

    * [1;30;103mWARN[0m: GPOS table lacks kerning information. [code: lacks-kern-info]


    Result: [1;30;103mWARN[0m

 >> [1;35;107mcom.google.fonts/check/outline_alignment_miss[0m
    [0;36;107mAre there any misaligned on-curve points?[0m
    with NotoSansLinearB-Regular.ttf

    [1;35;107m  Rationale:                                                                [0m
    [0;30;107m  This test heuristically looks for on-curve points which are close to, but [0m
    [0;30;107m  do not sit on, significant boundary coordinates. For example, a point     [0m
    [0;30;107m  which has a Y-coordinate of 1 or -1 might be a misplaced baseline point.  [0m
    [0;30;107m  As well as the baseline, the test also checks for points near the         [0m
    [0;30;107m  x-height (but only for lower case Latin letters), cap-height, ascender    [0m
    [0;30;107m  and descender Y coordinates.                                              [0m
    [0;30;107m                                                                            [0m
    [0;30;107m  Not all such misaligned curve points are a mistake, and sometimes the     [0m
    [0;30;107m  design may call for points in locations near the boundaries. As this test [0m
    [0;30;107m  is liable to generate significant numbers of false positives, the test    [0m
    [0;30;107m  will pass if there are more than 100 reported misalignments.              [0m

    * [1;30;103mWARN[0m: The following glyphs have on-curve points which have potentially incorrect y coordinates:
	* uni1000E: X=90.0,Y=802.0 (should be at cap-height 800?)
	* uni10012: X=283.0,Y=-1.0 (should be at baseline 0?)
	* uni10015: X=138.5,Y=802.0 (should be at cap-height 800?)
	* uni10022: X=427.0,Y=799.0 (should be at cap-height 800?)
	* uni1002A: X=207.0,Y=798.0 (should be at cap-height 800?)
	* uni10032: X=532.0,Y=802.0 (should be at cap-height 800?)
	* uni10041: X=498.0,Y=1.0 (should be at baseline 0?)
	* uni10041: X=106.0,Y=1.0 (should be at baseline 0?)
	* uni1004A: X=395.0,Y=-1.0 (should be at baseline 0?)
	* uni1004A: X=337.5,Y=-1.0 (should be at baseline 0?) and 27 more. [code: found-misalignments]


    Result: [1;30;103mWARN[0m

 >> [1;35;107mcom.google.fonts/check/outline_jaggy_segments[0m
    [0;36;107mDo outlines contain any jaggy segments?[0m
    with NotoSansLinearB-Regular.ttf

    [1;35;107m  Rationale:                                                                [0m
    [0;30;107m  This test heuristically detects outline segments which form a             [0m
    [0;30;107m  particularly small angle, indicative of an outline error. This may cause  [0m
    [0;30;107m  false positives in cases such as extreme ink traps, so should be regarded [0m
    [0;30;107m  as advisory and backed up by manual inspection.                           [0m

    * [1;30;103mWARN[0m: The following glyphs have jaggy segments:
	* uni10091: B<<179.0,291.0>-<192.0,279.0>-<196.0,258.0>>/L<<196.0,258.0>--<196.0,402.0>> = 10.784297867562596
	* uni10091: L<<196.0,0.0>--<196.0,219.0>>/B<<196.0,219.0>-<190.0,193.0>-<164.5,168.0>> = 12.994616791916512
	* uni10097: B<<245.0,660.0>-<289.0,604.0>-<301.0,520.0>>/L<<301.0,520.0>--<301.0,660.0>> = 8.13010235415596
	* uni10097: L<<371.0,660.0>--<371.0,521.0>>/B<<371.0,521.0>-<382.0,604.0>-<425.0,660.0>> = 7.549421768263246
	* uni1009E: B<<213.0,623.5>-<185.0,669.0>-<180.0,731.0>>/L<<180.0,731.0>--<180.0,166.0>> = 4.610649318660583
	* uni1009E: L<<570.0,166.0>--<570.0,731.0>>/B<<570.0,731.0>-<565.0,669.0>-<536.5,623.5>> = 4.610649318660583
	* uni100C1: B<<394.5,385.5>-<425.0,427.0>-<452.0,433.0>>/B<<452.0,433.0>-<415.0,433.0>-<380.5,435.5>> = 12.528807709151492
	* uni100C1: B<<539.5,435.5>-<505.0,433.0>-<469.0,433.0>>/B<<469.0,433.0>-<496.0,427.0>-<526.0,386.0>> = 12.528807709151492
	* uni100D2: B<<217.0,579.5>-<188.0,619.0>-<180.0,677.0>>/L<<180.0,677.0>--<180.0,63.0>> = 7.853313301978193 and uni100D2: L<<570.0,63.0>--<570.0,674.0>>/B<<570.0,674.0>-<562.0,617.0>-<533.0,578.0>> = 7.9893267663968714 [code: found-jaggy-segments]


    Result: [1;30;103mWARN[0m


Total:

    [1;97;101mERROR[0m: 0
    [1;91;107mFAIL[0m: 3
    [1;30;103mWARN[0m: 4
    [0;36;107mINFO[0m: 2
    [0;34;107mSKIP[0m: 20
    [0;32;107mPASS[0m: 48


DONE!

    [1;30;107mMeaning of check results:[0m

    An [1;97;101mERROR[0m is something wrong with FontBakery itself, possibly a bug.
    A [1;91;107mFAIL[0m is a problem with the font that must be fixed.
    A [1;30;103mWARN[0m is something that you should consider addressing.
    An [0;36;107mINFO[0m result simply prints something useful. Typically stats.
    A [0;32;107mPASS[0m means the font looks good for the given checking routine.
    And a [0;34;107mSKIP[0m happens when the check does not apply to the given font.

    If you get [1;97;101mERROR[0ms, please help us improve the tool by reporting them at
    [1;36;107mhttps://github.com/googlefonts/fontbakery/issues[0m

    (but other kinds of bug reports and/or
     feature requests are also always welcome, of course!)

