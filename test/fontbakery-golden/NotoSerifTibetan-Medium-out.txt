Start ... running 77 individual check executions.
 >> [1;35;107mcom.google.fonts/check/required_tables[0m
    [0;36;107mFont contains all required tables?[0m
    with NotoSerifTibetan-Medium.ttf

    [1;35;107m  Rationale:                                                                [0m
    [0;30;107m  Depending on the typeface and coverage of a font, certain tables are      [0m
    [0;30;107m  recommended for optimum quality. For example, the performance of a        [0m
    [0;30;107m  non-linear font is improved if the VDMX, LTSH, and hdmx tables are        [0m
    [0;30;107m  present. Non-monospaced Latin fonts should have a kern table. A gasp      [0m
    [0;30;107m  table is necessary if a designer wants to influence the sizes at which    [0m
    [0;30;107m  grayscaling is used under Windows. A DSIG table containing a digital      [0m
    [0;30;107m  signature helps ensure the integrity of the font file. Etc.               [0m

    * [0;36;107mINFO[0m: This font contains the following optional tables [loca, GPOS, GSUB]


    Result: [0;36;107mINFO[0m

 >> [1;35;107mcom.google.fonts/check/superfamily/list[0m
    [0;36;107mList all superfamily filepaths[0m
    with NotoSerifTibetan-Medium.ttf

    [1;35;107m  Rationale:                                                                [0m
    [0;30;107m  This is a merely informative check that lists all sibling families        [0m
    [0;30;107m  detected by fontbakery.                                                   [0m
    [0;30;107m                                                                            [0m
    [0;30;107m  Only the fontfiles in these directories will be considered in             [0m
    [0;30;107m  superfamily-level checks.                                                 [0m

    * [0;36;107mINFO[0m: . [code: family-path]


    Result: [0;36;107mINFO[0m

 >> [1;35;107mcom.google.fonts/check/dsig[0m
    [0;36;107mDoes the font have a DSIG table?[0m
    with NotoSerifTibetan-Medium.ttf

    [1;35;107m  Rationale:                                                                [0m
    [0;30;107m  Microsoft Office 2013 and below products expect fonts to have a digital   [0m
    [0;30;107m  signature declared in a DSIG table in order to implement OpenType         [0m
    [0;30;107m  features. The EOL date for Microsoft Office 2013 products is 4/11/2023.   [0m
    [0;30;107m  This issue does not impact Microsoft Office 2016 and above products.      [0m
    [0;30;107m                                                                            [0m
    [0;30;107m  This checks verifies that this signature is available in the font.        [0m
    [0;30;107m                                                                            [0m
    [0;30;107m  A fake signature is enough to address this issue. If needed, a dummy      [0m
    [0;30;107m  table can be added to the font with the `gftools fix-dsig` script         [0m
    [0;30;107m  available at https://github.com/googlefonts/gftools                       [0m
    [0;30;107m                                                                            [0m
    [0;30;107m  Reference: https://github.com/googlefonts/fontbakery/issues/1845          [0m

    * [1;91;107mFAIL[0m: This font lacks a digital signature (DSIG table). Some applications may require one (even if only a dummy placeholder) in order to work properly. You can add a DSIG table by running the `gftools fix-dsig` script. [code: lacks-signature]


    Result: [1;91;107mFAIL[0m

 >> [1;35;107mcom.google.fonts/check/gdef_mark_chars[0m
    [0;36;107mCheck mark characters are in GDEF mark glyph class[0m
    with NotoSerifTibetan-Medium.ttf

    [1;35;107m  Rationale:                                                                [0m
    [0;30;107m  Mark characters should be in the GDEF mark glyph class.                   [0m

    * [1;30;103mWARN[0m: The following mark characters could be in the GDEF mark glyph class:
	 U+0F3E, U+0F3F and U+0F7F [code: mark-chars]


    Result: [1;30;103mWARN[0m

 >> [1;35;107mcom.google.fonts/check/outline_colinear_vectors[0m
    [0;36;107mDo any segments have colinear vectors?[0m
    with NotoSerifTibetan-Medium.ttf

    [1;35;107m  Rationale:                                                                [0m
    [0;30;107m  This test looks for consecutive line segments which have the same angle.  [0m
    [0;30;107m  This normally happens if an outline point has been added by accident.     [0m
    [0;30;107m                                                                            [0m
    [0;30;107m  This test is not run for variable fonts, as they may legitimately have    [0m
    [0;30;107m  colinear vectors.                                                         [0m

    * [1;30;103mWARN[0m: The following glyphs have colinear vectors:
	* uni0F33: L<<167.0,398.0>--<355.0,572.0>> -> L<<355.0,572.0>--<357.0,574.0>>
	* uni0F33: L<<397.0,537.0>--<395.0,535.0>> -> L<<395.0,535.0>--<199.0,354.0>>
	* uni0F420FA30F71: L<<401.0,-214.0>--<566.0,-214.0>> -> L<<566.0,-214.0>--<566.0,-214.0>>
	* uni0F4A0FA10FB1: L<<495.0,-204.0>--<495.0,-202.0>> -> L<<495.0,-202.0>--<495.0,-201.0>>
	* uni0F4A0FB30F71: L<<331.0,249.0>--<331.0,249.0>> -> L<<331.0,249.0>--<367.0,249.0>>
	* uni0F4E0FB10F71: L<<40.0,108.0>--<40.0,108.0>> -> L<<40.0,108.0>--<40.0,108.0>>
	* uni0F4E0FB10F74: L<<40.0,108.0>--<40.0,108.0>> -> L<<40.0,108.0>--<40.0,108.0>>
	* uni0F520F74: L<<319.0,-276.0>--<319.0,-276.0>> -> L<<319.0,-276.0>--<319.0,-276.0>>
	* uni0F530F9F0F74: L<<328.0,-286.0>--<328.0,-286.0>> -> L<<328.0,-286.0>--<328.0,-286.0>>
	* uni0F530FA20F71: L<<307.0,-366.0>--<332.0,-366.0>> -> L<<332.0,-366.0>--<332.0,-366.0>> and 21 more. [code: found-colinear-vectors]


    Result: [1;30;103mWARN[0m

 >> [1;35;107mcom.google.fonts/check/outline_jaggy_segments[0m
    [0;36;107mDo outlines contain any jaggy segments?[0m
    with NotoSerifTibetan-Medium.ttf

    [1;35;107m  Rationale:                                                                [0m
    [0;30;107m  This test heuristically detects outline segments which form a             [0m
    [0;30;107m  particularly small angle, indicative of an outline error. This may cause  [0m
    [0;30;107m  false positives in cases such as extreme ink traps, so should be regarded [0m
    [0;30;107m  as advisory and backed up by manual inspection.                           [0m

    * [1;30;103mWARN[0m: The following glyphs have jaggy segments:
	* uni0F17: B<<99.0,193.0>-<108.0,174.0>-<115.0,157.0>>/B<<115.0,157.0>-<110.0,187.0>-<103.0,218.0>> = 12.917812843933946
	* uni0F4D0FB30F71: B<<466.0,25.0>-<431.0,12.0>-<375.0,0.0>>/L<<375.0,0.0>--<375.0,0.0>> = 12.094757077012089
	* uni0F4F0FB60FA3: L<<148.0,-3.0>--<503.0,-3.0>>/L<<503.0,-3.0>--<499.0,-2.0>> = 14.036243467926484
	* uni0F55.3: B<<374.0,548.0>-<426.0,567.0>-<482.0,581.0>>/L<<482.0,581.0>--<449.0,581.0>> = 14.036243467926484
	* uni0F660FA50F710F74: B<<409.0,210.0>-<463.0,231.0>-<523.0,246.0>>/L<<523.0,246.0>--<483.0,246.0>> = 14.036243467926484
	* uni0F7B.2: B<<311.5,846.5>-<371.0,821.0>-<457.0,771.0>>/B<<457.0,771.0>-<380.0,840.0>-<326.5,876.5>> = 11.690121602023062
	* uni0F7B.narrow: B<<274.0,876.5>-<321.0,847.0>-<388.0,791.0>>/B<<388.0,791.0>-<330.0,870.0>-<289.0,912.0>> = 13.825150435892386
	* uni0F7B0F7E.narrow: B<<272.5,872.5>-<320.0,844.0>-<388.0,790.0>>/B<<388.0,790.0>-<329.0,867.0>-<287.5,908.5>> = 14.085735922803359
	* uni0F7B0F7E: B<<311.5,846.5>-<371.0,821.0>-<457.0,771.0>>/B<<457.0,771.0>-<380.0,840.0>-<326.5,876.5>> = 11.690121602023062
	* uni0F7B0F82.narrow: B<<272.5,872.5>-<320.0,844.0>-<388.0,790.0>>/B<<388.0,790.0>-<329.0,867.0>-<287.5,908.5>> = 14.085735922803359 and 13 more. [code: found-jaggy-segments]


    Result: [1;30;103mWARN[0m


Total:

    [1;97;101mERROR[0m: 0
    [1;91;107mFAIL[0m: 1
    [1;30;103mWARN[0m: 3
    [0;36;107mINFO[0m: 2
    [0;34;107mSKIP[0m: 18
    [0;32;107mPASS[0m: 53


DONE!

    [1;30;107mMeaning of check results:[0m

    An [1;97;101mERROR[0m is something wrong with FontBakery itself, possibly a bug.
    A [1;91;107mFAIL[0m is a problem with the font that must be fixed.
    A [1;30;103mWARN[0m is something that you should consider addressing.
    An [0;36;107mINFO[0m result simply prints something useful. Typically stats.
    A [0;32;107mPASS[0m means the font looks good for the given checking routine.
    And a [0;34;107mSKIP[0m happens when the check does not apply to the given font.

    If you get [1;97;101mERROR[0ms, please help us improve the tool by reporting them at
    [1;36;107mhttps://github.com/googlefonts/fontbakery/issues[0m

    (but other kinds of bug reports and/or
     feature requests are also always welcome, of course!)

