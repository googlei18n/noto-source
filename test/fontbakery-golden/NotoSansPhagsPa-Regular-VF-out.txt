Start ... running 77 individual check executions.
 >> [1;35;107mcom.google.fonts/check/family/win_ascent_and_descent[0m
    [0;36;107mChecking OS/2 usWinAscent & usWinDescent.[0m
    with NotoSansPhagsPa-Regular-VF.ttf

    [1;35;107m  Rationale:                                                                [0m
    [0;30;107m  A font's winAscent and winDescent values should be greater than the head  [0m
    [0;30;107m  table's yMax, abs(yMin) values. If they are less than these values,       [0m
    [0;30;107m  clipping can occur on Windows platforms                                   [0m
    [0;30;107m  (https://github.com/RedHatBrand/Overpass/issues/33).                      [0m
    [0;30;107m                                                                            [0m
    [0;30;107m  If the font includes tall/deep writing systems such as Arabic or          [0m
    [0;30;107m  Devanagari, the winAscent and winDescent can be greater than the yMax and [0m
    [0;30;107m  abs(yMin) to accommodate vowel marks.                                     [0m
    [0;30;107m                                                                            [0m
    [0;30;107m  When the win Metrics are significantly greater than the upm, the          [0m
    [0;30;107m  linespacing can appear too loose. To counteract this, enabling the OS/2   [0m
    [0;30;107m  fsSelection bit 7 (Use_Typo_Metrics), will force Windows to use the OS/2  [0m
    [0;30;107m  typo values instead. This means the font developer can control the        [0m
    [0;30;107m  linespacing with the typo values, whilst avoiding clipping by setting the [0m
    [0;30;107m  win values to values greater than the yMax and abs(yMin).                 [0m

    * [1;91;107mFAIL[0m: OS/2.usWinDescent value 293 is too large. It should be less than double the yMin. Current absolute yMin value is 129 [code: descent]


    Result: [1;91;107mFAIL[0m

 >> [1;35;107mcom.google.fonts/check/required_tables[0m
    [0;36;107mFont contains all required tables?[0m
    with NotoSansPhagsPa-Regular-VF.ttf

    [1;35;107m  Rationale:                                                                [0m
    [0;30;107m  Depending on the typeface and coverage of a font, certain tables are      [0m
    [0;30;107m  recommended for optimum quality. For example, the performance of a        [0m
    [0;30;107m  non-linear font is improved if the VDMX, LTSH, and hdmx tables are        [0m
    [0;30;107m  present. Non-monospaced Latin fonts should have a kern table. A gasp      [0m
    [0;30;107m  table is necessary if a designer wants to influence the sizes at which    [0m
    [0;30;107m  grayscaling is used under Windows. A DSIG table containing a digital      [0m
    [0;30;107m  signature helps ensure the integrity of the font file. Etc.               [0m

    * [0;36;107mINFO[0m: This font contains the following optional tables [loca, GPOS, GSUB]


    Result: [0;36;107mINFO[0m

 >> [1;35;107mcom.google.fonts/check/superfamily/list[0m
    [0;36;107mList all superfamily filepaths[0m
    with NotoSansPhagsPa-Regular-VF.ttf

    [1;35;107m  Rationale:                                                                [0m
    [0;30;107m  This is a merely informative check that lists all sibling families        [0m
    [0;30;107m  detected by fontbakery.                                                   [0m
    [0;30;107m                                                                            [0m
    [0;30;107m  Only the fontfiles in these directories will be considered in             [0m
    [0;30;107m  superfamily-level checks.                                                 [0m

    * [0;36;107mINFO[0m: . [code: family-path]


    Result: [0;36;107mINFO[0m

 >> [1;35;107mcom.google.fonts/check/monospace[0m
    [0;36;107mChecking correctness of monospaced metadata.[0m
    with NotoSansPhagsPa-Regular-VF.ttf

    [1;35;107m  Rationale:                                                                [0m
    [0;30;107m  There are various metadata in the OpenType spec to specify if a font is   [0m
    [0;30;107m  monospaced or not. If the font is not truly monospaced, then no           [0m
    [0;30;107m  monospaced metadata should be set (as sometimes they mistakenly are...)   [0m
    [0;30;107m                                                                            [0m
    [0;30;107m  Requirements for monospace fonts:                                         [0m
    [0;30;107m                                                                            [0m
    [0;30;107m  * post.isFixedPitch - "Set to 0 if the font is proportionally spaced,     [0m
    [0;30;107m  non-zero if the font is not proportionally spaced (monospaced)"           [0m
    [0;30;107m    www.microsoft.com/typography/otspec/post.htm                            [0m
    [0;30;107m                                                                            [0m
    [0;30;107m  * hhea.advanceWidthMax must be correct, meaning no glyph's width value is [0m
    [0;30;107m  greater.                                                                  [0m
    [0;30;107m    www.microsoft.com/typography/otspec/hhea.htm                            [0m
    [0;30;107m                                                                            [0m
    [0;30;107m  * OS/2.panose.bProportion must be set to 9 (monospace). Spec says: "The   [0m
    [0;30;107m  PANOSE definition contains ten digits each of which currently describes   [0m
    [0;30;107m  up to sixteen variations. Windows uses bFamilyType, bSerifStyle and       [0m
    [0;30;107m  bProportion in the font mapper to determine family type. It also uses     [0m
    [0;30;107m  bProportion to determine if the font is monospaced."                      [0m
    [0;30;107m    www.microsoft.com/typography/otspec/os2.htm#pan                         [0m
    [0;30;107m    monotypecom-test.monotype.de/services/pan2                              [0m
    [0;30;107m                                                                            [0m
    [0;30;107m  * OS/2.xAvgCharWidth must be set accurately.                              [0m
    [0;30;107m    "OS/2.xAvgCharWidth is used when rendering monospaced fonts, at least   [0m
    [0;30;107m  by Windows GDI"                                                           [0m
    [0;30;107m    http://typedrawers.com/discussion/comment/15397/#Comment_15397          [0m
    [0;30;107m                                                                            [0m
    [0;30;107m  Also we should report an error for glyphs not of average width.           [0m
    [0;30;107m                                                                            [0m
    [0;30;107m  Please also note:                                                         [0m
    [0;30;107m  Thomas Phinney told us that a few years ago (as of December 2019), if you [0m
    [0;30;107m  gave a font a monospace flag in Panose, Microsoft Word would ignore the   [0m
    [0;30;107m  actual advance widths and treat it as monospaced. Source:                 [0m
    [0;30;107m  https://typedrawers.com/discussion/comment/45140/#Comment_45140           [0m

    * [1;91;107mFAIL[0m: On monospaced fonts, the value of post.isFixedPitch must be set to a non-zero value (meaning 'fixed width monospaced'), but got 0 instead. [code: mono-bad-post-isFixedPitch]
    * [1;91;107mFAIL[0m: On monospaced fonts, the value of OS/2.panose.bProportion must be set to 9 (proportion: monospaced), but got 2 instead. [code: mono-bad-panose-proportion]
    * [1;30;103mWARN[0m: Font is monospaced but 366 glyphs (96.57%) have a different width. You should check the widths of: ['CR', 'space', 'uni00A0', 'uniA849', 'uniA85B', 'uniA843', 'uniA857', 'uniA85C', 'uniA85B.fin', 'uniA857.ini', 'uniA857.med', 'uniA84F.ini', 'uniA84F.med', 'uniA85D.fin', 'uniA85D.ini', 'uniA85D.ini.cnt', 'uniA85D.med', 'uniA85B.ini', 'uniA85B.med', 'uniA85B.ini.cnt', 'uniA85D.med.cnt', 'uniA85E.ini', 'uniA85E.med', 'uniA85E.fin', 'uniA843.ini', 'uniA85A', 'uniA855', 'uniA843.fin', 'uniA844', 'uniA866', 'uniA857.fin', 'uniA856', 'uniA859', 'uniA860', 'uniA860.ini', 'uniA860.med', 'uniA860.fin', 'uniA861', 'uniA861.med', 'uniA861.fin', 'uniA861.ini', 'uniA85F', 'uniA85F.ini', 'uniA85C.ini', 'uniA85C.med', 'uniA85F.med', 'uniA85F.fin', 'uniA840', 'uniA840.ini', 'uniA840.med', 'uniA840.fin', 'uniA85C.fin', 'uniA848', 'uniA840.ini.cnt', 'uniA862', 'uniA84B.ini', 'uniA84B.med', 'uniA84B.fin', 'uniA840.med.cnt', 'uniA862.ini', 'uniA862.fin', 'uniA862.med', 'uniA848.ini', 'uniA848.med', 'uniA848.fin', 'uniA84F.fin', 'uniA860.ini.cnt', 'uniA860.med.cnt', 'uniA85E.ini.cnt', 'uniA85E.med.cnt', 'uniA84A', 'uniA84C', 'uniA85C.ini.cnt', 'uniA85C.med.cnt', 'uniA848.ini.cnt', 'uniA848.med.cnt', 'uniA84B.ini.cnt', 'uniA84B.med.cnt', 'uniA858', 'uniA846', 'uniA84D', 'uniA853', 'uniA842', 'uniA841', 'uniA841.ini', 'uniA843.ini.cnt', 'uniA85B.med.cnt', 'uniA852', 'uniA857.ini.cnt', 'uniA857.med.cnt', 'uniA85F.med.cnt', 'uniA854', 'uniA854.ini', 'uniA854.ini.cnt', 'uniA854.med', 'uniA854.med.cnt', 'uniA854.fin', 'uniA84F.ini.cnt', 'uniA84F.med.cnt', 'uniA850', 'uniA850.ini', 'uniA850.med', 'uniA850.fin', 'uniA850.ini.cnt', 'uniA850.med.cnt', 'uniA845', 'uniA843.med', 'uniA843.med.cnt', 'uniA846.ini', 'uniA846.ini.cnt', 'uniA846.med', 'uniA846.med.cnt', 'uniA846.fin', 'uniA849.ini', 'uniA849.ini.cnt', 'uniA849.med', 'uniA849.med.cnt', 'uniA849.fin', 'uniA84A.ini', 'uniA84A.ini.cnt', 'uniA84A.med', 'uniA84A.med.cnt', 'uniA84A.fin', 'uniA844.ini', 'uniA844.ini.cnt', 'uniA844.med', 'uniA844.med.cnt', 'uniA844.fin', 'uniA845.ini', 'uniA845.ini.cnt', 'uniA845.med', 'uniA845.med.cnt', 'uniA845.fin', 'uniA84C.ini', 'uniA84C.ini.cnt', 'uniA84C.med', 'uniA84C.med.cnt', 'uniA84C.fin', 'uniA84D.ini', 'uniA84D.ini.cnt', 'uniA84D.med', 'uniA84D.med.cnt', 'uniA84D.fin', 'uniA852.ini', 'uniA852.ini.cnt', 'uniA852.med', 'uniA852.med.cnt', 'uniA852.fin', 'uniA855.ini', 'uniA855.ini.cnt', 'uniA855.med', 'uniA855.med.cnt', 'uniA855.fin', 'uniA856.ini', 'uniA856.ini.cnt', 'uniA856.med', 'uniA856.med.cnt', 'uniA856.fin', 'uniA858.ini', 'uniA858.ini.cnt', 'uniA858.med', 'uniA858.med.cnt', 'uniA858.fin', 'uniA866.ini', 'uniA866.ini.cnt', 'uniA866.med', 'uniA866.med.cnt', 'uniA866.fin', 'uniA85A.ini', 'uniA85A.ini.cnt', 'uniA85A.med', 'uniA85A.med.cnt', 'uniA85A.fin', 'uniA841.ini.cnt', 'uniA841.med', 'uniA841.med.cnt', 'uniA841.fin', 'uniA842.ini', 'uniA842.ini.cnt', 'uniA842.med', 'uniA842.med.cnt', 'uniA842.fin', 'uniA859.ini', 'uniA859.ini.cnt', 'uniA859.med', 'uniA859.med.cnt', 'uniA859.fin', 'uniA853.ini', 'uniA853.ini.cnt', 'uniA853.med', 'uniA853.med.cnt', 'uniA853.fin', 'uniA867', 'uniA867.ini', 'uniA867.fin', 'uniA867.ini.cnt', 'uniA864', 'uniA864.ini', 'uniA864.ini.cnt', 'uniA864.med', 'uniA864.med.cnt', 'uniA864.fin', 'uniA869', 'uniA865', 'uniA865.ini', 'uniA862.med.cnt', 'uniA865.ini.cnt', 'uniA865.med', 'uniA865.med.cnt', 'uniA865.fin', 'uniA869.ini', 'uniA869.ini.cnt', 'uniA869.med', 'uniA869.med.cnt', 'uniA869.fin', 'uniA86A', 'uniA86A.ini', 'uniA86A.ini.cnt', 'uniA86A.med', 'uniA86A.med.cnt', 'uniA86A.fin', 'uniA85F.mir.med', 'uniA85F.mir.med.cnt', 'uniA85F.mir.fin', 'uniA863', 'uniA863.ini', 'uniA863.med', 'uniA863.med.cnt', 'uniA863.fin', 'uniA863.ini.cnt', 'uniA860.mir.med', 'uniA860.mir.med.cnt', 'uniA860.mir.fin', 'uniA86B', 'uniA86B.ini', 'uniA86B.ini.cnt', 'uniA86B.med', 'uniA86B.med.cnt', 'uniA86B.fin', 'uniA86C.ini', 'uniA86C.ini.cnt', 'uniA86C.med', 'uniA86C.med.cnt', 'uniA86C.fin', 'uniA85C.mir.med', 'uniA85C.mir.med.cnt', 'uniA85C.mir.fin', 'uniA85E.mir.med', 'uniA85E.mir.med.cnt', 'uniA85E.mir.fin', 'uniA86F', 'uniA86F.ini', 'uniA86F.ini.cnt', 'uniA86F.med', 'uniA86F.med.cnt', 'uniA86F.fin', 'uniA870', 'uniA871', 'uniA871.ini', 'uniA871.ini.cnt', 'uniA871.med', 'uniA871.med.cnt', 'uniA871.fin', 'uniA872', 'uniA872.ini', 'uniA873', 'uniA856.mir.fin', 'uniA875', 'uniA874', 'uniA876', 'uniA877', 'uniA86E', 'uniA86E.fin', 'uniA86E.ini', 'uniA86E.ini.cnt', 'uniA86E.med', 'uniA86E.med.cnt', 'uniA868', 'uniA868.ini', 'uniA868.ini.cnt', 'uniA868.med', 'uniA868.med.cnt', 'uniA868.fin', 'uniA868.mir.med', 'uniA868.mir.med.cnt', 'uniA868.mir.fin', 'uniA870.ini', 'uniA870.med', 'uniA870.ini.cnt', 'uniA870.med.cnt', 'uniA870.fin', 'uniA84E', 'uniA84E.ini', 'uniA84E.med', 'uniA84E.ini.cnt', 'uniA84E.med.cnt', 'uniA84E.fin', 'uniA86D', 'uniA86D.ini', 'uniA86D.ini.cnt', 'uniA86D.med', 'uniA86D.med.cnt', 'uniA86D.str.med', 'uniA86D.str.med.cnt', 'uniA86D.fin', 'uniA86D.str.fin', 'uniA851', 'uniA847', 'uniA847.ini', 'uniA847.ini.cnt', 'uniA847.med', 'uniA847.med.cnt', 'uniA847.fin', 'uniA851.ini', 'uniA851.ini.cnt', 'uniA851.med', 'uniA851.med.cnt', 'uniA851.fin', 'uniA867.med', 'uniA867.med.cnt', 'uni1802', 'uni1803', 'uni1805', 'uniA85E.str.med', 'uniA85E.str.med.cnt', 'uniA85E.str.fin', 'uni3002', 'uni3001', 'uniA856.mir', 'uniA856.mir.ini', 'uniA856.mir.med.cnt', 'uniA856.mir.med', 'uniA85C.mir', 'uniA85C.mir.ini', 'uniA85E.mir.ini', 'uniA85F.mir', 'uniA85F.mir.ini', 'uniA860.mir', 'uniA860.mir.ini', 'uniA868.mir', 'uniA868.mir.ini', 'uniA862.ini.cnt', 'uni3014', 'uni3015', 'twodotenleader', 'ellipsis', 'uniA85D', 'uni3007', 'uni3008', 'uni3009', 'uni300A', 'uni300B', 'uni300C', 'uni300D', 'uni300E', 'uni300F', 'uni3010', 'uni3011', 'uni3016', 'uni3017', 'uni3018', 'uni3019', 'uni301A', 'uni301B', 'uni25CC', 'uni1801'] [code: mono-outliers]


    Result: [1;91;107mFAIL[0m

 >> [1;35;107mcom.google.fonts/check/dsig[0m
    [0;36;107mDoes the font have a DSIG table?[0m
    with NotoSansPhagsPa-Regular-VF.ttf

    [1;35;107m  Rationale:                                                                [0m
    [0;30;107m  Microsoft Office 2013 and below products expect fonts to have a digital   [0m
    [0;30;107m  signature declared in a DSIG table in order to implement OpenType         [0m
    [0;30;107m  features. The EOL date for Microsoft Office 2013 products is 4/11/2023.   [0m
    [0;30;107m  This issue does not impact Microsoft Office 2016 and above products.      [0m
    [0;30;107m                                                                            [0m
    [0;30;107m  This checks verifies that this signature is available in the font.        [0m
    [0;30;107m                                                                            [0m
    [0;30;107m  A fake signature is enough to address this issue. If needed, a dummy      [0m
    [0;30;107m  table can be added to the font with the `gftools fix-dsig` script         [0m
    [0;30;107m  available at https://github.com/googlefonts/gftools                       [0m
    [0;30;107m                                                                            [0m
    [0;30;107m  Reference: https://github.com/googlefonts/fontbakery/issues/1845          [0m

    * [1;91;107mFAIL[0m: This font lacks a digital signature (DSIG table). Some applications may require one (even if only a dummy placeholder) in order to work properly. You can add a DSIG table by running the `gftools fix-dsig` script. [code: lacks-signature]


    Result: [1;91;107mFAIL[0m

 >> [1;35;107mcom.google.fonts/check/gpos_kerning_info[0m
    [0;36;107mDoes GPOS table have kerning information? This check skips monospaced fonts as defined by post.isFixedPitch value[0m
    with NotoSansPhagsPa-Regular-VF.ttf

    * [1;30;103mWARN[0m: GPOS table lacks kerning information. [code: lacks-kern-info]


    Result: [1;30;103mWARN[0m

 >> [1;35;107mcom.google.fonts/check/outline_alignment_miss[0m
    [0;36;107mAre there any misaligned on-curve points?[0m
    with NotoSansPhagsPa-Regular-VF.ttf

    [1;35;107m  Rationale:                                                                [0m
    [0;30;107m  This test heuristically looks for on-curve points which are close to, but [0m
    [0;30;107m  do not sit on, significant boundary coordinates. For example, a point     [0m
    [0;30;107m  which has a Y-coordinate of 1 or -1 might be a misplaced baseline point.  [0m
    [0;30;107m  As well as the baseline, the test also checks for points near the         [0m
    [0;30;107m  x-height (but only for lower case Latin letters), cap-height, ascender    [0m
    [0;30;107m  and descender Y coordinates.                                              [0m
    [0;30;107m                                                                            [0m
    [0;30;107m  Not all such misaligned curve points are a mistake, and sometimes the     [0m
    [0;30;107m  design may call for points in locations near the boundaries. As this test [0m
    [0;30;107m  is liable to generate significant numbers of false positives, the test    [0m
    [0;30;107m  will pass if there are more than 100 reported misalignments.              [0m

    * [1;30;103mWARN[0m: The following glyphs have on-curve points which have potentially incorrect y coordinates:
	* uniA869: X=540.0,Y=-1.0 (should be at baseline 0?)
	* uniA869.ini: X=546.0,Y=2.0 (should be at baseline 0?)
	* uniA869.med: X=476.0,Y=2.0 (should be at baseline 0?)
	* uniA869.fin: X=470.0,Y=-1.0 (should be at baseline 0?)
	* uni3014: X=293.0,Y=2.0 (should be at baseline 0?) and uni3015: X=293.0,Y=2.0 (should be at baseline 0?) [code: found-misalignments]


    Result: [1;30;103mWARN[0m


Total:

    [1;97;101mERROR[0m: 0
    [1;91;107mFAIL[0m: 3
    [1;30;103mWARN[0m: 2
    [0;36;107mINFO[0m: 2
    [0;34;107mSKIP[0m: 16
    [0;32;107mPASS[0m: 54


DONE!

    [1;30;107mMeaning of check results:[0m

    An [1;97;101mERROR[0m is something wrong with FontBakery itself, possibly a bug.
    A [1;91;107mFAIL[0m is a problem with the font that must be fixed.
    A [1;30;103mWARN[0m is something that you should consider addressing.
    An [0;36;107mINFO[0m result simply prints something useful. Typically stats.
    A [0;32;107mPASS[0m means the font looks good for the given checking routine.
    And a [0;34;107mSKIP[0m happens when the check does not apply to the given font.

    If you get [1;97;101mERROR[0ms, please help us improve the tool by reporting them at
    [1;36;107mhttps://github.com/googlefonts/fontbakery/issues[0m

    (but other kinds of bug reports and/or
     feature requests are also always welcome, of course!)

