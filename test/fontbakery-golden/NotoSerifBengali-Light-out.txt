Start ... running 77 individual check executions.
 >> [1;35;107mcom.google.fonts/check/family/win_ascent_and_descent[0m
    [0;36;107mChecking OS/2 usWinAscent & usWinDescent.[0m
    with NotoSerifBengali-Light.ttf

    [1;35;107m  Rationale:                                                                [0m
    [0;30;107m  A font's winAscent and winDescent values should be greater than the head  [0m
    [0;30;107m  table's yMax, abs(yMin) values. If they are less than these values,       [0m
    [0;30;107m  clipping can occur on Windows platforms                                   [0m
    [0;30;107m  (https://github.com/RedHatBrand/Overpass/issues/33).                      [0m
    [0;30;107m                                                                            [0m
    [0;30;107m  If the font includes tall/deep writing systems such as Arabic or          [0m
    [0;30;107m  Devanagari, the winAscent and winDescent can be greater than the yMax and [0m
    [0;30;107m  abs(yMin) to accommodate vowel marks.                                     [0m
    [0;30;107m                                                                            [0m
    [0;30;107m  When the win Metrics are significantly greater than the upm, the          [0m
    [0;30;107m  linespacing can appear too loose. To counteract this, enabling the OS/2   [0m
    [0;30;107m  fsSelection bit 7 (Use_Typo_Metrics), will force Windows to use the OS/2  [0m
    [0;30;107m  typo values instead. This means the font developer can control the        [0m
    [0;30;107m  linespacing with the typo values, whilst avoiding clipping by setting the [0m
    [0;30;107m  win values to values greater than the yMax and abs(yMin).                 [0m

    * [1;91;107mFAIL[0m: OS/2.usWinAscent value should be equal or greater than 1198, but got 1092 instead [code: ascent]


    Result: [1;91;107mFAIL[0m

 >> [1;35;107mcom.google.fonts/check/required_tables[0m
    [0;36;107mFont contains all required tables?[0m
    with NotoSerifBengali-Light.ttf

    [1;35;107m  Rationale:                                                                [0m
    [0;30;107m  Depending on the typeface and coverage of a font, certain tables are      [0m
    [0;30;107m  recommended for optimum quality. For example, the performance of a        [0m
    [0;30;107m  non-linear font is improved if the VDMX, LTSH, and hdmx tables are        [0m
    [0;30;107m  present. Non-monospaced Latin fonts should have a kern table. A gasp      [0m
    [0;30;107m  table is necessary if a designer wants to influence the sizes at which    [0m
    [0;30;107m  grayscaling is used under Windows. A DSIG table containing a digital      [0m
    [0;30;107m  signature helps ensure the integrity of the font file. Etc.               [0m

    * [0;36;107mINFO[0m: This font contains the following optional tables [loca, GPOS, GSUB]


    Result: [0;36;107mINFO[0m

 >> [1;35;107mcom.google.fonts/check/superfamily/list[0m
    [0;36;107mList all superfamily filepaths[0m
    with NotoSerifBengali-Light.ttf

    [1;35;107m  Rationale:                                                                [0m
    [0;30;107m  This is a merely informative check that lists all sibling families        [0m
    [0;30;107m  detected by fontbakery.                                                   [0m
    [0;30;107m                                                                            [0m
    [0;30;107m  Only the fontfiles in these directories will be considered in             [0m
    [0;30;107m  superfamily-level checks.                                                 [0m

    * [0;36;107mINFO[0m: . [code: family-path]


    Result: [0;36;107mINFO[0m

 >> [1;35;107mcom.google.fonts/check/dsig[0m
    [0;36;107mDoes the font have a DSIG table?[0m
    with NotoSerifBengali-Light.ttf

    [1;35;107m  Rationale:                                                                [0m
    [0;30;107m  Microsoft Office 2013 and below products expect fonts to have a digital   [0m
    [0;30;107m  signature declared in a DSIG table in order to implement OpenType         [0m
    [0;30;107m  features. The EOL date for Microsoft Office 2013 products is 4/11/2023.   [0m
    [0;30;107m  This issue does not impact Microsoft Office 2016 and above products.      [0m
    [0;30;107m                                                                            [0m
    [0;30;107m  This checks verifies that this signature is available in the font.        [0m
    [0;30;107m                                                                            [0m
    [0;30;107m  A fake signature is enough to address this issue. If needed, a dummy      [0m
    [0;30;107m  table can be added to the font with the `gftools fix-dsig` script         [0m
    [0;30;107m  available at https://github.com/googlefonts/gftools                       [0m
    [0;30;107m                                                                            [0m
    [0;30;107m  Reference: https://github.com/googlefonts/fontbakery/issues/1845          [0m

    * [1;91;107mFAIL[0m: This font lacks a digital signature (DSIG table). Some applications may require one (even if only a dummy placeholder) in order to work properly. You can add a DSIG table by running the `gftools fix-dsig` script. [code: lacks-signature]


    Result: [1;91;107mFAIL[0m

 >> [1;35;107mcom.google.fonts/check/gdef_mark_chars[0m
    [0;36;107mCheck mark characters are in GDEF mark glyph class[0m
    with NotoSerifBengali-Light.ttf

    [1;35;107m  Rationale:                                                                [0m
    [0;30;107m  Mark characters should be in the GDEF mark glyph class.                   [0m

    * [1;30;103mWARN[0m: The following mark characters could be in the GDEF mark glyph class:
	 U+0982, U+0983, U+09BE, U+09BF, U+09C0, U+09C7, U+09C8, U+09CB, U+09CC, U+09D7, U+1CE1 and U+1CF7 [code: mark-chars]


    Result: [1;30;103mWARN[0m

 >> [1;35;107mcom.google.fonts/check/glyf_nested_components[0m
    [0;36;107mCheck glyphs do not have components which are themselves components.[0m
    with NotoSerifBengali-Light.ttf

    [1;35;107m  Rationale:                                                                [0m
    [0;30;107m  There have been bugs rendering variable fonts with nested components.     [0m
    [0;30;107m  Additionally, some static fonts with nested components have been reported [0m
    [0;30;107m  to have rendering and printing issues.                                    [0m
    [0;30;107m                                                                            [0m
    [0;30;107m  For more info, see:                                                       [0m
    [0;30;107m  * https://github.com/googlefonts/fontbakery/issues/2961                   [0m
    [0;30;107m  * https://github.com/arrowtype/recursive/issues/412                       [0m

    * [1;91;107mFAIL[0m: The following glyphs have components which themselves are component glyphs:
	* uni09AD09BC09CD
	* uni09A609BC09CD
	* uni09A109BC09CD
	* uni09A209BC09CD
	* uni09A709BC09CD
	* uni099709BC09CD
	* uni099809BC09CD
	* uni099C09BC09CD
	* uni099D09BC09CD
	* uni09B209BC09CD and 13 more. [code: found-nested-components]


    Result: [1;91;107mFAIL[0m

 >> [1;35;107mcom.google.fonts/check/outline_alignment_miss[0m
    [0;36;107mAre there any misaligned on-curve points?[0m
    with NotoSerifBengali-Light.ttf

    [1;35;107m  Rationale:                                                                [0m
    [0;30;107m  This test heuristically looks for on-curve points which are close to, but [0m
    [0;30;107m  do not sit on, significant boundary coordinates. For example, a point     [0m
    [0;30;107m  which has a Y-coordinate of 1 or -1 might be a misplaced baseline point.  [0m
    [0;30;107m  As well as the baseline, the test also checks for points near the         [0m
    [0;30;107m  x-height (but only for lower case Latin letters), cap-height, ascender    [0m
    [0;30;107m  and descender Y coordinates.                                              [0m
    [0;30;107m                                                                            [0m
    [0;30;107m  Not all such misaligned curve points are a mistake, and sometimes the     [0m
    [0;30;107m  design may call for points in locations near the boundaries. As this test [0m
    [0;30;107m  is liable to generate significant numbers of false positives, the test    [0m
    [0;30;107m  will pass if there are more than 100 reported misalignments.              [0m

    * [1;30;103mWARN[0m: The following glyphs have on-curve points which have potentially incorrect y coordinates:
	* uni0980: X=272.0,Y=624.0 (should be at cap-height 622?)
	* uni0994: X=460.0,Y=624.0 (should be at cap-height 622?)
	* uni09AC09CD099C: X=718.0,Y=2.0 (should be at baseline 0?)
	* uni099A09BC09CD: X=377.5,Y=1.5 (should be at baseline 0?)
	* uni099A09BC09CD: X=453.5,Y=1.5 (should be at baseline 0?)
	* uni099A09CD099B09CD09B0: X=531.0,Y=1.0 (should be at baseline 0?)
	* uni099A09CD099B09CD09B0: X=314.0,Y=-1.0 (should be at baseline 0?)
	* uni099A09CD099E: X=592.0,Y=1.0 (should be at baseline 0?)
	* uni099B09CD09B0: X=355.0,Y=1.0 (should be at baseline 0?)
	* uni099B09CD09B0: X=137.5,Y=-1.0 (should be at baseline 0?) and 87 more. [code: found-misalignments]


    Result: [1;30;103mWARN[0m

 >> [1;35;107mcom.google.fonts/check/outline_jaggy_segments[0m
    [0;36;107mDo outlines contain any jaggy segments?[0m
    with NotoSerifBengali-Light.ttf

    [1;35;107m  Rationale:                                                                [0m
    [0;30;107m  This test heuristically detects outline segments which form a             [0m
    [0;30;107m  particularly small angle, indicative of an outline error. This may cause  [0m
    [0;30;107m  false positives in cases such as extreme ink traps, so should be regarded [0m
    [0;30;107m  as advisory and backed up by manual inspection.                           [0m

    * [1;30;103mWARN[0m: The following glyphs have jaggy segments:
	* uni099709CD09AE: B<<350.0,567.0>-<399.0,504.0>-<432.0,374.0>>/B<<432.0,374.0>-<430.0,423.0>-<429.0,457.5>> = 11.906154714423959
	* uni099709CD09B2: B<<424.5,145.0>-<439.0,119.0>-<448.0,92.0>>/B<<448.0,92.0>-<446.0,118.0>-<445.0,144.5>> = 14.036243467926457
	* uni09A009CD09B009C0: B<<412.5,435.5>-<377.0,500.0>-<319.0,572.0>>/B<<319.0,572.0>-<332.0,544.0>-<339.0,514.5>> = 13.948605532258144
	* uni09A009CD09B0: B<<412.5,435.5>-<377.0,500.0>-<319.0,572.0>>/B<<319.0,572.0>-<332.0,544.0>-<339.0,514.5>> = 13.948605532258144
	* uni09A309CD09A3: B<<346.5,267.5>-<393.0,221.0>-<427.0,105.0>>/B<<427.0,105.0>-<426.0,127.0>-<425.0,147.5>> = 13.733480687218622
	* uni09A309CD09AE: B<<329.5,566.0>-<384.0,504.0>-<418.0,373.0>>/B<<418.0,373.0>-<416.0,422.0>-<415.0,457.0>> = 12.212326910998513
	* uni09A309CD09AE: B<<536.0,168.0>-<572.0,127.0>-<590.0,68.0>>/B<<590.0,68.0>-<586.0,130.0>-<586.0,183.0>> = 13.274762122084901
	* uni09A609CD09AE: B<<447.5,168.5>-<484.0,125.0>-<504.0,62.0>>/B<<504.0,62.0>-<500.0,127.0>-<500.0,183.0>> = 14.09112446600155
	* uni09A809BC09CD: B<<354.5,258.5>-<374.0,217.0>-<384.0,175.0>>/B<<384.0,175.0>-<383.0,201.0>-<382.0,229.5>> = 11.1898995919853
	* uni09A809BC: B<<354.5,258.5>-<374.0,217.0>-<384.0,175.0>>/B<<384.0,175.0>-<383.0,201.0>-<382.0,229.5>> = 11.1898995919853 and 19 more. [code: found-jaggy-segments]


    Result: [1;30;103mWARN[0m

 >> [1;35;107mcom.google.fonts/check/outline_semi_vertical[0m
    [0;36;107mDo outlines contain any semi-vertical or semi-horizontal lines?[0m
    with NotoSerifBengali-Light.ttf

    [1;35;107m  Rationale:                                                                [0m
    [0;30;107m  This test detects line segments which are nearly, but not quite, exactly  [0m
    [0;30;107m  horizontal or vertical. Sometimes such lines are created by design, but   [0m
    [0;30;107m  often they are indicative of a design error.                              [0m
    [0;30;107m                                                                            [0m
    [0;30;107m  This test is disabled for italic styles, which often contain              [0m
    [0;30;107m  nearly-upright lines.                                                     [0m

    * [1;30;103mWARN[0m: The following glyphs have semi-vertical/semi-horizontal lines:
	* question: L<<228.0,318.0>--<227.0,186.0>>
	* uni099509CD09A8: L<<733.0,584.0>--<444.0,585.0>>
	* uni099509CD09B2: L<<733.0,584.0>--<444.0,585.0>>
	* uni099709CD09A7: L<<568.0,-1.0>--<567.0,289.0>>
	* uni099709CD09A7: L<<614.0,307.0>--<615.0,-33.0>>
	* uni099709CD09B009C2: L<<707.0,458.0>--<706.0,35.0>>
	* uni09A409CD09B009C2: L<<710.0,425.0>--<709.0,73.0>>
	* uni09A709CD09B009C2: L<<672.0,414.0>--<671.0,32.0>>
	* uni09A809CD09A709CD09B0: L<<559.0,54.0>--<558.0,340.0>>
	* uni09A809CD09A709CD09B0: L<<605.0,358.0>--<606.0,21.0>> and 22 more. [code: found-semi-vertical]


    Result: [1;30;103mWARN[0m


Total:

    [1;97;101mERROR[0m: 0
    [1;91;107mFAIL[0m: 3
    [1;30;103mWARN[0m: 4
    [0;36;107mINFO[0m: 2
    [0;34;107mSKIP[0m: 17
    [0;32;107mPASS[0m: 51


DONE!

    [1;30;107mMeaning of check results:[0m

    An [1;97;101mERROR[0m is something wrong with FontBakery itself, possibly a bug.
    A [1;91;107mFAIL[0m is a problem with the font that must be fixed.
    A [1;30;103mWARN[0m is something that you should consider addressing.
    An [0;36;107mINFO[0m result simply prints something useful. Typically stats.
    A [0;32;107mPASS[0m means the font looks good for the given checking routine.
    And a [0;34;107mSKIP[0m happens when the check does not apply to the given font.

    If you get [1;97;101mERROR[0ms, please help us improve the tool by reporting them at
    [1;36;107mhttps://github.com/googlefonts/fontbakery/issues[0m

    (but other kinds of bug reports and/or
     feature requests are also always welcome, of course!)

