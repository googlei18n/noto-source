Start ... running 71 individual check executions.
 >> [1;35;107mcom.google.fonts/check/required_tables[0m
    [0;36;107mFont contains all required tables?[0m
    with NotoSansCherokee-Regular.ttf

    [1;35;107m  Rationale:                                                                [0m
    [0;30;107m  Depending on the typeface and coverage of a font, certain tables are      [0m
    [0;30;107m  recommended for optimum quality. For example, the performance of a        [0m
    [0;30;107m  non-linear font is improved if the VDMX, LTSH, and hdmx tables are        [0m
    [0;30;107m  present. Non-monospaced Latin fonts should have a kern table. A gasp      [0m
    [0;30;107m  table is necessary if a designer wants to influence the sizes at which    [0m
    [0;30;107m  grayscaling is used under Windows. A DSIG table containing a digital      [0m
    [0;30;107m  signature helps ensure the integrity of the font file. Etc.               [0m

    * [0;36;107mINFO[0m: This font contains the following optional tables [loca, GPOS, GSUB]


    Result: [0;36;107mINFO[0m

 >> [1;35;107mcom.google.fonts/check/superfamily/list[0m
    [0;36;107mList all superfamily filepaths[0m
    with NotoSansCherokee-Regular.ttf

    [1;35;107m  Rationale:                                                                [0m
    [0;30;107m  This is a merely informative check that lists all sibling families        [0m
    [0;30;107m  detected by fontbakery.                                                   [0m
    [0;30;107m                                                                            [0m
    [0;30;107m  Only the fontfiles in these directories will be considered in             [0m
    [0;30;107m  superfamily-level checks.                                                 [0m

    * [0;36;107mINFO[0m: . [code: family-path]


    Result: [0;36;107mINFO[0m

 >> [1;35;107mcom.google.fonts/check/code_pages[0m
    [0;36;107mCheck code page character ranges[0m
    with NotoSansCherokee-Regular.ttf

    [1;35;107m  Rationale:                                                                [0m
    [0;30;107m  At least some programs (such as Word and Sublime Text) under Windows 7 do [0m
    [0;30;107m  not recognize fonts unless code page bits are properly set on the         [0m
    [0;30;107m  ulCodePageRange1 (and/or ulCodePageRange2) fields of the OS/2 table.      [0m
    [0;30;107m                                                                            [0m
    [0;30;107m  More specifically, the fonts are selectable in the font menu, but         [0m
    [0;30;107m  whichever Windows API these applications use considers them unsuitable    [0m
    [0;30;107m  for any character set, so anything set in these fonts is rendered with a  [0m
    [0;30;107m  fallback font of Arial.                                                   [0m
    [0;30;107m                                                                            [0m
    [0;30;107m  This check currently does not identify which code pages should be set.    [0m
    [0;30;107m  Auto-detecting coverage is not trivial since the OpenType specification   [0m
    [0;30;107m  leaves the interpretation of whether a given code page is "functional" or [0m
    [0;30;107m  not open to the font developer to decide.                                 [0m
    [0;30;107m                                                                            [0m
    [0;30;107m  So here we simply detect as a FAIL when a given font has no code page     [0m
    [0;30;107m  declared at all.                                                          [0m

    * [1;91;107mFAIL[0m: No code pages defined in the OS/2 table ulCodePageRange1 and CodePageRange2 fields.


    Result: [1;91;107mFAIL[0m

 >> [1;35;107mcom.google.fonts/check/post_table_version[0m
    [0;36;107mFont has correct post table version?[0m
    with NotoSansCherokee-Regular.ttf

    [1;35;107m  Rationale:                                                                [0m
    [0;30;107m  Apple recommends against using 'post' table format 3 under most           [0m
    [0;30;107m  circumstances, as it can create problems with some printer drivers and    [0m
    [0;30;107m  PDF documents. The savings in disk space usually does not justify the     [0m
    [0;30;107m  potential loss in functionality.                                          [0m
    [0;30;107m  Source: https://developer.apple.com/fonts/TrueType-Reference-Manual/RM06/Chap6post.html[0m
    [0;30;107m                                                                            [0m
    [0;30;107m  The CFF2 table does not contain glyph names, so variable OTFs should be   [0m
    [0;30;107m  allowed to use post table version 2.                                      [0m
    [0;30;107m                                                                            [0m
    [0;30;107m  This check expects:                                                       [0m
    [0;30;107m  - Version 2 for TTF or OTF CFF2 Variable fonts                            [0m
    [0;30;107m  - Version 3 for OTF                                                       [0m

    * [1;91;107mFAIL[0m: Post table should be version 2 instead of 3.0.


    Result: [1;91;107mFAIL[0m

 >> [1;35;107mcom.google.fonts/check/monospace[0m
    [0;36;107mChecking correctness of monospaced metadata.[0m
    with NotoSansCherokee-Regular.ttf

    [1;35;107m  Rationale:                                                                [0m
    [0;30;107m  There are various metadata in the OpenType spec to specify if a font is   [0m
    [0;30;107m  monospaced or not. If the font is not truly monospaced, then no           [0m
    [0;30;107m  monospaced metadata should be set (as sometimes they mistakenly are...)   [0m
    [0;30;107m                                                                            [0m
    [0;30;107m  Requirements for monospace fonts:                                         [0m
    [0;30;107m                                                                            [0m
    [0;30;107m  * post.isFixedPitch - "Set to 0 if the font is proportionally spaced,     [0m
    [0;30;107m  non-zero if the font is not proportionally spaced (monospaced)"           [0m
    [0;30;107m    www.microsoft.com/typography/otspec/post.htm                            [0m
    [0;30;107m                                                                            [0m
    [0;30;107m  * hhea.advanceWidthMax must be correct, meaning no glyph's width value is [0m
    [0;30;107m  greater.                                                                  [0m
    [0;30;107m    www.microsoft.com/typography/otspec/hhea.htm                            [0m
    [0;30;107m                                                                            [0m
    [0;30;107m  * OS/2.panose.bProportion must be set to 9 (monospace). Spec says: "The   [0m
    [0;30;107m  PANOSE definition contains ten digits each of which currently describes   [0m
    [0;30;107m  up to sixteen variations. Windows uses bFamilyType, bSerifStyle and       [0m
    [0;30;107m  bProportion in the font mapper to determine family type. It also uses     [0m
    [0;30;107m  bProportion to determine if the font is monospaced."                      [0m
    [0;30;107m    www.microsoft.com/typography/otspec/os2.htm#pan                         [0m
    [0;30;107m    monotypecom-test.monotype.de/services/pan2                              [0m
    [0;30;107m                                                                            [0m
    [0;30;107m  * OS/2.xAvgCharWidth must be set accurately.                              [0m
    [0;30;107m    "OS/2.xAvgCharWidth is used when rendering monospaced fonts, at least   [0m
    [0;30;107m  by Windows GDI"                                                           [0m
    [0;30;107m    http://typedrawers.com/discussion/comment/15397/#Comment_15397          [0m
    [0;30;107m                                                                            [0m
    [0;30;107m  Also we should report an error for glyphs not of average width.           [0m
    [0;30;107m                                                                            [0m
    [0;30;107m  Please also note:                                                         [0m
    [0;30;107m  Thomas Phinney told us that a few years ago (as of December 2019), if you [0m
    [0;30;107m  gave a font a monospace flag in Panose, Microsoft Word would ignore the   [0m
    [0;30;107m  actual advance widths and treat it as monospaced. Source:                 [0m
    [0;30;107m  https://typedrawers.com/discussion/comment/45140/#Comment_45140           [0m

    * [1;91;107mFAIL[0m: On monospaced fonts, the value of post.isFixedPitch must be set to a non-zero value (meaning 'fixed width monospaced'), but got 0 instead. [code: mono-bad-post-isFixedPitch]
    * [1;91;107mFAIL[0m: On monospaced fonts, the value of OS/2.panose.bProportion must be set to 9 (proportion: monospaced), but got 2 instead. [code: mono-bad-panose-proportion]
    * [1;30;103mWARN[0m: Font is monospaced but 258 glyphs (94.5054945054945%) have a different width. You should check the widths of: ['uni13A0', 'uni13A1', 'uni13A2', 'uni13A3', 'uni13A4', 'uni13A5', 'uni13A6', 'uni13A7', 'uni13A8', 'uni13A9', 'uni13AA', 'uni13AB', 'uni13AC', 'uni13AD', 'uni13AE', 'uni13AF', 'uni13B0', 'uni13B1', 'uni13B2', 'uni13B3', 'uni13B4', 'uni13B5', 'uni13B6', 'uni13B7', 'uni13B8', 'uni13B9', 'uni13BA', 'uni13BB', 'uni13BC', 'uni13BD', 'uni13BE', 'uni13BF', 'uni13C0', 'uni13C1', 'uni13C2', 'uni13C3', 'uni13C4', 'uni13C5', 'uni13C6', 'uni13C7', 'uni13C8', 'uni13C9', 'uni13CA', 'uni13CB', 'uni13CC', 'uni13CD', 'uni13CE', 'uni13CF', 'uni13D0', 'uni13D1', 'uni13D2', 'uni13D3', 'uni13D4', 'uni13D5', 'uni13D6', 'uni13D7', 'uni13D8', 'uni13D9', 'uni13DA', 'uni13DB', 'uni13DC', 'uni13DD', 'uni13DE', 'uni13DF', 'uni13E0', 'uni13E1', 'uni13E2', 'uni13E3', 'uni13E4', 'uni13E5', 'uni13E6', 'uni13E7', 'uni13E8', 'uni13E9', 'uni13EA', 'uni13EB', 'uni13EC', 'uni13ED', 'uni13EE', 'uni13EF', 'uni13F0', 'uni13F1', 'uni13F2', 'uni13F3', 'uni13F4', 'uni13F5', 'uniAB70', 'uniAB71', 'uniAB72', 'uniAB73', 'uniAB74', 'uniAB75', 'uniAB76', 'uniAB77', 'uniAB78', 'uniAB79', 'uniAB7A', 'uniAB7B', 'uniAB7C', 'uniAB7D', 'uniAB7E', 'uniAB7F', 'uniAB80', 'uniAB81', 'uniAB82', 'uniAB83', 'uniAB84', 'uniAB85', 'uniAB86', 'uniAB87', 'uniAB88', 'uniAB89', 'uniAB8A', 'uniAB8B', 'uniAB8C', 'uniAB8D', 'uniAB8E', 'uniAB8F', 'uniAB90', 'uniAB91', 'uniAB92', 'uniAB93', 'uniAB94', 'uniAB95', 'uniAB96', 'uniAB97', 'uniAB98', 'uniAB99', 'uniAB9A', 'uniAB9B', 'uniAB9C', 'uniAB9D', 'uniAB9E', 'uniAB9F', 'uniABA0', 'uniABA1', 'uniABA2', 'uniABA3', 'uniABA4', 'uniABA5', 'uniABA6', 'uniABA7', 'uniABA8', 'uniABA9', 'uniABAA', 'uniABAB', 'uniABAC', 'uniABAD', 'uniABAE', 'uniABAF', 'uniABB0', 'uniABB1', 'uniABB2', 'uniABB3', 'uniABB4', 'uniABB5', 'uniABB6', 'uniABB7', 'uniABB8', 'uniABB9', 'uniABBA', 'uniABBB', 'uniABBC', 'uniABBD', 'uniABBE', 'uniABBF', 'uni13F8', 'uni13F9', 'uni13FA', 'uni13FB', 'uni13FC', 'uni13FD', 'glyph00176', 'glyph00177', 'glyph00178', 'glyph00179', 'glyph00180', 'glyph00181', 'glyph00182', 'glyph00183', 'glyph00184', 'glyph00185', 'glyph00186', 'glyph00187', 'glyph00188', 'glyph00189', 'glyph00190', 'glyph00191', 'glyph00192', 'glyph00193', 'glyph00194', 'glyph00195', 'glyph00196', 'glyph00197', 'glyph00198', 'glyph00199', 'glyph00200', 'glyph00201', 'glyph00202', 'glyph00203', 'glyph00204', 'glyph00205', 'glyph00206', 'glyph00207', 'glyph00208', 'glyph00209', 'glyph00210', 'glyph00211', 'glyph00212', 'glyph00213', 'glyph00214', 'glyph00215', 'glyph00216', 'glyph00217', 'glyph00218', 'glyph00219', 'glyph00220', 'glyph00221', 'glyph00222', 'glyph00223', 'glyph00224', 'glyph00225', 'glyph00226', 'glyph00227', 'glyph00228', 'glyph00229', 'glyph00230', 'glyph00231', 'glyph00232', 'glyph00233', 'glyph00234', 'glyph00235', 'glyph00236', 'glyph00237', 'glyph00238', 'glyph00239', 'glyph00240', 'glyph00241', 'glyph00242', 'glyph00243', 'glyph00244', 'glyph00245', 'glyph00246', 'glyph00247', 'glyph00248', 'glyph00249', 'glyph00250', 'glyph00251', 'glyph00252', 'glyph00253', 'glyph00254', 'glyph00255', 'glyph00256', 'glyph00257', 'glyph00258', 'glyph00259', 'glyph00260', 'glyph00261'] [code: mono-outliers]


    Result: [1;91;107mFAIL[0m

 >> [1;35;107mcom.google.fonts/check/dsig[0m
    [0;36;107mDoes the font have a DSIG table?[0m
    with NotoSansCherokee-Regular.ttf

    [1;35;107m  Rationale:                                                                [0m
    [0;30;107m  Microsoft Office 2013 and below products expect fonts to have a digital   [0m
    [0;30;107m  signature declared in a DSIG table in order to implement OpenType         [0m
    [0;30;107m  features. The EOL date for Microsoft Office 2013 products is 4/11/2023.   [0m
    [0;30;107m  This issue does not impact Microsoft Office 2016 and above products.      [0m
    [0;30;107m                                                                            [0m
    [0;30;107m  This checks verifies that this signature is available in the font.        [0m
    [0;30;107m                                                                            [0m
    [0;30;107m  A fake signature is enough to address this issue. If needed, a dummy      [0m
    [0;30;107m  table can be added to the font with the `gftools fix-dsig` script         [0m
    [0;30;107m  available at https://github.com/googlefonts/gftools                       [0m
    [0;30;107m                                                                            [0m
    [0;30;107m  Reference: https://github.com/googlefonts/fontbakery/issues/1845          [0m

    * [1;91;107mFAIL[0m: This font lacks a digital signature (DSIG table). Some applications may require one (even if only a dummy placeholder) in order to work properly. You can add a DSIG table by running the `gftools fix-dsig` script. [code: lacks-signature]


    Result: [1;91;107mFAIL[0m


Total:

    [1;97;101mERROR[0m: 0
    [1;91;107mFAIL[0m: 4
    [1;30;103mWARN[0m: 0
    [0;36;107mINFO[0m: 2
    [0;34;107mSKIP[0m: 20
    [0;32;107mPASS[0m: 45


DONE!

    [1;30;107mMeaning of check results:[0m

    An [1;97;101mERROR[0m is something wrong with FontBakery itself, possibly a bug.
    A [1;91;107mFAIL[0m is a problem with the font that must be fixed.
    A [1;30;103mWARN[0m is something that you should consider addressing.
    An [0;36;107mINFO[0m result simply prints something useful. Typically stats.
    A [0;32;107mPASS[0m means the font looks good for the given checking routine.
    And a [0;34;107mSKIP[0m happens when the check does not apply to the given font.

    If you get [1;97;101mERROR[0ms, please help us improve the tool by reporting them at
    [1;36;107mhttps://github.com/googlefonts/fontbakery/issues[0m

    (but other kinds of bug reports and/or
     feature requests are also always welcome, of course!)

