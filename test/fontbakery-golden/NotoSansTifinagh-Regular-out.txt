Start ... running 77 individual check executions.
 >> [1;35;107mcom.google.fonts/check/unicode_range_bits[0m
    [0;36;107mEnsure UnicodeRange bits are properly set.[0m
    with NotoSansTifinagh-Regular.ttf

    [1;35;107m  Rationale:                                                                [0m
    [0;30;107m  When the UnicodeRange bits on the OS/2 table are not properly set, some   [0m
    [0;30;107m  programs running on Windows may not recognize the font and use a system   [0m
    [0;30;107m  fallback font instead. For that reason, this check calculates the proper  [0m
    [0;30;107m  settings by inspecting the glyphs declared on the cmap table and then     [0m
    [0;30;107m  ensures that their corresponding ranges are enabled.                      [0m

    * [1;30;103mWARN[0m: UnicodeRange bit 5 "Spacing Modifier Letters" should be 1 because cmap has 1 of the 112 codepoints in this range. [code: bad-range-bit]


    Result: [1;30;103mWARN[0m

 >> [1;35;107mcom.google.fonts/check/name/trailing_spaces[0m
    [0;36;107mName table records must not have trailing spaces.[0m
    with NotoSansTifinagh-Regular.ttf

    * [1;91;107mFAIL[0m: Name table record with key = (3, 1, 1033, 10) has trailing spaces that must be removed: 'Designed b[...]il Patel.
'


    Result: [1;91;107mFAIL[0m

 >> [1;35;107mcom.google.fonts/check/required_tables[0m
    [0;36;107mFont contains all required tables?[0m
    with NotoSansTifinagh-Regular.ttf

    [1;35;107m  Rationale:                                                                [0m
    [0;30;107m  Depending on the typeface and coverage of a font, certain tables are      [0m
    [0;30;107m  recommended for optimum quality. For example, the performance of a        [0m
    [0;30;107m  non-linear font is improved if the VDMX, LTSH, and hdmx tables are        [0m
    [0;30;107m  present. Non-monospaced Latin fonts should have a kern table. A gasp      [0m
    [0;30;107m  table is necessary if a designer wants to influence the sizes at which    [0m
    [0;30;107m  grayscaling is used under Windows. A DSIG table containing a digital      [0m
    [0;30;107m  signature helps ensure the integrity of the font file. Etc.               [0m

    * [0;36;107mINFO[0m: This font contains the following optional tables [loca, GPOS, GSUB]


    Result: [0;36;107mINFO[0m

 >> [1;35;107mcom.google.fonts/check/superfamily/list[0m
    [0;36;107mList all superfamily filepaths[0m
    with NotoSansTifinagh-Regular.ttf

    [1;35;107m  Rationale:                                                                [0m
    [0;30;107m  This is a merely informative check that lists all sibling families        [0m
    [0;30;107m  detected by fontbakery.                                                   [0m
    [0;30;107m                                                                            [0m
    [0;30;107m  Only the fontfiles in these directories will be considered in             [0m
    [0;30;107m  superfamily-level checks.                                                 [0m

    * [0;36;107mINFO[0m: . [code: family-path]


    Result: [0;36;107mINFO[0m

 >> [1;35;107mcom.google.fonts/check/xavgcharwidth[0m
    [0;36;107mCheck if OS/2 xAvgCharWidth is correct.[0m
    with NotoSansTifinagh-Regular.ttf

    * [1;30;103mWARN[0m: OS/2 xAvgCharWidth is 654 but it should be 681 which corresponds to the average of the widths of all glyphs in the font.


    Result: [1;30;103mWARN[0m

 >> [1;35;107mcom.google.fonts/check/monospace[0m
    [0;36;107mChecking correctness of monospaced metadata.[0m
    with NotoSansTifinagh-Regular.ttf

    [1;35;107m  Rationale:                                                                [0m
    [0;30;107m  There are various metadata in the OpenType spec to specify if a font is   [0m
    [0;30;107m  monospaced or not. If the font is not truly monospaced, then no           [0m
    [0;30;107m  monospaced metadata should be set (as sometimes they mistakenly are...)   [0m
    [0;30;107m                                                                            [0m
    [0;30;107m  Requirements for monospace fonts:                                         [0m
    [0;30;107m                                                                            [0m
    [0;30;107m  * post.isFixedPitch - "Set to 0 if the font is proportionally spaced,     [0m
    [0;30;107m  non-zero if the font is not proportionally spaced (monospaced)"           [0m
    [0;30;107m    www.microsoft.com/typography/otspec/post.htm                            [0m
    [0;30;107m                                                                            [0m
    [0;30;107m  * hhea.advanceWidthMax must be correct, meaning no glyph's width value is [0m
    [0;30;107m  greater.                                                                  [0m
    [0;30;107m    www.microsoft.com/typography/otspec/hhea.htm                            [0m
    [0;30;107m                                                                            [0m
    [0;30;107m  * OS/2.panose.bProportion must be set to 9 (monospace). Spec says: "The   [0m
    [0;30;107m  PANOSE definition contains ten digits each of which currently describes   [0m
    [0;30;107m  up to sixteen variations. Windows uses bFamilyType, bSerifStyle and       [0m
    [0;30;107m  bProportion in the font mapper to determine family type. It also uses     [0m
    [0;30;107m  bProportion to determine if the font is monospaced."                      [0m
    [0;30;107m    www.microsoft.com/typography/otspec/os2.htm#pan                         [0m
    [0;30;107m    monotypecom-test.monotype.de/services/pan2                              [0m
    [0;30;107m                                                                            [0m
    [0;30;107m  * OS/2.xAvgCharWidth must be set accurately.                              [0m
    [0;30;107m    "OS/2.xAvgCharWidth is used when rendering monospaced fonts, at least   [0m
    [0;30;107m  by Windows GDI"                                                           [0m
    [0;30;107m    http://typedrawers.com/discussion/comment/15397/#Comment_15397          [0m
    [0;30;107m                                                                            [0m
    [0;30;107m  Also we should report an error for glyphs not of average width.           [0m
    [0;30;107m                                                                            [0m
    [0;30;107m  Please also note:                                                         [0m
    [0;30;107m  Thomas Phinney told us that a few years ago (as of December 2019), if you [0m
    [0;30;107m  gave a font a monospace flag in Panose, Microsoft Word would ignore the   [0m
    [0;30;107m  actual advance widths and treat it as monospaced. Source:                 [0m
    [0;30;107m  https://typedrawers.com/discussion/comment/45140/#Comment_45140           [0m

    * [1;91;107mFAIL[0m: On monospaced fonts, the value of post.isFixedPitch must be set to a non-zero value (meaning 'fixed width monospaced'), but got 0 instead. [code: mono-bad-post-isFixedPitch]
    * [1;91;107mFAIL[0m: On monospaced fonts, the value of OS/2.panose.bProportion must be set to 9 (proportion: monospaced), but got 0 instead. [code: mono-bad-panose-proportion]
    * [1;30;103mWARN[0m: Font is monospaced but 141 glyphs (85.98%) have a different width. You should check the widths of: ['yab_yattifi', 'yag_yattifi', 'yaf_yattifi', 'yah_yattifi', 'yazhTuareg_yattifi', 'yal_yaltifi', 'yal_yantifi', 'yal_yattifi', 'yam_yahtifi', 'yam_yastifi', 'yam_yattifi', 'yan_yabtifi', 'yan_yagtifi', 'yan_yajtifi', 'yan_yadtifi', 'yan_yadhtifi', 'yan_yaddtifi', 'yan_yaftifi', 'yan_yakTuaregtifi', 'yan_yahtifi', 'yan_yazhTuaregtifi', 'yan_yaltifi', 'yan_yantifi', 'yan_yaghTuaregtifi', 'yan_yattifi', 'yan_yachtifi', 'yan_yaztifi', 'yu_yattifi', 'yar_yabtifi', 'yar_yajtifi', 'yar_yadtifi', 'yar_yantifi', 'yar_yastifi', 'yar_yattifi', 'yagh_yattifi', 'yas_yattifi', 'yash_yattifi', 'yat_yastifi', 'yaw_yattifi', 'yay_yattifi', 'yazz_yattifi', 'yab_yattifi.RTL', 'yag_yattifi.RTL', 'yah_yattifi.RTL', 'yam_yahtifi.RTL', 'yam_yastifi.RTL', 'yam_yattifi.RTL', 'yan_yabtifi.RTL', 'yan_yajtifi.RTL', 'yan_yaddtifi.RTL', 'yan_yahtifi.RTL', 'yan_yaghTuaregtifi.RTL', 'yu_yattifi.RTL', 'yar_yadtifi.RTL', 'yar_yantifi.RTL', 'yar_yattifi.RTL', 'yas_yattifi.RTL', 'yash_yattifi.RTL', 'yat_yastifi.RTL', 'yaw_yattifi.RTL', 'yay_yattifi.RTL', 'uni2D30', 'uni2D33', 'uni2D34', 'uni2D35', 'uni2D36', 'uni2D37', 'uni2D38', 'uni2D39', 'uni2D3A', 'uni2D3B', 'uni2D3C', 'uni2D3D', 'uni2D3E', 'uni2D3F', 'uni2D41', 'uni2D42', 'uni2D43', 'uni2D44', 'uni2D45', 'uni2D46', 'uni2D47', 'uni2D48', 'uni2D49', 'uni2D4A', 'uni2D4B', 'uni2D4C', 'uni2D4D', 'uni2D4E', 'uni2D4F', 'uni2D50', 'uni2D51', 'uni2D52', 'uni2D53', 'uni2D55', 'uni2D56', 'uni2D57', 'uni2D58', 'uni2D5A', 'uni2D5B', 'uni2D5C', 'uni2D5D', 'uni2D5E', 'uni2D5F', 'uni2D60', 'uni2D61', 'uni2D62', 'uni2D63', 'yazTawellemmettifi', 'uni2D65', 'uni2D66', 'uni2D67', 'uni2D6F', 'uni2D39.RTL', 'uni2D3A.RTL', 'uni2D3D.RTL', 'uni2D3E.RTL', 'uni2D3F.RTL', 'uni2D41.RTL', 'uni2D43.RTL', 'uni2D47.RTL', 'uni2D49.RTL', 'uni2D4D.RTL', 'uni2D4E.RTL', 'uni2D52.RTL', 'uni2D55.RTL', 'uni2D5A.RTL', 'uni2D5B.RTL', 'uni2D5E.RTL', 'uni2D5F.RTL', 'uni2D62.RTL', 'uni2D66.RTL', 'uni2D70', 'uni2D70.RTL', 'space', 'uni00A0', 'CR', 'uni202E', 'uni25CC', 'caron', 'yazTawellemmettifi.RTL'] [code: mono-outliers]


    Result: [1;91;107mFAIL[0m

 >> [1;35;107mcom.google.fonts/check/dsig[0m
    [0;36;107mDoes the font have a DSIG table?[0m
    with NotoSansTifinagh-Regular.ttf

    [1;35;107m  Rationale:                                                                [0m
    [0;30;107m  Microsoft Office 2013 and below products expect fonts to have a digital   [0m
    [0;30;107m  signature declared in a DSIG table in order to implement OpenType         [0m
    [0;30;107m  features. The EOL date for Microsoft Office 2013 products is 4/11/2023.   [0m
    [0;30;107m  This issue does not impact Microsoft Office 2016 and above products.      [0m
    [0;30;107m                                                                            [0m
    [0;30;107m  This checks verifies that this signature is available in the font.        [0m
    [0;30;107m                                                                            [0m
    [0;30;107m  A fake signature is enough to address this issue. If needed, a dummy      [0m
    [0;30;107m  table can be added to the font with the `gftools fix-dsig` script         [0m
    [0;30;107m  available at https://github.com/googlefonts/gftools                       [0m
    [0;30;107m                                                                            [0m
    [0;30;107m  Reference: https://github.com/googlefonts/fontbakery/issues/1845          [0m

    * [1;91;107mFAIL[0m: This font lacks a digital signature (DSIG table). Some applications may require one (even if only a dummy placeholder) in order to work properly. You can add a DSIG table by running the `gftools fix-dsig` script. [code: lacks-signature]


    Result: [1;91;107mFAIL[0m

 >> [1;35;107mcom.google.fonts/check/glyf_nested_components[0m
    [0;36;107mCheck glyphs do not have components which are themselves components.[0m
    with NotoSansTifinagh-Regular.ttf

    [1;35;107m  Rationale:                                                                [0m
    [0;30;107m  There have been bugs rendering variable fonts with nested components.     [0m
    [0;30;107m  Additionally, some static fonts with nested components have been reported [0m
    [0;30;107m  to have rendering and printing issues.                                    [0m
    [0;30;107m                                                                            [0m
    [0;30;107m  For more info, see:                                                       [0m
    [0;30;107m  * https://github.com/googlefonts/fontbakery/issues/2961                   [0m
    [0;30;107m  * https://github.com/arrowtype/recursive/issues/412                       [0m

    * [1;91;107mFAIL[0m: The following glyphs have components which themselves are component glyphs:
	* uni2D5A.RTL [code: found-nested-components]


    Result: [1;91;107mFAIL[0m

 >> [1;35;107mcom.google.fonts/check/outline_alignment_miss[0m
    [0;36;107mAre there any misaligned on-curve points?[0m
    with NotoSansTifinagh-Regular.ttf

    [1;35;107m  Rationale:                                                                [0m
    [0;30;107m  This test heuristically looks for on-curve points which are close to, but [0m
    [0;30;107m  do not sit on, significant boundary coordinates. For example, a point     [0m
    [0;30;107m  which has a Y-coordinate of 1 or -1 might be a misplaced baseline point.  [0m
    [0;30;107m  As well as the baseline, the test also checks for points near the         [0m
    [0;30;107m  x-height (but only for lower case Latin letters), cap-height, ascender    [0m
    [0;30;107m  and descender Y coordinates.                                              [0m
    [0;30;107m                                                                            [0m
    [0;30;107m  Not all such misaligned curve points are a mistake, and sometimes the     [0m
    [0;30;107m  design may call for points in locations near the boundaries. As this test [0m
    [0;30;107m  is liable to generate significant numbers of false positives, the test    [0m
    [0;30;107m  will pass if there are more than 100 reported misalignments.              [0m

    * [1;30;103mWARN[0m: The following glyphs have on-curve points which have potentially incorrect y coordinates:
	* uni2D42: X=106.0,Y=714.5 (should be at cap-height 714?) and uni2D42: X=201.5,Y=-0.5 (should be at baseline 0?) [code: found-misalignments]


    Result: [1;30;103mWARN[0m

 >> [1;35;107mcom.google.fonts/check/outline_short_segments[0m
    [0;36;107mAre any segments inordinately short?[0m
    with NotoSansTifinagh-Regular.ttf

    [1;35;107m  Rationale:                                                                [0m
    [0;30;107m  This test looks for outline segments which seem particularly short (less  [0m
    [0;30;107m  than 0.006%% of the overall path length).                                 [0m
    [0;30;107m                                                                            [0m
    [0;30;107m  This test is not run for variable fonts, as they may legitimately have    [0m
    [0;30;107m  short segments. As this test is liable to generate significant numbers of [0m
    [0;30;107m  false positives, the test will pass if there are more than 100 reported   [0m
    [0;30;107m  short segments.                                                           [0m

    * [1;30;103mWARN[0m: The following glyphs have segments which seem very short:
	* yan_yagtifi contains a short segment L<<28.0,706.0>--<28.0,714.0>>
	* yan_yagtifi contains a short segment L<<643.0,714.0>--<643.0,706.0>>
	* yan_yadhtifi contains a short segment L<<40.0,706.0>--<40.0,714.0>>
	* yan_yadhtifi contains a short segment L<<649.0,714.0>--<649.0,706.0>>
	* yan_yaztifi contains a short segment L<<0.0,0.0>--<0.0,8.0>>
	* yan_yaztifi contains a short segment L<<663.0,13.0>--<663.0,0.0>>
	* yash_yattifi contains a short segment B<<428.0,641.0>-<417.0,643.0>-<407.5,643.0>>
	* yash_yattifi contains a short segment B<<407.5,643.0>-<398.0,643.0>-<393.0,643.0>>
	* yash_yattifi contains a short segment B<<393.0,72.0>-<398.0,72.0>-<407.5,72.5>>
	* yash_yattifi contains a short segment B<<407.5,72.5>-<417.0,73.0>-<428.0,74.0>> and 46 more. [code: found-short-segments]


    Result: [1;30;103mWARN[0m

 >> [1;35;107mcom.google.fonts/check/outline_colinear_vectors[0m
    [0;36;107mDo any segments have colinear vectors?[0m
    with NotoSansTifinagh-Regular.ttf

    [1;35;107m  Rationale:                                                                [0m
    [0;30;107m  This test looks for consecutive line segments which have the same angle.  [0m
    [0;30;107m  This normally happens if an outline point has been added by accident.     [0m
    [0;30;107m                                                                            [0m
    [0;30;107m  This test is not run for variable fonts, as they may legitimately have    [0m
    [0;30;107m  colinear vectors.                                                         [0m

    * [1;30;103mWARN[0m: The following glyphs have colinear vectors:
	* caron: L<<114.0,714.0>--<114.0,694.0>> -> L<<114.0,694.0>--<97.0,484.0>> and caron: L<<28.0,484.0>--<20.0,694.0>> -> L<<20.0,694.0>--<20.0,714.0>> [code: found-colinear-vectors]


    Result: [1;30;103mWARN[0m


Total:

    [1;97;101mERROR[0m: 0
    [1;91;107mFAIL[0m: 4
    [1;30;103mWARN[0m: 5
    [0;36;107mINFO[0m: 2
    [0;34;107mSKIP[0m: 17
    [0;32;107mPASS[0m: 49


DONE!

    [1;30;107mMeaning of check results:[0m

    An [1;97;101mERROR[0m is something wrong with FontBakery itself, possibly a bug.
    A [1;91;107mFAIL[0m is a problem with the font that must be fixed.
    A [1;30;103mWARN[0m is something that you should consider addressing.
    An [0;36;107mINFO[0m result simply prints something useful. Typically stats.
    A [0;32;107mPASS[0m means the font looks good for the given checking routine.
    And a [0;34;107mSKIP[0m happens when the check does not apply to the given font.

    If you get [1;97;101mERROR[0ms, please help us improve the tool by reporting them at
    [1;36;107mhttps://github.com/googlefonts/fontbakery/issues[0m

    (but other kinds of bug reports and/or
     feature requests are also always welcome, of course!)

