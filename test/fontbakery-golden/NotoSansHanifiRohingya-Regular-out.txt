Start ... running 77 individual check executions.
 >> [1;35;107mcom.google.fonts/check/unicode_range_bits[0m
    [0;36;107mEnsure UnicodeRange bits are properly set.[0m
    with NotoSansHanifiRohingya-Regular.ttf

    [1;35;107m  Rationale:                                                                [0m
    [0;30;107m  When the UnicodeRange bits on the OS/2 table are not properly set, some   [0m
    [0;30;107m  programs running on Windows may not recognize the font and use a system   [0m
    [0;30;107m  fallback font instead. For that reason, this check calculates the proper  [0m
    [0;30;107m  settings by inspecting the glyphs declared on the cmap table and then     [0m
    [0;30;107m  ensures that their corresponding ranges are enabled.                      [0m

    * [1;30;103mWARN[0m: UnicodeRange bit 57 "Non-Plane 0 *" should be 0 because cmap has none of the 2048 codepoints in this range. [code: bad-range-bit]


    Result: [1;30;103mWARN[0m

 >> [1;35;107mcom.google.fonts/check/family/win_ascent_and_descent[0m
    [0;36;107mChecking OS/2 usWinAscent & usWinDescent.[0m
    with NotoSansHanifiRohingya-Regular.ttf

    [1;35;107m  Rationale:                                                                [0m
    [0;30;107m  A font's winAscent and winDescent values should be greater than the head  [0m
    [0;30;107m  table's yMax, abs(yMin) values. If they are less than these values,       [0m
    [0;30;107m  clipping can occur on Windows platforms                                   [0m
    [0;30;107m  (https://github.com/RedHatBrand/Overpass/issues/33).                      [0m
    [0;30;107m                                                                            [0m
    [0;30;107m  If the font includes tall/deep writing systems such as Arabic or          [0m
    [0;30;107m  Devanagari, the winAscent and winDescent can be greater than the yMax and [0m
    [0;30;107m  abs(yMin) to accommodate vowel marks.                                     [0m
    [0;30;107m                                                                            [0m
    [0;30;107m  When the win Metrics are significantly greater than the upm, the          [0m
    [0;30;107m  linespacing can appear too loose. To counteract this, enabling the OS/2   [0m
    [0;30;107m  fsSelection bit 7 (Use_Typo_Metrics), will force Windows to use the OS/2  [0m
    [0;30;107m  typo values instead. This means the font developer can control the        [0m
    [0;30;107m  linespacing with the typo values, whilst avoiding clipping by setting the [0m
    [0;30;107m  win values to values greater than the yMax and abs(yMin).                 [0m

    * [1;91;107mFAIL[0m: OS/2.usWinAscent value should be equal or greater than 1089, but got 1069 instead [code: ascent]


    Result: [1;91;107mFAIL[0m

 >> [1;35;107mcom.google.fonts/check/whitespace_glyphnames[0m
    [0;36;107mFont has **proper** whitespace glyph names?[0m
    with NotoSansHanifiRohingya-Regular.ttf

    [1;35;107m  Rationale:                                                                [0m
    [0;30;107m  This check enforces adherence to recommended whitespace (codepoints 0020  [0m
    [0;30;107m  and 00A0) glyph names according to the Adobe Glyph List.                  [0m

    * [1;30;103mWARN[0m: Glyph 0x00A0 is called "nbspace": Change to "uni00A0" [code: not-recommended-00a0]


    Result: [1;30;103mWARN[0m

 >> [1;35;107mcom.google.fonts/check/required_tables[0m
    [0;36;107mFont contains all required tables?[0m
    with NotoSansHanifiRohingya-Regular.ttf

    [1;35;107m  Rationale:                                                                [0m
    [0;30;107m  Depending on the typeface and coverage of a font, certain tables are      [0m
    [0;30;107m  recommended for optimum quality. For example, the performance of a        [0m
    [0;30;107m  non-linear font is improved if the VDMX, LTSH, and hdmx tables are        [0m
    [0;30;107m  present. Non-monospaced Latin fonts should have a kern table. A gasp      [0m
    [0;30;107m  table is necessary if a designer wants to influence the sizes at which    [0m
    [0;30;107m  grayscaling is used under Windows. A DSIG table containing a digital      [0m
    [0;30;107m  signature helps ensure the integrity of the font file. Etc.               [0m

    * [0;36;107mINFO[0m: This font contains the following optional tables [loca, GPOS, GSUB]


    Result: [0;36;107mINFO[0m

 >> [1;35;107mcom.google.fonts/check/valid_glyphnames[0m
    [0;36;107mGlyph names are all valid?[0m
    with NotoSansHanifiRohingya-Regular.ttf

    [1;35;107m  Rationale:                                                                [0m
    [0;30;107m  Microsoft's recommendations for OpenType Fonts states the following:      [0m
    [0;30;107m                                                                            [0m
    [0;30;107m  'NOTE: The PostScript glyph name must be no longer than 31 characters,    [0m
    [0;30;107m  include only uppercase or lowercase English letters, European digits, the [0m
    [0;30;107m  period or the underscore, i.e. from the set [A-Za-z0-9_.] and should      [0m
    [0;30;107m  start with a letter, except the special glyph name ".notdef" which starts [0m
    [0;30;107m  with a period.'                                                           [0m
    [0;30;107m                                                                            [0m
    [0;30;107m  https://docs.microsoft.com/en-us/typography/opentype/spec/recom#post-table[0m
    [0;30;107m                                                                            [0m
    [0;30;107m                                                                            [0m
    [0;30;107m  In practice, though, particularly in modern environments, glyph names can [0m
    [0;30;107m  be as long as 63 characters.                                              [0m
    [0;30;107m  According to the "Adobe Glyph List Specification" available at:           [0m
    [0;30;107m                                                                            [0m
    [0;30;107m  https://github.com/adobe-type-tools/agl-specification                     [0m

    * [1;91;107mFAIL[0m: The following glyph names do not comply with naming conventions: comma-ar, semicolon-ar, question-ar, fullstop-fa.urdu, kashida-ar, xx.tripledot-rohg, xx.singledot-rohg, xx.ivowelmark-rohg, xx.evowelmark-rohg, xx.connectionlong-rohg and 159 more.

 A glyph name must be entirely comprised of characters from the following set: A-Z a-z 0-9 .(period) _(underscore). A glyph name must not start with a digit or period. There are a few exceptions such as the special glyph ".notdef". The glyph names "twocents", "a1", and "_" are all valid, while "2cents" and ".twocents" are not. [code: found-invalid-names]


    Result: [1;91;107mFAIL[0m

 >> [1;35;107mcom.google.fonts/check/superfamily/list[0m
    [0;36;107mList all superfamily filepaths[0m
    with NotoSansHanifiRohingya-Regular.ttf

    [1;35;107m  Rationale:                                                                [0m
    [0;30;107m  This is a merely informative check that lists all sibling families        [0m
    [0;30;107m  detected by fontbakery.                                                   [0m
    [0;30;107m                                                                            [0m
    [0;30;107m  Only the fontfiles in these directories will be considered in             [0m
    [0;30;107m  superfamily-level checks.                                                 [0m

    * [0;36;107mINFO[0m: . [code: family-path]


    Result: [0;36;107mINFO[0m

 >> [1;35;107mcom.google.fonts/check/monospace[0m
    [0;36;107mChecking correctness of monospaced metadata.[0m
    with NotoSansHanifiRohingya-Regular.ttf

    [1;35;107m  Rationale:                                                                [0m
    [0;30;107m  There are various metadata in the OpenType spec to specify if a font is   [0m
    [0;30;107m  monospaced or not. If the font is not truly monospaced, then no           [0m
    [0;30;107m  monospaced metadata should be set (as sometimes they mistakenly are...)   [0m
    [0;30;107m                                                                            [0m
    [0;30;107m  Requirements for monospace fonts:                                         [0m
    [0;30;107m                                                                            [0m
    [0;30;107m  * post.isFixedPitch - "Set to 0 if the font is proportionally spaced,     [0m
    [0;30;107m  non-zero if the font is not proportionally spaced (monospaced)"           [0m
    [0;30;107m    www.microsoft.com/typography/otspec/post.htm                            [0m
    [0;30;107m                                                                            [0m
    [0;30;107m  * hhea.advanceWidthMax must be correct, meaning no glyph's width value is [0m
    [0;30;107m  greater.                                                                  [0m
    [0;30;107m    www.microsoft.com/typography/otspec/hhea.htm                            [0m
    [0;30;107m                                                                            [0m
    [0;30;107m  * OS/2.panose.bProportion must be set to 9 (monospace). Spec says: "The   [0m
    [0;30;107m  PANOSE definition contains ten digits each of which currently describes   [0m
    [0;30;107m  up to sixteen variations. Windows uses bFamilyType, bSerifStyle and       [0m
    [0;30;107m  bProportion in the font mapper to determine family type. It also uses     [0m
    [0;30;107m  bProportion to determine if the font is monospaced."                      [0m
    [0;30;107m    www.microsoft.com/typography/otspec/os2.htm#pan                         [0m
    [0;30;107m    monotypecom-test.monotype.de/services/pan2                              [0m
    [0;30;107m                                                                            [0m
    [0;30;107m  * OS/2.xAvgCharWidth must be set accurately.                              [0m
    [0;30;107m    "OS/2.xAvgCharWidth is used when rendering monospaced fonts, at least   [0m
    [0;30;107m  by Windows GDI"                                                           [0m
    [0;30;107m    http://typedrawers.com/discussion/comment/15397/#Comment_15397          [0m
    [0;30;107m                                                                            [0m
    [0;30;107m  Also we should report an error for glyphs not of average width.           [0m
    [0;30;107m                                                                            [0m
    [0;30;107m  Please also note:                                                         [0m
    [0;30;107m  Thomas Phinney told us that a few years ago (as of December 2019), if you [0m
    [0;30;107m  gave a font a monospace flag in Panose, Microsoft Word would ignore the   [0m
    [0;30;107m  actual advance widths and treat it as monospaced. Source:                 [0m
    [0;30;107m  https://typedrawers.com/discussion/comment/45140/#Comment_45140           [0m

    * [1;91;107mFAIL[0m: On monospaced fonts, the value of post.isFixedPitch must be set to a non-zero value (meaning 'fixed width monospaced'), but got 0 instead. [code: mono-bad-post-isFixedPitch]
    * [1;91;107mFAIL[0m: On monospaced fonts, the value of OS/2.panose.bProportion must be set to 9 (proportion: monospaced), but got 0 instead. [code: mono-bad-panose-proportion]
    * [1;30;103mWARN[0m: Font is monospaced but 165 glyphs (92.18%) have a different width. You should check the widths of: ['CR', 'space', 'nbspace', 'BASE', 'comma-ar', 'semicolon-ar', 'question-ar', 'fullstop-fa.urdu', 'kashida-ar', 'guillemotleft', 'guillemotright', 'xx.tripledot-rohg', 'xx.singledot-rohg', 'xx.ivowelmark-rohg', 'xx.evowelmark-rohg', 'xx.connectionlong-rohg', 'xx.connection-rohg', 'tta-rohg.fina', 'tta-rohg.medi', 'tta-rohg.init', 'tta-rohg', 'ta-rohg.fina', 'ta-rohg.medi', 'ta-rohg.init', 'ta-rohg', 'pa-rohg.fina', 'pa-rohg.medi', 'pa-rohg.init', 'pa-rohg', 'ba-rohg.fina', 'ba-rohg.medi', 'ba-rohg.init', 'ba-rohg', 'a-rohg.fina', 'a-rohg.medi', 'a-rohg.init', 'a-rohg', 'fa-rohg.fina', 'fa-rohg.medi', 'fa-rohg.init', 'fa-rohg', 'kha-rohg.fina', 'kha-rohg.medi', 'kha-rohg.init', 'kha-rohg', 'ha-rohg.fina', 'ha-rohg.medi', 'ha-rohg.init', 'ha-rohg', 'ca-rohg.fina', 'ca-rohg.medi', 'ca-rohg.init', 'ca-rohg', 'ja-rohg.fina', 'ja-rohg.medi', 'ja-rohg.init', 'ja-rohg', 'za-rohg.fina', 'za-rohg.medi', 'za-rohg.init', 'za-rohg', 'rra-rohg.fina', 'rra-rohg.medi', 'rra-rohg.init', 'rra-rohg', 'ra-rohg.fina', 'ra-rohg.medi', 'ra-rohg.init', 'ra-rohg', 'dda-rohg.fina', 'dda-rohg.medi', 'dda-rohg.init', 'dda-rohg', 'da-rohg.fina', 'da-rohg.medi', 'da-rohg.init', 'da-rohg', 'la-rohg.fina', 'la-rohg.medi', 'la-rohg.init', 'la-rohg', 'ga-rohg.fina', 'ga-rohg.medi', 'ga-rohg.init', 'ga-rohg', 'ka-rohg.fina', 'ka-rohg.medi', 'ka-rohg.init', 'ka-rohg', 'sha-rohg.fina', 'sha-rohg.medi', 'sha-rohg.init', 'sha-rohg', 'sa-rohg.fina', 'sa-rohg.medi', 'sa-rohg.init', 'sa-rohg', 'ya-rohg.fina', 'ya-rohg.medi', 'ya-rohg.init', 'ya-rohg', 'kinnawa-rohg.fina', 'kinnawa-rohg.medi', 'kinnawa-rohg.init', 'kinnawa-rohg', 'wa-rohg.fina', 'wa-rohg.medi', 'wa-rohg.init', 'wa-rohg', 'na-rohg.fina', 'na-rohg.medi', 'na-rohg.init', 'na-rohg', 'ma-rohg.fina', 'ma-rohg.medi', 'ma-rohg.init', 'ma-rohg', 'va-rohg.fina', 'va-rohg.medi', 'va-rohg.init', 'va-rohg', 'nya-rohg.fina', 'nya-rohg.medi', 'nya-rohg.init', 'nya-rohg', 'nga-rohg.fina', 'nga-rohg.medi', 'nga-rohg.init', 'nga-rohg', 'kinnaya-rohg.medi', 'kinnaya-rohg.init', 'kinnaya-rohg', 'ovowel-rohg.fina', 'ovowel-rohg.medi', 'ovowel-rohg.init', 'ovowel-rohg', 'evowel-rohg.medi', 'evowel-rohg.init', 'evowel-rohg', 'uvowel-rohg.fina', 'uvowel-rohg.medi', 'uvowel-rohg.init', 'uvowel-rohg', 'ivowel-rohg.medi', 'ivowel-rohg.init', 'ivowel-rohg', 'avowel-rohg.fina', 'avowel-rohg.medi', 'avowel-rohg.init', 'avowel-rohg', 'nakhonna-rohg.medi', 'nakhonna-rohg.init', 'nakhonna-rohg', 'sakin-rohg', 'zero-ar', 'zero-rohg', 'one-rohg', 'two-rohg', 'three-rohg', 'four-rohg', 'five-rohg', 'six-rohg', 'seven-rohg', 'eight-rohg', 'nine-rohg'] [code: mono-outliers]


    Result: [1;91;107mFAIL[0m

 >> [1;35;107mcom.google.fonts/check/dsig[0m
    [0;36;107mDoes the font have a DSIG table?[0m
    with NotoSansHanifiRohingya-Regular.ttf

    [1;35;107m  Rationale:                                                                [0m
    [0;30;107m  Microsoft Office 2013 and below products expect fonts to have a digital   [0m
    [0;30;107m  signature declared in a DSIG table in order to implement OpenType         [0m
    [0;30;107m  features. The EOL date for Microsoft Office 2013 products is 4/11/2023.   [0m
    [0;30;107m  This issue does not impact Microsoft Office 2016 and above products.      [0m
    [0;30;107m                                                                            [0m
    [0;30;107m  This checks verifies that this signature is available in the font.        [0m
    [0;30;107m                                                                            [0m
    [0;30;107m  A fake signature is enough to address this issue. If needed, a dummy      [0m
    [0;30;107m  table can be added to the font with the `gftools fix-dsig` script         [0m
    [0;30;107m  available at https://github.com/googlefonts/gftools                       [0m
    [0;30;107m                                                                            [0m
    [0;30;107m  Reference: https://github.com/googlefonts/fontbakery/issues/1845          [0m

    * [1;91;107mFAIL[0m: This font lacks a digital signature (DSIG table). Some applications may require one (even if only a dummy placeholder) in order to work properly. You can add a DSIG table by running the `gftools fix-dsig` script. [code: lacks-signature]


    Result: [1;91;107mFAIL[0m

 >> [1;35;107mcom.google.fonts/check/outline_alignment_miss[0m
    [0;36;107mAre there any misaligned on-curve points?[0m
    with NotoSansHanifiRohingya-Regular.ttf

    [1;35;107m  Rationale:                                                                [0m
    [0;30;107m  This test heuristically looks for on-curve points which are close to, but [0m
    [0;30;107m  do not sit on, significant boundary coordinates. For example, a point     [0m
    [0;30;107m  which has a Y-coordinate of 1 or -1 might be a misplaced baseline point.  [0m
    [0;30;107m  As well as the baseline, the test also checks for points near the         [0m
    [0;30;107m  x-height (but only for lower case Latin letters), cap-height, ascender    [0m
    [0;30;107m  and descender Y coordinates.                                              [0m
    [0;30;107m                                                                            [0m
    [0;30;107m  Not all such misaligned curve points are a mistake, and sometimes the     [0m
    [0;30;107m  design may call for points in locations near the boundaries. As this test [0m
    [0;30;107m  is liable to generate significant numbers of false positives, the test    [0m
    [0;30;107m  will pass if there are more than 100 reported misalignments.              [0m

    * [1;30;103mWARN[0m: The following glyphs have on-curve points which have potentially incorrect y coordinates:
	* question-ar: X=251.0,Y=2.0 (should be at baseline 0?)
	* question-ar: X=338.5,Y=2.0 (should be at baseline 0?)
	* fa-rohg.fina: X=236.0,Y=716.0 (should be at cap-height 714?)
	* fa-rohg.medi: X=191.0,Y=716.0 (should be at cap-height 714?)
	* fa-rohg.init: X=191.0,Y=716.0 (should be at cap-height 714?)
	* fa-rohg: X=236.0,Y=716.0 (should be at cap-height 714?)
	* kha-rohg.fina: X=443.0,Y=716.0 (should be at cap-height 714?)
	* kha-rohg.medi: X=398.0,Y=716.0 (should be at cap-height 714?)
	* kha-rohg.init: X=398.0,Y=716.0 (should be at cap-height 714?) and kha-rohg: X=443.0,Y=716.0 (should be at cap-height 714?) [code: found-misalignments]


    Result: [1;30;103mWARN[0m

 >> [1;35;107mcom.google.fonts/check/outline_short_segments[0m
    [0;36;107mAre any segments inordinately short?[0m
    with NotoSansHanifiRohingya-Regular.ttf

    [1;35;107m  Rationale:                                                                [0m
    [0;30;107m  This test looks for outline segments which seem particularly short (less  [0m
    [0;30;107m  than 0.006%% of the overall path length).                                 [0m
    [0;30;107m                                                                            [0m
    [0;30;107m  This test is not run for variable fonts, as they may legitimately have    [0m
    [0;30;107m  short segments. As this test is liable to generate significant numbers of [0m
    [0;30;107m  false positives, the test will pass if there are more than 100 reported   [0m
    [0;30;107m  short segments.                                                           [0m

    * [1;30;103mWARN[0m: The following glyphs have segments which seem very short:
	* sha-rohg.fina contains a short segment L<<314.0,209.0>--<314.0,193.0>>
	* sha-rohg.medi contains a short segment L<<269.0,209.0>--<269.0,193.0>>
	* sha-rohg.init contains a short segment L<<269.0,209.0>--<269.0,193.0>>
	* sha-rohg contains a short segment L<<314.0,209.0>--<314.0,193.0>>
	* three-rohg contains a short segment L<<233.0,636.0>--<233.0,632.0>> and eight-rohg contains a short segment L<<185.0,466.0>--<190.0,466.0>> [code: found-short-segments]


    Result: [1;30;103mWARN[0m

 >> [1;35;107mcom.google.fonts/check/outline_colinear_vectors[0m
    [0;36;107mDo any segments have colinear vectors?[0m
    with NotoSansHanifiRohingya-Regular.ttf

    [1;35;107m  Rationale:                                                                [0m
    [0;30;107m  This test looks for consecutive line segments which have the same angle.  [0m
    [0;30;107m  This normally happens if an outline point has been added by accident.     [0m
    [0;30;107m                                                                            [0m
    [0;30;107m  This test is not run for variable fonts, as they may legitimately have    [0m
    [0;30;107m  colinear vectors.                                                         [0m

    * [1;30;103mWARN[0m: The following glyphs have colinear vectors:
	* kha-rohg.fina: L<<493.0,651.0>--<370.0,555.0>> -> L<<370.0,555.0>--<257.0,469.0>>
	* kha-rohg.init: L<<448.0,651.0>--<325.0,555.0>> -> L<<325.0,555.0>--<212.0,469.0>>
	* kha-rohg.medi: L<<448.0,651.0>--<325.0,555.0>> -> L<<325.0,555.0>--<212.0,469.0>> and kha-rohg: L<<493.0,651.0>--<370.0,555.0>> -> L<<370.0,555.0>--<257.0,469.0>> [code: found-colinear-vectors]


    Result: [1;30;103mWARN[0m


Total:

    [1;97;101mERROR[0m: 0
    [1;91;107mFAIL[0m: 4
    [1;30;103mWARN[0m: 5
    [0;36;107mINFO[0m: 2
    [0;34;107mSKIP[0m: 17
    [0;32;107mPASS[0m: 49


DONE!

    [1;30;107mMeaning of check results:[0m

    An [1;97;101mERROR[0m is something wrong with FontBakery itself, possibly a bug.
    A [1;91;107mFAIL[0m is a problem with the font that must be fixed.
    A [1;30;103mWARN[0m is something that you should consider addressing.
    An [0;36;107mINFO[0m result simply prints something useful. Typically stats.
    A [0;32;107mPASS[0m means the font looks good for the given checking routine.
    And a [0;34;107mSKIP[0m happens when the check does not apply to the given font.

    If you get [1;97;101mERROR[0ms, please help us improve the tool by reporting them at
    [1;36;107mhttps://github.com/googlefonts/fontbakery/issues[0m

    (but other kinds of bug reports and/or
     feature requests are also always welcome, of course!)

