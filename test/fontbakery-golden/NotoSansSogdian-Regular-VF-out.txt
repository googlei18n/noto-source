Start ... running 71 individual check executions.
 >> [1;35;107mcom.google.fonts/check/unicode_range_bits[0m
    [0;36;107mEnsure UnicodeRange bits are properly set.[0m
    with NotoSansSogdian-Regular-VF.ttf

    [1;35;107m  Rationale:                                                                [0m
    [0;30;107m  When the UnicodeRange bits on the OS/2 table are not properly set, some   [0m
    [0;30;107m  programs running on Windows may not recognize the font and use a system   [0m
    [0;30;107m  fallback font instead. For that reason, this check calculates the proper  [0m
    [0;30;107m  settings by inspecting the glyphs declared on the cmap table and then     [0m
    [0;30;107m  ensures that their corresponding ranges are enabled.                      [0m

    * [1;30;103mWARN[0m: UnicodeRange bit 57 "Non-Plane 0 *" should be 0 because cmap has none of the 2048 codepoints in this range. [code: bad-range-bit]


    Result: [1;30;103mWARN[0m

 >> [1;35;107mcom.google.fonts/check/required_tables[0m
    [0;36;107mFont contains all required tables?[0m
    with NotoSansSogdian-Regular-VF.ttf

    [1;35;107m  Rationale:                                                                [0m
    [0;30;107m  Depending on the typeface and coverage of a font, certain tables are      [0m
    [0;30;107m  recommended for optimum quality. For example, the performance of a        [0m
    [0;30;107m  non-linear font is improved if the VDMX, LTSH, and hdmx tables are        [0m
    [0;30;107m  present. Non-monospaced Latin fonts should have a kern table. A gasp      [0m
    [0;30;107m  table is necessary if a designer wants to influence the sizes at which    [0m
    [0;30;107m  grayscaling is used under Windows. A DSIG table containing a digital      [0m
    [0;30;107m  signature helps ensure the integrity of the font file. Etc.               [0m

    * [0;36;107mINFO[0m: This font contains the following optional tables [loca, GPOS, GSUB]


    Result: [0;36;107mINFO[0m

 >> [1;35;107mcom.google.fonts/check/superfamily/list[0m
    [0;36;107mList all superfamily filepaths[0m
    with NotoSansSogdian-Regular-VF.ttf

    [1;35;107m  Rationale:                                                                [0m
    [0;30;107m  This is a merely informative check that lists all sibling families        [0m
    [0;30;107m  detected by fontbakery.                                                   [0m
    [0;30;107m                                                                            [0m
    [0;30;107m  Only the fontfiles in these directories will be considered in             [0m
    [0;30;107m  superfamily-level checks.                                                 [0m

    * [0;36;107mINFO[0m: . [code: family-path]


    Result: [0;36;107mINFO[0m

 >> [1;35;107mcom.google.fonts/check/monospace[0m
    [0;36;107mChecking correctness of monospaced metadata.[0m
    with NotoSansSogdian-Regular-VF.ttf

    [1;35;107m  Rationale:                                                                [0m
    [0;30;107m  There are various metadata in the OpenType spec to specify if a font is   [0m
    [0;30;107m  monospaced or not. If the font is not truly monospaced, then no           [0m
    [0;30;107m  monospaced metadata should be set (as sometimes they mistakenly are...)   [0m
    [0;30;107m                                                                            [0m
    [0;30;107m  Requirements for monospace fonts:                                         [0m
    [0;30;107m                                                                            [0m
    [0;30;107m  * post.isFixedPitch - "Set to 0 if the font is proportionally spaced,     [0m
    [0;30;107m  non-zero if the font is not proportionally spaced (monospaced)"           [0m
    [0;30;107m    www.microsoft.com/typography/otspec/post.htm                            [0m
    [0;30;107m                                                                            [0m
    [0;30;107m  * hhea.advanceWidthMax must be correct, meaning no glyph's width value is [0m
    [0;30;107m  greater.                                                                  [0m
    [0;30;107m    www.microsoft.com/typography/otspec/hhea.htm                            [0m
    [0;30;107m                                                                            [0m
    [0;30;107m  * OS/2.panose.bProportion must be set to 9 (monospace). Spec says: "The   [0m
    [0;30;107m  PANOSE definition contains ten digits each of which currently describes   [0m
    [0;30;107m  up to sixteen variations. Windows uses bFamilyType, bSerifStyle and       [0m
    [0;30;107m  bProportion in the font mapper to determine family type. It also uses     [0m
    [0;30;107m  bProportion to determine if the font is monospaced."                      [0m
    [0;30;107m    www.microsoft.com/typography/otspec/os2.htm#pan                         [0m
    [0;30;107m    monotypecom-test.monotype.de/services/pan2                              [0m
    [0;30;107m                                                                            [0m
    [0;30;107m  * OS/2.xAvgCharWidth must be set accurately.                              [0m
    [0;30;107m    "OS/2.xAvgCharWidth is used when rendering monospaced fonts, at least   [0m
    [0;30;107m  by Windows GDI"                                                           [0m
    [0;30;107m    http://typedrawers.com/discussion/comment/15397/#Comment_15397          [0m
    [0;30;107m                                                                            [0m
    [0;30;107m  Also we should report an error for glyphs not of average width.           [0m
    [0;30;107m                                                                            [0m
    [0;30;107m  Please also note:                                                         [0m
    [0;30;107m  Thomas Phinney told us that a few years ago (as of December 2019), if you [0m
    [0;30;107m  gave a font a monospace flag in Panose, Microsoft Word would ignore the   [0m
    [0;30;107m  actual advance widths and treat it as monospaced. Source:                 [0m
    [0;30;107m  https://typedrawers.com/discussion/comment/45140/#Comment_45140           [0m

    * [1;91;107mFAIL[0m: On monospaced fonts, the value of post.isFixedPitch must be set to a non-zero value (meaning 'fixed width monospaced'), but got 0 instead. [code: mono-bad-post-isFixedPitch]
    * [1;91;107mFAIL[0m: On monospaced fonts, the value of OS/2.panose.bProportion must be set to 9 (proportion: monospaced), but got 0 instead. [code: mono-bad-panose-proportion]
    * [1;30;103mWARN[0m: Font is monospaced but 315 glyphs (91.30434782608695%) have a different width. You should check the widths of: ['CR', 'space', 'uni00A0', 'tatweel', 'uni25CC', 'AlephSep', 'BethSep', 'GimelSep', 'HeSep', 'WawSep', 'ZayinSep', 'HethSep', 'YodhSep', 'KaphSep', 'LamedhSep', 'MemSep', 'NunSep', 'SamekhSep', 'AyinSep', 'PeSep', 'SadheSep', 'ReshSep', 'ShinSep', 'TawSep', 'FethSep', 'LeshSep', 'IndShin', 'oneSogdSep', 'tenSogdSep', 'twentySogdSep', 'hundredSogdSep', 'u10F55', 'u10F56', 'u10F57', 'u10F58', 'u10F59', 'u10F55.altA', 'u10F55.dot', 'u10F55.rho', 'u10F56.rho', 'AlephFin', 'BethFin', 'SadheIni', 'SadheMed', 'AlephMed', 'AlephIni', 'GimelFin', 'GimelMed', 'GimelIni', 'HeFin', 'WawFin', 'WawMed', 'WawIni', 'ZayinFin', 'ZayinMed', 'ZayinIni', 'HethFin', 'HethMed', 'HethIni', 'YodhFin', 'YodhMed', 'YodhIni', 'KaphFin', 'KaphMed', 'KaphIni', 'LamedhFin', 'LamedhMed', 'LamedhIni', 'MemFin', 'MemMed', 'MemIni', 'NunFin', 'NunMed', 'NunIni', 'SamekhFin', 'SamekhMed', 'SamekhIni', 'AyinFin', 'AyinMed', 'AyinIni', 'PeFin', 'PeMed', 'PeIni', 'SadheFin', 'ReshFin', 'ReshMed', 'ReshIni', 'ShinFin', 'ShinMed', 'ShinIni', 'TawFin', 'TawMed', 'TawIni', 'FethFin', 'FethMed', 'FethIni', 'LeshFin', 'LeshMed', 'LeshIni', 'oneSogdFin', 'oneSogdMed', 'oneSogdIni', 'tenSogdFin', 'tenSogdMed', 'tenSogdIni', 'twentySogdFin', 'twentySogdMed', 'twentySogdIni', 'hundredSogdFin', 'LamedhSep.hook', 'LamedhFin.hook', 'LamedhMed.hook', 'LamedhIni.hook', 'ZayinFin.alt02', 'HethFin.alt03', 'KaphFin.alt04', 'NunFin.alt05', 'NunFin.alt06', 'SadheFin.alt07', 'SadheFin.alt08', 'SadheFin.alt09', 'SadheFin.alt10', 'SadheFin.alt11', 'TawFin.alt12', 'TawFin.alt13', 'TawFin.alt14', 'TawFin.alt15', 'LamedhMed.wide', 'LamedhIni.wide', 'LamedhMed.hookwide', 'LamedhIni.hookwide', 'LamedhMed.pewide', 'KaphIni.ligaM', 'KaphMed.ligaM', 'PeIni.ligaM', 'PeMed.ligaM', 'KaphIni.ligaF', 'KaphMed.ligaF', 'PeIni.ligaF', 'PeMed.ligaF', 'WawFin.liga', 'WawMed.liga', 'AlephMed.pe', 'GimelMed.pe', 'ZayinMed.pe', 'HethMed.pe', 'YodhMed.pe', 'KaphMed.pe', 'LamedhMed.pe', 'LamedhMed.pehook', 'LamedhMed.pehookwide', 'MemMed.pe', 'NunMed.pe', 'SamekhMed.pe', 'PeMed.pe', 'SadheMed.pe', 'SadheMed.pe2', 'ReshMed.pe', 'ShinMed.pe', 'TawMed.pe', 'FethMed.pe', 'LeshMed.pe', 'AlephFin.pe', 'BethFin.pe', 'GimelFin.pe', 'HeFin.pe', 'ZayinFin.pe', 'HethFin.pe', 'YodhFin.pe', 'KaphFin.pe', 'LamedhFin.pe', 'LamedhFin.pehook', 'MemFin.pe', 'NunFin.pe', 'SamekhFin.pe', 'AyinFin.pe', 'PeFin.pe', 'SadheFin.pe', 'ReshFin.pe', 'ShinFin.pe', 'TawFin.pe', 'FethFin.pe', 'LeshFin.pe', 'KaphIni.short', 'KaphMed.short', 'PeIni.short', 'PeMed.short', 'KaphIni.cut1', 'KaphMed.cut1', 'PeIni.cut1', 'PeMed.cut1', 'KaphIni.cut2', 'KaphMed.cut2', 'PeIni.cut2', 'PeMed.cut2', 'KaphIni.cut3', 'KaphMed.cut3', 'PeIni.cut3', 'PeMed.cut3', 'AlephFin.EE', 'BethFin.BB', 'GimelFin.BB', 'HeFin.EE', 'WawFin.DD', 'HethFin.BB', 'YodhFin.BB', 'KaphFin.EE', 'MemFin.BB', 'SamekhFin.BB', 'AyinFin.BB', 'PeFin.DD', 'SadheFin.BB', 'ReshFin.EE', 'ShinFin.DD', 'TawFin.CC', 'FethFin.BB', 'LeshFin.EE', 'HethFin.alt03BB', 'KaphFin.alt04EE', 'NunFin.alt06BB', 'SadheFin.alt07BB', 'SadheFin.alt08BB', 'SadheFin.alt09FF', 'SadheFin.alt10FF', 'SadheFin.alt11FF', 'TawFin.alt12CC', 'TawFin.alt13FF', 'TawFin.alt14FF', 'TawFin.alt15FF', 'AlephMed.EE', 'BethMed.BB', 'GimelMed.BB', 'WawMed.FF', 'HethMed.BB', 'YodhMed.BB', 'KaphMed.EE', 'MemMed.EE', 'SamekhMed.BB', 'PeMed.DD', 'SadheMed.FF', 'ReshMed.EE', 'ShinMed.DD', 'TawMed.CC', 'FethMed.BB', 'LeshMed.EE', 'KaphMed.ligaMEE', 'PeMed.ligaMDD', 'KaphMed.ligaFEE', 'PeMed.ligaFDD', 'KaphMed.shortEE', 'PeMed.shortDD', 'KaphMed.cut1EE', 'PeMed.cut1DD', 'KaphMed.cut2EE', 'PeMed.cut2DD', 'KaphMed.cut3EE', 'PeMed.cut3DD', 'ShinIni.Cx', 'ShinIni.Dx', 'ShinIni.Ex', 'ShinIni.Fx', 'ShinMed.peCx', 'ShinMed.peDx', 'ShinMed.peEx', 'ShinMed.peFx', 'ShinMed.Cx', 'ShinMed.Dx', 'ShinMed.Ex', 'ShinMed.Fx', 'KaphMed.peligaM', 'KaphMed.peligaF', 'KaphMed.peshort', 'KaphMed.pecut1', 'KaphMed.pecut2', 'KaphMed.pecut3', 'PeMed.peligaM', 'PeMed.peligaF', 'PeMed.peshort', 'PeMed.pecut1', 'PeMed.pecut2', 'PeMed.pecut3', 'ShinMed.DDCx', 'ShinMed.DDDx', 'ShinMed.DDEx', 'ShinMed.DDFx', 'TawMed.XS', 'TawFin.XS', 'TawFin.alt12XS', 'MemIni.L', 'MemMed.L', 'MemMed.peL', 'MemMed.EEL', 'MemIni.S', 'MemMed.S', 'MemMed.peS', 'MemMed.EES', 'SadheMed.R2', 'SadheMed.R3', 'SadheMed.R4', 'SadheFin.alt09R2', 'SadheFin.alt10R2', 'SadheFin.alt11R2', 'SadheFin.alt09R3', 'SadheFin.alt10R3', 'SadheFin.alt11R3', 'SadheFin.alt09R4', 'SadheFin.alt10R4', 'SadheFin.alt11R4', 'MemIni.Dx', 'MemMed.Dx', 'MemMed.peDx', 'MemMed.EEDx', 'AlephMed.L', 'AlephMed.EEL', 'KaphFin.alt04pe'] [code: mono-outliers]


    Result: [1;91;107mFAIL[0m

 >> [1;35;107mcom.google.fonts/check/dsig[0m
    [0;36;107mDoes the font have a DSIG table?[0m
    with NotoSansSogdian-Regular-VF.ttf

    [1;35;107m  Rationale:                                                                [0m
    [0;30;107m  Microsoft Office 2013 and below products expect fonts to have a digital   [0m
    [0;30;107m  signature declared in a DSIG table in order to implement OpenType         [0m
    [0;30;107m  features. The EOL date for Microsoft Office 2013 products is 4/11/2023.   [0m
    [0;30;107m  This issue does not impact Microsoft Office 2016 and above products.      [0m
    [0;30;107m                                                                            [0m
    [0;30;107m  This checks verifies that this signature is available in the font.        [0m
    [0;30;107m                                                                            [0m
    [0;30;107m  A fake signature is enough to address this issue. If needed, a dummy      [0m
    [0;30;107m  table can be added to the font with the `gftools fix-dsig` script         [0m
    [0;30;107m  available at https://github.com/googlefonts/gftools                       [0m
    [0;30;107m                                                                            [0m
    [0;30;107m  Reference: https://github.com/googlefonts/fontbakery/issues/1845          [0m

    * [1;91;107mFAIL[0m: This font lacks a digital signature (DSIG table). Some applications may require one (even if only a dummy placeholder) in order to work properly. You can add a DSIG table by running the `gftools fix-dsig` script. [code: lacks-signature]


    Result: [1;91;107mFAIL[0m

 >> [1;35;107mcom.google.fonts/check/gpos_kerning_info[0m
    [0;36;107mDoes GPOS table have kerning information?[0m
    with NotoSansSogdian-Regular-VF.ttf

    * [1;30;103mWARN[0m: GPOS table lacks kerning information. [code: lacks-kern-info]


    Result: [1;30;103mWARN[0m


Total:

    [1;97;101mERROR[0m: 0
    [1;91;107mFAIL[0m: 2
    [1;30;103mWARN[0m: 2
    [0;36;107mINFO[0m: 2
    [0;34;107mSKIP[0m: 12
    [0;32;107mPASS[0m: 53


DONE!

    [1;30;107mMeaning of check results:[0m

    An [1;97;101mERROR[0m is something wrong with FontBakery itself, possibly a bug.
    A [1;91;107mFAIL[0m is a problem with the font that must be fixed.
    A [1;30;103mWARN[0m is something that you should consider addressing.
    An [0;36;107mINFO[0m result simply prints something useful. Typically stats.
    A [0;32;107mPASS[0m means the font looks good for the given checking routine.
    And a [0;34;107mSKIP[0m happens when the check does not apply to the given font.

    If you get [1;97;101mERROR[0ms, please help us improve the tool by reporting them at
    [1;36;107mhttps://github.com/googlefonts/fontbakery/issues[0m

    (but other kinds of bug reports and/or
     feature requests are also always welcome, of course!)

