Start ... running 77 individual check executions.
 >> [1;35;107mcom.google.fonts/check/required_tables[0m
    [0;36;107mFont contains all required tables?[0m
    with NotoSansNKo-Regular.ttf

    [1;35;107m  Rationale:                                                                [0m
    [0;30;107m  Depending on the typeface and coverage of a font, certain tables are      [0m
    [0;30;107m  recommended for optimum quality. For example, the performance of a        [0m
    [0;30;107m  non-linear font is improved if the VDMX, LTSH, and hdmx tables are        [0m
    [0;30;107m  present. Non-monospaced Latin fonts should have a kern table. A gasp      [0m
    [0;30;107m  table is necessary if a designer wants to influence the sizes at which    [0m
    [0;30;107m  grayscaling is used under Windows. A DSIG table containing a digital      [0m
    [0;30;107m  signature helps ensure the integrity of the font file. Etc.               [0m

    * [0;36;107mINFO[0m: This font contains the following optional tables [loca, GPOS, GSUB]


    Result: [0;36;107mINFO[0m

 >> [1;35;107mcom.google.fonts/check/superfamily/list[0m
    [0;36;107mList all superfamily filepaths[0m
    with NotoSansNKo-Regular.ttf

    [1;35;107m  Rationale:                                                                [0m
    [0;30;107m  This is a merely informative check that lists all sibling families        [0m
    [0;30;107m  detected by fontbakery.                                                   [0m
    [0;30;107m                                                                            [0m
    [0;30;107m  Only the fontfiles in these directories will be considered in             [0m
    [0;30;107m  superfamily-level checks.                                                 [0m

    * [0;36;107mINFO[0m: . [code: family-path]


    Result: [0;36;107mINFO[0m

 >> [1;35;107mcom.google.fonts/check/monospace[0m
    [0;36;107mChecking correctness of monospaced metadata.[0m
    with NotoSansNKo-Regular.ttf

    [1;35;107m  Rationale:                                                                [0m
    [0;30;107m  There are various metadata in the OpenType spec to specify if a font is   [0m
    [0;30;107m  monospaced or not. If the font is not truly monospaced, then no           [0m
    [0;30;107m  monospaced metadata should be set (as sometimes they mistakenly are...)   [0m
    [0;30;107m                                                                            [0m
    [0;30;107m  Requirements for monospace fonts:                                         [0m
    [0;30;107m                                                                            [0m
    [0;30;107m  * post.isFixedPitch - "Set to 0 if the font is proportionally spaced,     [0m
    [0;30;107m  non-zero if the font is not proportionally spaced (monospaced)"           [0m
    [0;30;107m    www.microsoft.com/typography/otspec/post.htm                            [0m
    [0;30;107m                                                                            [0m
    [0;30;107m  * hhea.advanceWidthMax must be correct, meaning no glyph's width value is [0m
    [0;30;107m  greater.                                                                  [0m
    [0;30;107m    www.microsoft.com/typography/otspec/hhea.htm                            [0m
    [0;30;107m                                                                            [0m
    [0;30;107m  * OS/2.panose.bProportion must be set to 9 (monospace). Spec says: "The   [0m
    [0;30;107m  PANOSE definition contains ten digits each of which currently describes   [0m
    [0;30;107m  up to sixteen variations. Windows uses bFamilyType, bSerifStyle and       [0m
    [0;30;107m  bProportion in the font mapper to determine family type. It also uses     [0m
    [0;30;107m  bProportion to determine if the font is monospaced."                      [0m
    [0;30;107m    www.microsoft.com/typography/otspec/os2.htm#pan                         [0m
    [0;30;107m    monotypecom-test.monotype.de/services/pan2                              [0m
    [0;30;107m                                                                            [0m
    [0;30;107m  * OS/2.xAvgCharWidth must be set accurately.                              [0m
    [0;30;107m    "OS/2.xAvgCharWidth is used when rendering monospaced fonts, at least   [0m
    [0;30;107m  by Windows GDI"                                                           [0m
    [0;30;107m    http://typedrawers.com/discussion/comment/15397/#Comment_15397          [0m
    [0;30;107m                                                                            [0m
    [0;30;107m  Also we should report an error for glyphs not of average width.           [0m
    [0;30;107m                                                                            [0m
    [0;30;107m  Please also note:                                                         [0m
    [0;30;107m  Thomas Phinney told us that a few years ago (as of December 2019), if you [0m
    [0;30;107m  gave a font a monospace flag in Panose, Microsoft Word would ignore the   [0m
    [0;30;107m  actual advance widths and treat it as monospaced. Source:                 [0m
    [0;30;107m  https://typedrawers.com/discussion/comment/45140/#Comment_45140           [0m

    * [1;91;107mFAIL[0m: On monospaced fonts, the value of post.isFixedPitch must be set to a non-zero value (meaning 'fixed width monospaced'), but got 0 instead. [code: mono-bad-post-isFixedPitch]
    * [1;91;107mFAIL[0m: On monospaced fonts, the value of OS/2.panose.bProportion must be set to 9 (proportion: monospaced), but got 2 instead. [code: mono-bad-panose-proportion]
    * [1;30;103mWARN[0m: Font is monospaced but 151 glyphs (82.07%) have a different width. You should check the widths of: ['CR', 'space', 'uni060C', 'uni061B', 'uni061F', 'uni066A', 'uni07C0', 'uni07C1', 'uni07C2', 'uni07C3', 'uni07C4', 'uni07C5', 'uni07C6', 'uni07C7', 'uni07C8', 'uni07C9', 'uni07CA', 'uni07CB', 'uni07CC', 'uni07CD', 'uni07CE', 'uni07CF', 'uni07D0', 'uni07D1', 'uni07D2', 'uni07D3', 'uni07D4', 'uni07D5', 'uni07D6', 'uni07D7', 'uni07D8', 'uni07D9', 'uni07DA', 'uni07DB', 'uni07DC', 'uni07DD', 'uni07DF', 'uni07E0', 'uni07E1', 'uni07E2', 'uni07E5', 'uni07E6', 'uni07E7', 'uni07E8', 'uni07E9', 'uni07EA', 'uni07F4', 'uni07F5', 'uni07F6', 'uni07F7', 'uni07F8', 'uni07F9', 'uni07FA', 'uni07CA.fina', 'uni07CA.medi', 'uni07CA.init', 'uni07CB.fina', 'uni07CB.medi', 'uni07CB.init', 'uni07CC.fina', 'uni07CC.medi', 'uni07CC.init', 'uni07CD.fina', 'uni07CD.medi', 'uni07CD.init', 'uni07CE.fina', 'uni07CE.medi', 'uni07CE.init', 'uni07CF.fina', 'uni07CF.medi', 'uni07CF.init', 'uni07D0.fina', 'uni07D0.medi', 'uni07D0.init', 'uni07D1.fina', 'uni07D1.medi', 'uni07D1.init', 'uni07D2.fina', 'uni07D2.medi', 'uni07D2.init', 'uni07D3.fina', 'uni07D3.medi', 'uni07D3.init', 'uni07D4.fina', 'uni07D4.medi', 'uni07D4.init', 'uni07D5.fina', 'uni07D5.medi', 'uni07D5.init', 'uni07D6.fina', 'uni07D6.medi', 'uni07D6.init', 'uni07D7.fina', 'uni07D7.medi', 'uni07D7.init', 'uni07D8.fina', 'uni07D8.medi', 'uni07D8.init', 'uni07D9.fina', 'uni07D9.medi', 'uni07D9.init', 'uni07DA.fina', 'uni07DA.medi', 'uni07DA.init', 'uni07DB.fina', 'uni07DB.medi', 'uni07DB.init', 'uni07DC.fina', 'uni07DC.medi', 'uni07DC.init', 'uni07DD.fina', 'uni07DD.medi', 'uni07DD.init', 'uni07DF.fina', 'uni07DF.medi', 'uni07DF.init', 'uni07E0.fina', 'uni07E0.medi', 'uni07E0.init', 'uni07E1.fina', 'uni07E1.medi', 'uni07E1.init', 'uni07E2.fina', 'uni07E2.medi', 'uni07E2.init', 'uni07E5.fina', 'uni07E5.medi', 'uni07E5.init', 'uni07E6.fina', 'uni07E6.medi', 'uni07E6.init', 'uni07E7.fina', 'uni07E7.medi', 'uni07E7.init', 'uni07E8.fina', 'uni07E8.medi', 'uni07E8.init', 'uni07E9.fina', 'uni07E9.medi', 'uni07E9.init', 'uni07EA.fina', 'uni07EA.medi', 'uni07EA.init', 'uni25CC', 'uni2E1C', 'uni2E1D', 'uniFD3E', 'uniFD3F', 'uni00A0', 'uni07FE', 'uni07FF'] [code: mono-outliers]


    Result: [1;91;107mFAIL[0m

 >> [1;35;107mcom.google.fonts/check/dsig[0m
    [0;36;107mDoes the font have a DSIG table?[0m
    with NotoSansNKo-Regular.ttf

    [1;35;107m  Rationale:                                                                [0m
    [0;30;107m  Microsoft Office 2013 and below products expect fonts to have a digital   [0m
    [0;30;107m  signature declared in a DSIG table in order to implement OpenType         [0m
    [0;30;107m  features. The EOL date for Microsoft Office 2013 products is 4/11/2023.   [0m
    [0;30;107m  This issue does not impact Microsoft Office 2016 and above products.      [0m
    [0;30;107m                                                                            [0m
    [0;30;107m  This checks verifies that this signature is available in the font.        [0m
    [0;30;107m                                                                            [0m
    [0;30;107m  A fake signature is enough to address this issue. If needed, a dummy      [0m
    [0;30;107m  table can be added to the font with the `gftools fix-dsig` script         [0m
    [0;30;107m  available at https://github.com/googlefonts/gftools                       [0m
    [0;30;107m                                                                            [0m
    [0;30;107m  Reference: https://github.com/googlefonts/fontbakery/issues/1845          [0m

    * [1;91;107mFAIL[0m: This font lacks a digital signature (DSIG table). Some applications may require one (even if only a dummy placeholder) in order to work properly. You can add a DSIG table by running the `gftools fix-dsig` script. [code: lacks-signature]


    Result: [1;91;107mFAIL[0m

 >> [1;35;107mcom.google.fonts/check/gpos_kerning_info[0m
    [0;36;107mDoes GPOS table have kerning information? This check skips monospaced fonts as defined by post.isFixedPitch value[0m
    with NotoSansNKo-Regular.ttf

    * [1;30;103mWARN[0m: GPOS table lacks kerning information. [code: lacks-kern-info]


    Result: [1;30;103mWARN[0m

 >> [1;35;107mcom.google.fonts/check/outline_alignment_miss[0m
    [0;36;107mAre there any misaligned on-curve points?[0m
    with NotoSansNKo-Regular.ttf

    [1;35;107m  Rationale:                                                                [0m
    [0;30;107m  This test heuristically looks for on-curve points which are close to, but [0m
    [0;30;107m  do not sit on, significant boundary coordinates. For example, a point     [0m
    [0;30;107m  which has a Y-coordinate of 1 or -1 might be a misplaced baseline point.  [0m
    [0;30;107m  As well as the baseline, the test also checks for points near the         [0m
    [0;30;107m  x-height (but only for lower case Latin letters), cap-height, ascender    [0m
    [0;30;107m  and descender Y coordinates.                                              [0m
    [0;30;107m                                                                            [0m
    [0;30;107m  Not all such misaligned curve points are a mistake, and sometimes the     [0m
    [0;30;107m  design may call for points in locations near the boundaries. As this test [0m
    [0;30;107m  is liable to generate significant numbers of false positives, the test    [0m
    [0;30;107m  will pass if there are more than 100 reported misalignments.              [0m

    * [1;30;103mWARN[0m: The following glyphs have on-curve points which have potentially incorrect y coordinates:
	* uni07F7: X=358.5,Y=712.0 (should be at cap-height 714?)
	* uni07E8.fina: X=196.0,Y=-1.0 (should be at baseline 0?) and uni07E9.fina: X=196.0,Y=-1.0 (should be at baseline 0?) [code: found-misalignments]


    Result: [1;30;103mWARN[0m

 >> [1;35;107mcom.google.fonts/check/outline_short_segments[0m
    [0;36;107mAre any segments inordinately short?[0m
    with NotoSansNKo-Regular.ttf

    [1;35;107m  Rationale:                                                                [0m
    [0;30;107m  This test looks for outline segments which seem particularly short (less  [0m
    [0;30;107m  than 0.006%% of the overall path length).                                 [0m
    [0;30;107m                                                                            [0m
    [0;30;107m  This test is not run for variable fonts, as they may legitimately have    [0m
    [0;30;107m  short segments. As this test is liable to generate significant numbers of [0m
    [0;30;107m  false positives, the test will pass if there are more than 100 reported   [0m
    [0;30;107m  short segments.                                                           [0m

    * [1;30;103mWARN[0m: The following glyphs have segments which seem very short:
	* uni07E8 contains a short segment B<<194.0,-5.0>-<195.0,-2.0>-<197.0,0.0>>
	* uni07E9 contains a short segment B<<194.0,-5.0>-<195.0,-2.0>-<197.0,0.0>>
	* uni07CF.init contains a short segment L<<463.0,116.0>--<463.0,116.0>>
	* uni07D6.medi contains a short segment L<<378.0,135.0>--<378.0,135.0>>
	* uni07DC.medi contains a short segment L<<244.0,0.0>--<244.0,0.0>>
	* uni07DC.medi contains a short segment L<<244.0,0.0>--<244.0,0.0>>
	* uni07DC.medi contains a short segment L<<244.0,0.0>--<239.0,0.0>>
	* uni07DC.init contains a short segment L<<244.0,0.0>--<244.0,0.0>>
	* uni07DC.init contains a short segment L<<244.0,0.0>--<244.0,0.0>>
	* uni07DC.init contains a short segment L<<244.0,0.0>--<239.0,0.0>> and 3 more. [code: found-short-segments]


    Result: [1;30;103mWARN[0m

 >> [1;35;107mcom.google.fonts/check/outline_colinear_vectors[0m
    [0;36;107mDo any segments have colinear vectors?[0m
    with NotoSansNKo-Regular.ttf

    [1;35;107m  Rationale:                                                                [0m
    [0;30;107m  This test looks for consecutive line segments which have the same angle.  [0m
    [0;30;107m  This normally happens if an outline point has been added by accident.     [0m
    [0;30;107m                                                                            [0m
    [0;30;107m  This test is not run for variable fonts, as they may legitimately have    [0m
    [0;30;107m  colinear vectors.                                                         [0m

    * [1;30;103mWARN[0m: The following glyphs have colinear vectors:
	* uni07DC.init: L<<244.0,0.0>--<239.0,0.0>> -> L<<239.0,0.0>--<15.0,0.0>>
	* uni07DC.init: L<<244.0,0.0>--<244.0,0.0>> -> L<<244.0,0.0>--<244.0,0.0>>
	* uni07DC.medi: L<<244.0,0.0>--<239.0,0.0>> -> L<<239.0,0.0>--<15.0,0.0>>
	* uni07DC.medi: L<<244.0,0.0>--<244.0,0.0>> -> L<<244.0,0.0>--<244.0,0.0>> and uniFD3E: L<<272.0,409.0>--<273.0,459.0>> -> L<<273.0,459.0>--<273.0,583.0>> [code: found-colinear-vectors]


    Result: [1;30;103mWARN[0m


Total:

    [1;97;101mERROR[0m: 0
    [1;91;107mFAIL[0m: 2
    [1;30;103mWARN[0m: 4
    [0;36;107mINFO[0m: 2
    [0;34;107mSKIP[0m: 17
    [0;32;107mPASS[0m: 52


DONE!

    [1;30;107mMeaning of check results:[0m

    An [1;97;101mERROR[0m is something wrong with FontBakery itself, possibly a bug.
    A [1;91;107mFAIL[0m is a problem with the font that must be fixed.
    A [1;30;103mWARN[0m is something that you should consider addressing.
    An [0;36;107mINFO[0m result simply prints something useful. Typically stats.
    A [0;32;107mPASS[0m means the font looks good for the given checking routine.
    And a [0;34;107mSKIP[0m happens when the check does not apply to the given font.

    If you get [1;97;101mERROR[0ms, please help us improve the tool by reporting them at
    [1;36;107mhttps://github.com/googlefonts/fontbakery/issues[0m

    (but other kinds of bug reports and/or
     feature requests are also always welcome, of course!)

