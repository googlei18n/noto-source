Start ... running 77 individual check executions.
 >> [1;35;107mcom.google.fonts/check/ots[0m
    [0;36;107mChecking with ots-sanitize.[0m
    with NotoSerifTelugu-ExtraLight.ttf

    * [1;30;103mWARN[0m: ots-sanitize passed this file, however warnings were printed:

WARNING: Layout: tags aren't arranged alphabetically.
WARNING: Layout: tags aren't arranged alphabetically.



    Result: [1;30;103mWARN[0m

 >> [1;35;107mcom.google.fonts/check/whitespace_glyphnames[0m
    [0;36;107mFont has **proper** whitespace glyph names?[0m
    with NotoSerifTelugu-ExtraLight.ttf

    [1;35;107m  Rationale:                                                                [0m
    [0;30;107m  This check enforces adherence to recommended whitespace (codepoints 0020  [0m
    [0;30;107m  and 00A0) glyph names according to the Adobe Glyph List.                  [0m

    * [1;91;107mFAIL[0m: Glyph 0x00A0 is called "uni00A0.telu": Change to "uni00A0" [code: non-compliant-00a0]


    Result: [1;91;107mFAIL[0m

 >> [1;35;107mcom.google.fonts/check/required_tables[0m
    [0;36;107mFont contains all required tables?[0m
    with NotoSerifTelugu-ExtraLight.ttf

    [1;35;107m  Rationale:                                                                [0m
    [0;30;107m  Depending on the typeface and coverage of a font, certain tables are      [0m
    [0;30;107m  recommended for optimum quality. For example, the performance of a        [0m
    [0;30;107m  non-linear font is improved if the VDMX, LTSH, and hdmx tables are        [0m
    [0;30;107m  present. Non-monospaced Latin fonts should have a kern table. A gasp      [0m
    [0;30;107m  table is necessary if a designer wants to influence the sizes at which    [0m
    [0;30;107m  grayscaling is used under Windows. A DSIG table containing a digital      [0m
    [0;30;107m  signature helps ensure the integrity of the font file. Etc.               [0m

    * [0;36;107mINFO[0m: This font contains the following optional tables [loca, GPOS, GSUB]


    Result: [0;36;107mINFO[0m

 >> [1;35;107mcom.google.fonts/check/superfamily/list[0m
    [0;36;107mList all superfamily filepaths[0m
    with NotoSerifTelugu-ExtraLight.ttf

    [1;35;107m  Rationale:                                                                [0m
    [0;30;107m  This is a merely informative check that lists all sibling families        [0m
    [0;30;107m  detected by fontbakery.                                                   [0m
    [0;30;107m                                                                            [0m
    [0;30;107m  Only the fontfiles in these directories will be considered in             [0m
    [0;30;107m  superfamily-level checks.                                                 [0m

    * [0;36;107mINFO[0m: . [code: family-path]


    Result: [0;36;107mINFO[0m

 >> [1;35;107mcom.google.fonts/check/dsig[0m
    [0;36;107mDoes the font have a DSIG table?[0m
    with NotoSerifTelugu-ExtraLight.ttf

    [1;35;107m  Rationale:                                                                [0m
    [0;30;107m  Microsoft Office 2013 and below products expect fonts to have a digital   [0m
    [0;30;107m  signature declared in a DSIG table in order to implement OpenType         [0m
    [0;30;107m  features. The EOL date for Microsoft Office 2013 products is 4/11/2023.   [0m
    [0;30;107m  This issue does not impact Microsoft Office 2016 and above products.      [0m
    [0;30;107m                                                                            [0m
    [0;30;107m  This checks verifies that this signature is available in the font.        [0m
    [0;30;107m                                                                            [0m
    [0;30;107m  A fake signature is enough to address this issue. If needed, a dummy      [0m
    [0;30;107m  table can be added to the font with the `gftools fix-dsig` script         [0m
    [0;30;107m  available at https://github.com/googlefonts/gftools                       [0m
    [0;30;107m                                                                            [0m
    [0;30;107m  Reference: https://github.com/googlefonts/fontbakery/issues/1845          [0m

    * [1;91;107mFAIL[0m: This font lacks a digital signature (DSIG table). Some applications may require one (even if only a dummy placeholder) in order to work properly. You can add a DSIG table by running the `gftools fix-dsig` script. [code: lacks-signature]


    Result: [1;91;107mFAIL[0m

 >> [1;35;107mcom.google.fonts/check/gdef_spacing_marks[0m
    [0;36;107mCheck mark characters are in GDEF mark glyph class)[0m
    with NotoSerifTelugu-ExtraLight.ttf

    [1;35;107m  Rationale:                                                                [0m
    [0;30;107m  Glyphs in the GDEF mark glyph class should be non-spacing.                [0m
    [0;30;107m  Spacing glyphs in the GDEF mark glyph class may have incorrect anchor     [0m
    [0;30;107m  positioning that was only intended for building composite glyphs during   [0m
    [0;30;107m  design.                                                                   [0m

    * [1;30;103mWARN[0m: The following spacing glyphs may be in the GDEF mark glyph class by mistake:
	 aavowelsigntelu, auvowelsigntelu, basubscript1telu, basubscripttelu, bhasubscript1telu, bhasubscripttelu, candrabindu_0952telu, casubscript1telu, casubscripttelu, chasubscript1telu and 61 more. [code: spacing-mark-glyphs]


    Result: [1;30;103mWARN[0m

 >> [1;35;107mcom.google.fonts/check/gdef_mark_chars[0m
    [0;36;107mCheck mark characters are in GDEF mark glyph class[0m
    with NotoSerifTelugu-ExtraLight.ttf

    [1;35;107m  Rationale:                                                                [0m
    [0;30;107m  Mark characters should be in the GDEF mark glyph class.                   [0m

    * [1;30;103mWARN[0m: The following mark characters could be in the GDEF mark glyph class:
	 U+0C01, U+0C02, U+0C03 and U+0C4D [code: mark-chars]


    Result: [1;30;103mWARN[0m

 >> [1;35;107mcom.google.fonts/check/outline_colinear_vectors[0m
    [0;36;107mDo any segments have colinear vectors?[0m
    with NotoSerifTelugu-ExtraLight.ttf

    [1;35;107m  Rationale:                                                                [0m
    [0;30;107m  This test looks for consecutive line segments which have the same angle.  [0m
    [0;30;107m  This normally happens if an outline point has been added by accident.     [0m
    [0;30;107m                                                                            [0m
    [0;30;107m  This test is not run for variable fonts, as they may legitimately have    [0m
    [0;30;107m  colinear vectors.                                                         [0m

    * [1;30;103mWARN[0m: The following glyphs have colinear vectors:
	* dahalanttelu: L<<317.0,494.0>--<351.0,494.0>> -> L<<351.0,494.0>--<351.0,494.0>>
	* daivoweltelu: L<<329.0,494.0>--<329.0,494.0>> -> L<<329.0,494.0>--<396.0,494.0>>
	* ddaivoweltelu: L<<355.0,494.0>--<355.0,494.0>> -> L<<355.0,494.0>--<422.0,494.0>>
	* ddeevoweltelu: L<<364.0,494.0>--<364.0,494.0>> -> L<<364.0,494.0>--<422.0,494.0>>
	* ddevoweltelu: L<<355.0,494.0>--<355.0,494.0>> -> L<<355.0,494.0>--<422.0,494.0>>
	* ddhaivoweltelu: L<<355.0,494.0>--<355.0,494.0>> -> L<<355.0,494.0>--<422.0,494.0>>
	* ddheevoweltelu: L<<364.0,494.0>--<364.0,494.0>> -> L<<364.0,494.0>--<422.0,494.0>>
	* ddhevoweltelu: L<<355.0,494.0>--<355.0,494.0>> -> L<<355.0,494.0>--<422.0,494.0>>
	* ddhoovoweltelu: L<<283.0,494.0>--<342.0,494.0>> -> L<<342.0,494.0>--<342.0,494.0>>
	* ddhovoweltelu: L<<283.0,494.0>--<342.0,494.0>> -> L<<342.0,494.0>--<342.0,494.0>> and 57 more. [code: found-colinear-vectors]


    Result: [1;30;103mWARN[0m

 >> [1;35;107mcom.google.fonts/check/outline_jaggy_segments[0m
    [0;36;107mDo outlines contain any jaggy segments?[0m
    with NotoSerifTelugu-ExtraLight.ttf

    [1;35;107m  Rationale:                                                                [0m
    [0;30;107m  This test heuristically detects outline segments which form a             [0m
    [0;30;107m  particularly small angle, indicative of an outline error. This may cause  [0m
    [0;30;107m  false positives in cases such as extreme ink traps, so should be regarded [0m
    [0;30;107m  as advisory and backed up by manual inspection.                           [0m

    * [1;30;103mWARN[0m: The following glyphs have jaggy segments:
	* aatelu: B<<122.0,381.0>-<122.0,417.0>-<149.0,445.0>>/B<<149.0,445.0>-<115.0,420.0>-<93.0,378.5>> = 9.71480072388966
	* atelu: B<<122.0,381.0>-<122.0,417.0>-<149.0,445.0>>/B<<149.0,445.0>-<115.0,420.0>-<93.0,378.5>> = 9.71480072388966
	* caavoweltelu: B<<519.5,463.0>-<492.0,463.0>-<463.0,465.0>>/B<<463.0,465.0>-<552.0,440.0>-<599.0,368.0>> = 11.744806700046265
	* chaavoweltelu: B<<519.5,463.0>-<492.0,463.0>-<463.0,465.0>>/B<<463.0,465.0>-<552.0,440.0>-<599.0,368.0>> = 11.744806700046265
	* ddaavoweltelu: B<<585.0,66.5>-<614.0,105.0>-<617.0,172.0>>/B<<617.0,172.0>-<608.0,136.0>-<585.0,114.5>> = 11.472473256461464
	* ddahalanttelu: B<<583.0,66.5>-<612.0,105.0>-<615.0,172.0>>/B<<615.0,172.0>-<606.0,136.0>-<583.0,114.5>> = 11.472473256461464
	* ddaivoweltelu: B<<583.0,66.5>-<612.0,105.0>-<615.0,172.0>>/B<<615.0,172.0>-<606.0,136.0>-<583.0,114.5>> = 11.472473256461464
	* ddatelu: B<<583.0,66.5>-<612.0,105.0>-<615.0,172.0>>/B<<615.0,172.0>-<606.0,136.0>-<583.0,114.5>> = 11.472473256461464
	* ddauvoweltelu: B<<583.0,66.5>-<612.0,105.0>-<615.0,172.0>>/B<<615.0,172.0>-<606.0,136.0>-<583.0,114.5>> = 11.472473256461464
	* ddeevoweltelu: B<<583.0,66.5>-<612.0,105.0>-<615.0,172.0>>/B<<615.0,172.0>-<606.0,136.0>-<583.0,114.5>> = 11.472473256461464 and 96 more. [code: found-jaggy-segments]


    Result: [1;30;103mWARN[0m


Total:

    [1;97;101mERROR[0m: 0
    [1;91;107mFAIL[0m: 2
    [1;30;103mWARN[0m: 5
    [0;36;107mINFO[0m: 2
    [0;34;107mSKIP[0m: 17
    [0;32;107mPASS[0m: 51


DONE!

    [1;30;107mMeaning of check results:[0m

    An [1;97;101mERROR[0m is something wrong with FontBakery itself, possibly a bug.
    A [1;91;107mFAIL[0m is a problem with the font that must be fixed.
    A [1;30;103mWARN[0m is something that you should consider addressing.
    An [0;36;107mINFO[0m result simply prints something useful. Typically stats.
    A [0;32;107mPASS[0m means the font looks good for the given checking routine.
    And a [0;34;107mSKIP[0m happens when the check does not apply to the given font.

    If you get [1;97;101mERROR[0ms, please help us improve the tool by reporting them at
    [1;36;107mhttps://github.com/googlefonts/fontbakery/issues[0m

    (but other kinds of bug reports and/or
     feature requests are also always welcome, of course!)

