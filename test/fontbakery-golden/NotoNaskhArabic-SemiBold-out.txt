Start ... running 77 individual check executions.
 >> [1;35;107mcom.google.fonts/check/whitespace_glyphnames[0m
    [0;36;107mFont has **proper** whitespace glyph names?[0m
    with NotoNaskhArabic-SemiBold.ttf

    [1;35;107m  Rationale:                                                                [0m
    [0;30;107m  This check enforces adherence to recommended whitespace (codepoints 0020  [0m
    [0;30;107m  and 00A0) glyph names according to the Adobe Glyph List.                  [0m

    * [1;30;103mWARN[0m: Glyph 0x0020 is called "uni0020": Change to "space" [code: not-recommended-0020]


    Result: [1;30;103mWARN[0m

 >> [1;35;107mcom.google.fonts/check/required_tables[0m
    [0;36;107mFont contains all required tables?[0m
    with NotoNaskhArabic-SemiBold.ttf

    [1;35;107m  Rationale:                                                                [0m
    [0;30;107m  Depending on the typeface and coverage of a font, certain tables are      [0m
    [0;30;107m  recommended for optimum quality. For example, the performance of a        [0m
    [0;30;107m  non-linear font is improved if the VDMX, LTSH, and hdmx tables are        [0m
    [0;30;107m  present. Non-monospaced Latin fonts should have a kern table. A gasp      [0m
    [0;30;107m  table is necessary if a designer wants to influence the sizes at which    [0m
    [0;30;107m  grayscaling is used under Windows. A DSIG table containing a digital      [0m
    [0;30;107m  signature helps ensure the integrity of the font file. Etc.               [0m

    * [0;36;107mINFO[0m: This font contains the following optional tables [loca, GPOS, GSUB]


    Result: [0;36;107mINFO[0m

 >> [1;35;107mcom.google.fonts/check/superfamily/list[0m
    [0;36;107mList all superfamily filepaths[0m
    with NotoNaskhArabic-SemiBold.ttf

    [1;35;107m  Rationale:                                                                [0m
    [0;30;107m  This is a merely informative check that lists all sibling families        [0m
    [0;30;107m  detected by fontbakery.                                                   [0m
    [0;30;107m                                                                            [0m
    [0;30;107m  Only the fontfiles in these directories will be considered in             [0m
    [0;30;107m  superfamily-level checks.                                                 [0m

    * [0;36;107mINFO[0m: . [code: family-path]


    Result: [0;36;107mINFO[0m

 >> [1;35;107mcom.google.fonts/check/dsig[0m
    [0;36;107mDoes the font have a DSIG table?[0m
    with NotoNaskhArabic-SemiBold.ttf

    [1;35;107m  Rationale:                                                                [0m
    [0;30;107m  Microsoft Office 2013 and below products expect fonts to have a digital   [0m
    [0;30;107m  signature declared in a DSIG table in order to implement OpenType         [0m
    [0;30;107m  features. The EOL date for Microsoft Office 2013 products is 4/11/2023.   [0m
    [0;30;107m  This issue does not impact Microsoft Office 2016 and above products.      [0m
    [0;30;107m                                                                            [0m
    [0;30;107m  This checks verifies that this signature is available in the font.        [0m
    [0;30;107m                                                                            [0m
    [0;30;107m  A fake signature is enough to address this issue. If needed, a dummy      [0m
    [0;30;107m  table can be added to the font with the `gftools fix-dsig` script         [0m
    [0;30;107m  available at https://github.com/googlefonts/gftools                       [0m
    [0;30;107m                                                                            [0m
    [0;30;107m  Reference: https://github.com/googlefonts/fontbakery/issues/1845          [0m

    * [1;91;107mFAIL[0m: This font lacks a digital signature (DSIG table). Some applications may require one (even if only a dummy placeholder) in order to work properly. You can add a DSIG table by running the `gftools fix-dsig` script. [code: lacks-signature]


    Result: [1;91;107mFAIL[0m

 >> [1;35;107mcom.google.fonts/check/gpos_kerning_info[0m
    [0;36;107mDoes GPOS table have kerning information? This check skips monospaced fonts as defined by post.isFixedPitch value[0m
    with NotoNaskhArabic-SemiBold.ttf

    * [1;30;103mWARN[0m: GPOS table lacks kerning information. [code: lacks-kern-info]


    Result: [1;30;103mWARN[0m

 >> [1;35;107mcom.google.fonts/check/glyf_nested_components[0m
    [0;36;107mCheck glyphs do not have components which are themselves components.[0m
    with NotoNaskhArabic-SemiBold.ttf

    [1;35;107m  Rationale:                                                                [0m
    [0;30;107m  There have been bugs rendering variable fonts with nested components.     [0m
    [0;30;107m  Additionally, some static fonts with nested components have been reported [0m
    [0;30;107m  to have rendering and printing issues.                                    [0m
    [0;30;107m                                                                            [0m
    [0;30;107m  For more info, see:                                                       [0m
    [0;30;107m  * https://github.com/googlefonts/fontbakery/issues/2961                   [0m
    [0;30;107m  * https://github.com/arrowtype/recursive/issues/412                       [0m

    * [1;91;107mFAIL[0m: The following glyphs have components which themselves are component glyphs:
	* uni0674
	* uni0623
	* uniFE84
	* uniFE84.rlig
	* uni0675
	* uni0675.fina
	* uni0675.fina.rlig
	* uni0628
	* uniFE90
	* uniFE92 and 1052 more. [code: found-nested-components]


    Result: [1;91;107mFAIL[0m

 >> [1;35;107mcom.google.fonts/check/outline_colinear_vectors[0m
    [0;36;107mDo any segments have colinear vectors?[0m
    with NotoNaskhArabic-SemiBold.ttf

    [1;35;107m  Rationale:                                                                [0m
    [0;30;107m  This test looks for consecutive line segments which have the same angle.  [0m
    [0;30;107m  This normally happens if an outline point has been added by accident.     [0m
    [0;30;107m                                                                            [0m
    [0;30;107m  This test is not run for variable fonts, as they may legitimately have    [0m
    [0;30;107m  colinear vectors.                                                         [0m

    * [1;30;103mWARN[0m: The following glyphs have colinear vectors:
	* _670: L<<440.0,548.0>--<441.0,529.0>> -> L<<441.0,529.0>--<445.0,418.0>>
	* _778: L<<440.0,548.0>--<441.0,529.0>> -> L<<441.0,529.0>--<445.0,418.0>>
	* uni0616: L<<21.0,575.0>--<21.0,609.0>> -> L<<21.0,609.0>--<18.0,681.0>>
	* uni0616: L<<21.0,609.0>--<18.0,681.0>> -> L<<18.0,681.0>--<11.0,778.0>>
	* uni0616: L<<39.0,752.0>--<41.0,684.0>> -> L<<41.0,684.0>--<41.0,663.0>>
	* uni0616: L<<41.0,684.0>--<41.0,663.0>> -> L<<41.0,663.0>--<38.0,578.0>>
	* uni065E: L<<130.0,534.0>--<143.0,552.0>> -> L<<143.0,552.0>--<156.0,568.0>>
	* uni069F.init: L<<0.0,110.0>--<83.0,111.0>> -> L<<83.0,111.0>--<97.0,111.0>>
	* uni06AD: L<<263.0,507.0>--<286.0,530.0>> -> L<<286.0,530.0>--<306.0,551.0>>
	* uni06B6_uni0627: L<<440.0,548.0>--<441.0,529.0>> -> L<<441.0,529.0>--<445.0,418.0>> and 27 more. [code: found-colinear-vectors]


    Result: [1;30;103mWARN[0m

 >> [1;35;107mcom.google.fonts/check/outline_jaggy_segments[0m
    [0;36;107mDo outlines contain any jaggy segments?[0m
    with NotoNaskhArabic-SemiBold.ttf

    [1;35;107m  Rationale:                                                                [0m
    [0;30;107m  This test heuristically detects outline segments which form a             [0m
    [0;30;107m  particularly small angle, indicative of an outline error. This may cause  [0m
    [0;30;107m  false positives in cases such as extreme ink traps, so should be regarded [0m
    [0;30;107m  as advisory and backed up by manual inspection.                           [0m

    * [1;30;103mWARN[0m: The following glyphs have jaggy segments:
	* _1023: B<<461.0,352.0>-<459.0,377.0>-<458.0,393.0>>/B<<458.0,393.0>-<451.0,336.0>-<447.0,299.5>> = 10.577601932492623
	* _1024: B<<461.0,352.0>-<459.0,377.0>-<458.0,393.0>>/B<<458.0,393.0>-<451.0,336.0>-<447.0,299.5>> = 10.577601932492623
	* _671: B<<464.0,313.5>-<461.0,352.0>-<458.0,393.0>>/L<<458.0,393.0>--<455.0,367.0>> = 10.766860780296433
	* _779: B<<464.0,313.5>-<461.0,352.0>-<458.0,393.0>>/L<<458.0,393.0>--<455.0,367.0>> = 10.766860780296433
	* uni0034.ccmp: B<<113.5,316.0>-<114.0,331.0>-<115.0,346.0>>/B<<115.0,346.0>-<113.0,339.0>-<106.0,324.0>> = 12.131321066632513
	* uni0616: B<<138.5,505.5>-<119.0,503.0>-<87.0,500.0>>/B<<87.0,500.0>-<110.0,501.0>-<105.0,500.5>> = 2.8662721208560136
	* uni0620.fina: B<<617.5,11.0>-<573.0,16.0>-<542.0,23.0>>/B<<542.0,23.0>-<590.0,0.0>-<610.0,-11.0>> = 12.8778318660194
	* uni063D.fina: B<<617.5,11.0>-<573.0,16.0>-<542.0,23.0>>/B<<542.0,23.0>-<590.0,0.0>-<610.0,-11.0>> = 12.8778318660194
	* uni063E.fina: B<<617.5,11.0>-<573.0,16.0>-<542.0,23.0>>/B<<542.0,23.0>-<590.0,0.0>-<610.0,-11.0>> = 12.8778318660194
	* uni063F.fina: B<<617.5,11.0>-<573.0,16.0>-<542.0,23.0>>/B<<542.0,23.0>-<590.0,0.0>-<610.0,-11.0>> = 12.8778318660194 and 184 more. [code: found-jaggy-segments]


    Result: [1;30;103mWARN[0m

 >> [1;35;107mcom.google.fonts/check/outline_semi_vertical[0m
    [0;36;107mDo outlines contain any semi-vertical or semi-horizontal lines?[0m
    with NotoNaskhArabic-SemiBold.ttf

    [1;35;107m  Rationale:                                                                [0m
    [0;30;107m  This test detects line segments which are nearly, but not quite, exactly  [0m
    [0;30;107m  horizontal or vertical. Sometimes such lines are created by design, but   [0m
    [0;30;107m  often they are indicative of a design error.                              [0m
    [0;30;107m                                                                            [0m
    [0;30;107m  This test is disabled for italic styles, which often contain              [0m
    [0;30;107m  nearly-upright lines.                                                     [0m

    * [1;30;103mWARN[0m: The following glyphs have semi-vertical/semi-horizontal lines:
	* uniFDF2.001: L<<361.0,481.0>--<364.0,137.0>>
	* uniFDF2.001: L<<610.0,540.0>--<609.0,138.0>>
	* uniFDF2: L<<361.0,481.0>--<364.0,137.0>>
	* uniFDF2: L<<610.0,540.0>--<609.0,138.0>>
	* uniFDFD: L<<3985.5911865234375,288.5882568359375>--<3987.39111328125,82.1966552734375>>
	* uniFDFD: L<<4134.985107421875,323.98681640625>--<4134.3851318359375,82.796630859375>>
	* uniFEDF_uniFEE0_uniFEEA: L<<361.0,481.0>--<364.0,137.0>> and uniFEDF_uniFEE0_uniFEEA: L<<610.0,540.0>--<609.0,138.0>> [code: found-semi-vertical]


    Result: [1;30;103mWARN[0m


Total:

    [1;97;101mERROR[0m: 0
    [1;91;107mFAIL[0m: 2
    [1;30;103mWARN[0m: 5
    [0;36;107mINFO[0m: 2
    [0;34;107mSKIP[0m: 18
    [0;32;107mPASS[0m: 50


DONE!

    [1;30;107mMeaning of check results:[0m

    An [1;97;101mERROR[0m is something wrong with FontBakery itself, possibly a bug.
    A [1;91;107mFAIL[0m is a problem with the font that must be fixed.
    A [1;30;103mWARN[0m is something that you should consider addressing.
    An [0;36;107mINFO[0m result simply prints something useful. Typically stats.
    A [0;32;107mPASS[0m means the font looks good for the given checking routine.
    And a [0;34;107mSKIP[0m happens when the check does not apply to the given font.

    If you get [1;97;101mERROR[0ms, please help us improve the tool by reporting them at
    [1;36;107mhttps://github.com/googlefonts/fontbakery/issues[0m

    (but other kinds of bug reports and/or
     feature requests are also always welcome, of course!)

