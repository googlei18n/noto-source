Start ... running 77 individual check executions.
 >> [1;35;107mcom.google.fonts/check/family/win_ascent_and_descent[0m
    [0;36;107mChecking OS/2 usWinAscent & usWinDescent.[0m
    with NotoSans-CondensedMedium.ttf

    [1;35;107m  Rationale:                                                                [0m
    [0;30;107m  A font's winAscent and winDescent values should be greater than the head  [0m
    [0;30;107m  table's yMax, abs(yMin) values. If they are less than these values,       [0m
    [0;30;107m  clipping can occur on Windows platforms                                   [0m
    [0;30;107m  (https://github.com/RedHatBrand/Overpass/issues/33).                      [0m
    [0;30;107m                                                                            [0m
    [0;30;107m  If the font includes tall/deep writing systems such as Arabic or          [0m
    [0;30;107m  Devanagari, the winAscent and winDescent can be greater than the yMax and [0m
    [0;30;107m  abs(yMin) to accommodate vowel marks.                                     [0m
    [0;30;107m                                                                            [0m
    [0;30;107m  When the win Metrics are significantly greater than the upm, the          [0m
    [0;30;107m  linespacing can appear too loose. To counteract this, enabling the OS/2   [0m
    [0;30;107m  fsSelection bit 7 (Use_Typo_Metrics), will force Windows to use the OS/2  [0m
    [0;30;107m  typo values instead. This means the font developer can control the        [0m
    [0;30;107m  linespacing with the typo values, whilst avoiding clipping by setting the [0m
    [0;30;107m  win values to values greater than the yMax and abs(yMin).                 [0m

    * [1;91;107mFAIL[0m: OS/2.usWinDescent value should be equal or greater than 389, but got 293 instead. [code: descent]


    Result: [1;91;107mFAIL[0m

 >> [1;35;107mcom.google.fonts/check/required_tables[0m
    [0;36;107mFont contains all required tables?[0m
    with NotoSans-CondensedMedium.ttf

    [1;35;107m  Rationale:                                                                [0m
    [0;30;107m  Depending on the typeface and coverage of a font, certain tables are      [0m
    [0;30;107m  recommended for optimum quality. For example, the performance of a        [0m
    [0;30;107m  non-linear font is improved if the VDMX, LTSH, and hdmx tables are        [0m
    [0;30;107m  present. Non-monospaced Latin fonts should have a kern table. A gasp      [0m
    [0;30;107m  table is necessary if a designer wants to influence the sizes at which    [0m
    [0;30;107m  grayscaling is used under Windows. A DSIG table containing a digital      [0m
    [0;30;107m  signature helps ensure the integrity of the font file. Etc.               [0m

    * [0;36;107mINFO[0m: This font contains the following optional tables [loca, GPOS, GSUB]


    Result: [0;36;107mINFO[0m

 >> [1;35;107mcom.google.fonts/check/superfamily/list[0m
    [0;36;107mList all superfamily filepaths[0m
    with NotoSans-CondensedMedium.ttf

    [1;35;107m  Rationale:                                                                [0m
    [0;30;107m  This is a merely informative check that lists all sibling families        [0m
    [0;30;107m  detected by fontbakery.                                                   [0m
    [0;30;107m                                                                            [0m
    [0;30;107m  Only the fontfiles in these directories will be considered in             [0m
    [0;30;107m  superfamily-level checks.                                                 [0m

    * [0;36;107mINFO[0m: . [code: family-path]


    Result: [0;36;107mINFO[0m

 >> [1;35;107mcom.google.fonts/check/dsig[0m
    [0;36;107mDoes the font have a DSIG table?[0m
    with NotoSans-CondensedMedium.ttf

    [1;35;107m  Rationale:                                                                [0m
    [0;30;107m  Microsoft Office 2013 and below products expect fonts to have a digital   [0m
    [0;30;107m  signature declared in a DSIG table in order to implement OpenType         [0m
    [0;30;107m  features. The EOL date for Microsoft Office 2013 products is 4/11/2023.   [0m
    [0;30;107m  This issue does not impact Microsoft Office 2016 and above products.      [0m
    [0;30;107m                                                                            [0m
    [0;30;107m  This checks verifies that this signature is available in the font.        [0m
    [0;30;107m                                                                            [0m
    [0;30;107m  A fake signature is enough to address this issue. If needed, a dummy      [0m
    [0;30;107m  table can be added to the font with the `gftools fix-dsig` script         [0m
    [0;30;107m  available at https://github.com/googlefonts/gftools                       [0m
    [0;30;107m                                                                            [0m
    [0;30;107m  Reference: https://github.com/googlefonts/fontbakery/issues/1845          [0m

    * [1;91;107mFAIL[0m: This font lacks a digital signature (DSIG table). Some applications may require one (even if only a dummy placeholder) in order to work properly. You can add a DSIG table by running the `gftools fix-dsig` script. [code: lacks-signature]


    Result: [1;91;107mFAIL[0m

 >> [1;35;107mcom.google.fonts/check/gdef_mark_chars[0m
    [0;36;107mCheck mark characters are in GDEF mark glyph class[0m
    with NotoSans-CondensedMedium.ttf

    [1;35;107m  Rationale:                                                                [0m
    [0;30;107m  Mark characters should be in the GDEF mark glyph class.                   [0m

    * [1;30;103mWARN[0m: The following mark characters could be in the GDEF mark glyph class:
	 U+0488, U+0489, U+1ABE, U+A670, U+A671 and U+A672 [code: mark-chars]


    Result: [1;30;103mWARN[0m

 >> [1;35;107mcom.google.fonts/check/glyf_nested_components[0m
    [0;36;107mCheck glyphs do not have components which are themselves components.[0m
    with NotoSans-CondensedMedium.ttf

    [1;35;107m  Rationale:                                                                [0m
    [0;30;107m  There have been bugs rendering variable fonts with nested components.     [0m
    [0;30;107m  Additionally, some static fonts with nested components have been reported [0m
    [0;30;107m  to have rendering and printing issues.                                    [0m
    [0;30;107m                                                                            [0m
    [0;30;107m  For more info, see:                                                       [0m
    [0;30;107m  * https://github.com/googlefonts/fontbakery/issues/2961                   [0m
    [0;30;107m  * https://github.com/arrowtype/recursive/issues/412                       [0m

    * [1;91;107mFAIL[0m: The following glyphs have components which themselves are component glyphs:
	* anoteleia
	* uni01EE
	* uni0298
	* uni02B4
	* uni02B6
	* uni02CE
	* uni02CF
	* uni02E4
	* uni03FE
	* uni03FF and 108 more. [code: found-nested-components]


    Result: [1;91;107mFAIL[0m

 >> [1;35;107mcom.google.fonts/check/outline_colinear_vectors[0m
    [0;36;107mDo any segments have colinear vectors?[0m
    with NotoSans-CondensedMedium.ttf

    [1;35;107m  Rationale:                                                                [0m
    [0;30;107m  This test looks for consecutive line segments which have the same angle.  [0m
    [0;30;107m  This normally happens if an outline point has been added by accident.     [0m
    [0;30;107m                                                                            [0m
    [0;30;107m  This test is not run for variable fonts, as they may legitimately have    [0m
    [0;30;107m  colinear vectors.                                                         [0m

    * [1;30;103mWARN[0m: The following glyphs have colinear vectors:
	* uni1E10: L<<245.0,0.0>--<243.0,0.0>> -> L<<243.0,0.0>--<78.0,0.0>>
	* uni2E36: L<<264.0,553.0>--<264.0,491.0>> -> L<<264.0,491.0>--<284.0,0.0>>
	* uni2E36: L<<284.0,760.0>--<264.0,553.0>> -> L<<264.0,553.0>--<264.0,491.0>>
	* uni2E37: L<<145.0,0.0>--<165.0,491.0>> -> L<<165.0,491.0>--<165.0,553.0>>
	* uni2E37: L<<165.0,491.0>--<165.0,553.0>> -> L<<165.0,553.0>--<145.0,760.0>>
	* uniA663: L<<154.0,540.0>--<331.0,540.0>> -> L<<331.0,540.0>--<331.0,540.0>>
	* uniA663: L<<331.0,540.0>--<331.0,540.0>> -> L<<331.0,540.0>--<613.0,540.0>>
	* uniA665: L<<126.0,540.0>--<329.0,540.0>> -> L<<329.0,540.0>--<329.0,540.0>>
	* uniA665: L<<329.0,540.0>--<329.0,540.0>> -> L<<329.0,540.0>--<611.0,540.0>> and uniAB60: L<<69.0,540.0>--<354.0,540.0>> -> L<<354.0,540.0>--<452.0,540.0>> [code: found-colinear-vectors]


    Result: [1;30;103mWARN[0m

 >> [1;35;107mcom.google.fonts/check/outline_jaggy_segments[0m
    [0;36;107mDo outlines contain any jaggy segments?[0m
    with NotoSans-CondensedMedium.ttf

    [1;35;107m  Rationale:                                                                [0m
    [0;30;107m  This test heuristically detects outline segments which form a             [0m
    [0;30;107m  particularly small angle, indicative of an outline error. This may cause  [0m
    [0;30;107m  false positives in cases such as extreme ink traps, so should be regarded [0m
    [0;30;107m  as advisory and backed up by manual inspection.                           [0m

    * [1;30;103mWARN[0m: The following glyphs have jaggy segments:
	* W: B<<212.5,200.5>-<221.0,152.0>-<224.0,116.0>>/B<<224.0,116.0>-<230.0,159.0>-<238.5,207.5>> = 12.707113501316583
	* W: B<<409.5,495.0>-<402.0,536.0>-<398.0,577.0>>/B<<398.0,577.0>-<394.0,548.0>-<387.5,506.0>> = 13.42551110594199
	* W: B<<557.0,209.0>-<565.0,162.0>-<571.0,116.0>>/B<<571.0,116.0>-<576.0,160.0>-<584.0,207.5>> = 13.914481664069719
	* Wacute: B<<212.5,200.5>-<221.0,152.0>-<224.0,116.0>>/B<<224.0,116.0>-<230.0,159.0>-<238.5,207.5>> = 12.707113501316583
	* Wacute: B<<409.5,495.0>-<402.0,536.0>-<398.0,577.0>>/B<<398.0,577.0>-<394.0,548.0>-<387.5,506.0>> = 13.42551110594199
	* Wacute: B<<557.0,209.0>-<565.0,162.0>-<571.0,116.0>>/B<<571.0,116.0>-<576.0,160.0>-<584.0,207.5>> = 13.914481664069719
	* Wcircumflex: B<<212.5,200.5>-<221.0,152.0>-<224.0,116.0>>/B<<224.0,116.0>-<230.0,159.0>-<238.5,207.5>> = 12.707113501316583
	* Wcircumflex: B<<409.5,495.0>-<402.0,536.0>-<398.0,577.0>>/B<<398.0,577.0>-<394.0,548.0>-<387.5,506.0>> = 13.42551110594199
	* Wcircumflex: B<<557.0,209.0>-<565.0,162.0>-<571.0,116.0>>/B<<571.0,116.0>-<576.0,160.0>-<584.0,207.5>> = 13.914481664069719
	* Wdieresis: B<<212.5,200.5>-<221.0,152.0>-<224.0,116.0>>/B<<224.0,116.0>-<230.0,159.0>-<238.5,207.5>> = 12.707113501316583 and 54 more. [code: found-jaggy-segments]


    Result: [1;30;103mWARN[0m

 >> [1;35;107mcom.google.fonts/check/outline_semi_vertical[0m
    [0;36;107mDo outlines contain any semi-vertical or semi-horizontal lines?[0m
    with NotoSans-CondensedMedium.ttf

    [1;35;107m  Rationale:                                                                [0m
    [0;30;107m  This test detects line segments which are nearly, but not quite, exactly  [0m
    [0;30;107m  horizontal or vertical. Sometimes such lines are created by design, but   [0m
    [0;30;107m  often they are indicative of a design error.                              [0m
    [0;30;107m                                                                            [0m
    [0;30;107m  This test is disabled for italic styles, which often contain              [0m
    [0;30;107m  nearly-upright lines.                                                     [0m

    * [1;30;103mWARN[0m: The following glyphs have semi-vertical/semi-horizontal lines:
	* uni0285: L<<184.0,396.0>--<183.0,-86.0>>
	* uni02AE: L<<87.0,180.0>--<86.0,397.0>>
	* uni02AF: L<<87.0,180.0>--<86.0,397.0>>
	* uni20A6: L<<143.0,264.0>--<144.0,0.0>>
	* uni20A6: L<<338.0,142.0>--<337.0,264.0>>
	* uniA65E: L<<253.0,-130.0>--<256.0,496.0>>
	* uniA65E: L<<340.0,496.0>--<343.0,-130.0>>
	* uniA65F: L<<211.0,-72.0>--<214.0,346.0>> and uniA65F: L<<294.0,346.0>--<297.0,-72.0>> [code: found-semi-vertical]


    Result: [1;30;103mWARN[0m


Total:

    [1;97;101mERROR[0m: 0
    [1;91;107mFAIL[0m: 3
    [1;30;103mWARN[0m: 4
    [0;36;107mINFO[0m: 2
    [0;34;107mSKIP[0m: 18
    [0;32;107mPASS[0m: 50


DONE!

    [1;30;107mMeaning of check results:[0m

    An [1;97;101mERROR[0m is something wrong with FontBakery itself, possibly a bug.
    A [1;91;107mFAIL[0m is a problem with the font that must be fixed.
    A [1;30;103mWARN[0m is something that you should consider addressing.
    An [0;36;107mINFO[0m result simply prints something useful. Typically stats.
    A [0;32;107mPASS[0m means the font looks good for the given checking routine.
    And a [0;34;107mSKIP[0m happens when the check does not apply to the given font.

    If you get [1;97;101mERROR[0ms, please help us improve the tool by reporting them at
    [1;36;107mhttps://github.com/googlefonts/fontbakery/issues[0m

    (but other kinds of bug reports and/or
     feature requests are also always welcome, of course!)

