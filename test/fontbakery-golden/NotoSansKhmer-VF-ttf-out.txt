Start ... running 71 individual check executions.
 >> [1;35;107mcom.google.fonts/check/family/win_ascent_and_descent[0m
    [0;36;107mChecking OS/2 usWinAscent & usWinDescent.[0m
    with NotoSansKhmer-VF.ttf

    [1;35;107m  Rationale:                                                                [0m
    [0;30;107m  A font's winAscent and winDescent values should be greater than the head  [0m
    [0;30;107m  table's yMax, abs(yMin) values. If they are less than these values,       [0m
    [0;30;107m  clipping can occur on Windows platforms                                   [0m
    [0;30;107m  (https://github.com/RedHatBrand/Overpass/issues/33).                      [0m
    [0;30;107m                                                                            [0m
    [0;30;107m  If the font includes tall/deep writing systems such as Arabic or          [0m
    [0;30;107m  Devanagari, the winAscent and winDescent can be greater than the yMax and [0m
    [0;30;107m  abs(yMin) to accommodate vowel marks.                                     [0m
    [0;30;107m                                                                            [0m
    [0;30;107m  When the win Metrics are significantly greater than the upm, the          [0m
    [0;30;107m  linespacing can appear too loose. To counteract this, enabling the OS/2   [0m
    [0;30;107m  fsSelection bit 7 (Use_Typo_Metrics), will force Windows to use the OS/2  [0m
    [0;30;107m  typo values instead. This means the font developer can control the        [0m
    [0;30;107m  linespacing with the typo values, whilst avoiding clipping by setting the [0m
    [0;30;107m  win values to values greater than the yMax and abs(yMin).                 [0m

    * [1;91;107mFAIL[0m: OS/2.usWinAscent value should be equal or greater than 1155, but got 1069 instead [code: ascent]
    * [1;91;107mFAIL[0m: OS/2.usWinDescent value should be equal or greater than 691, but got 293 instead. [code: descent]


    Result: [1;91;107mFAIL[0m

 >> [1;35;107mcom.google.fonts/check/required_tables[0m
    [0;36;107mFont contains all required tables?[0m
    with NotoSansKhmer-VF.ttf

    [1;35;107m  Rationale:                                                                [0m
    [0;30;107m  Depending on the typeface and coverage of a font, certain tables are      [0m
    [0;30;107m  recommended for optimum quality. For example, the performance of a        [0m
    [0;30;107m  non-linear font is improved if the VDMX, LTSH, and hdmx tables are        [0m
    [0;30;107m  present. Non-monospaced Latin fonts should have a kern table. A gasp      [0m
    [0;30;107m  table is necessary if a designer wants to influence the sizes at which    [0m
    [0;30;107m  grayscaling is used under Windows. A DSIG table containing a digital      [0m
    [0;30;107m  signature helps ensure the integrity of the font file. Etc.               [0m

    * [0;36;107mINFO[0m: This font contains the following optional tables [loca, GPOS, GSUB]
    * [1;91;107mFAIL[0m: This font is missing the following required tables: ['STAT']


    Result: [1;91;107mFAIL[0m

 >> [1;35;107mcom.google.fonts/check/superfamily/list[0m
    [0;36;107mList all superfamily filepaths[0m
    with NotoSansKhmer-VF.ttf

    [1;35;107m  Rationale:                                                                [0m
    [0;30;107m  This is a merely informative check that lists all sibling families        [0m
    [0;30;107m  detected by fontbakery.                                                   [0m
    [0;30;107m                                                                            [0m
    [0;30;107m  Only the fontfiles in these directories will be considered in             [0m
    [0;30;107m  superfamily-level checks.                                                 [0m

    * [0;36;107mINFO[0m: . [code: family-path]


    Result: [0;36;107mINFO[0m

 >> [1;35;107mcom.google.fonts/check/xavgcharwidth[0m
    [0;36;107mCheck if OS/2 xAvgCharWidth is correct.[0m
    with NotoSansKhmer-VF.ttf

    * [0;36;107mINFO[0m: OS/2 xAvgCharWidth is 705 but it should be 709 which corresponds to the average of the widths of all glyphs in the font. These are similar values, which may be a symptom of the slightly different calculation of the xAvgCharWidth value in font editors. There's further discussion on this at https://github.com/googlefonts/fontbakery/issues/1622


    Result: [0;36;107mINFO[0m

 >> [1;35;107mcom.google.fonts/check/code_pages[0m
    [0;36;107mCheck code page character ranges[0m
    with NotoSansKhmer-VF.ttf

    [1;35;107m  Rationale:                                                                [0m
    [0;30;107m  At least some programs (such as Word and Sublime Text) under Windows 7 do [0m
    [0;30;107m  not recognize fonts unless code page bits are properly set on the         [0m
    [0;30;107m  ulCodePageRange1 (and/or ulCodePageRange2) fields of the OS/2 table.      [0m
    [0;30;107m                                                                            [0m
    [0;30;107m  More specifically, the fonts are selectable in the font menu, but         [0m
    [0;30;107m  whichever Windows API these applications use considers them unsuitable    [0m
    [0;30;107m  for any character set, so anything set in these fonts is rendered with a  [0m
    [0;30;107m  fallback font of Arial.                                                   [0m
    [0;30;107m                                                                            [0m
    [0;30;107m  This check currently does not identify which code pages should be set.    [0m
    [0;30;107m  Auto-detecting coverage is not trivial since the OpenType specification   [0m
    [0;30;107m  leaves the interpretation of whether a given code page is "functional" or [0m
    [0;30;107m  not open to the font developer to decide.                                 [0m
    [0;30;107m                                                                            [0m
    [0;30;107m  So here we simply detect as a FAIL when a given font has no code page     [0m
    [0;30;107m  declared at all.                                                          [0m

    * [1;91;107mFAIL[0m: No code pages defined in the OS/2 table ulCodePageRange1 and CodePageRange2 fields.


    Result: [1;91;107mFAIL[0m

 >> [1;35;107mcom.google.fonts/check/post_table_version[0m
    [0;36;107mFont has correct post table version?[0m
    with NotoSansKhmer-VF.ttf

    [1;35;107m  Rationale:                                                                [0m
    [0;30;107m  Apple recommends against using 'post' table format 3 under most           [0m
    [0;30;107m  circumstances, as it can create problems with some printer drivers and    [0m
    [0;30;107m  PDF documents. The savings in disk space usually does not justify the     [0m
    [0;30;107m  potential loss in functionality.                                          [0m
    [0;30;107m  Source: https://developer.apple.com/fonts/TrueType-Reference-Manual/RM06/Chap6post.html[0m
    [0;30;107m                                                                            [0m
    [0;30;107m  The CFF2 table does not contain glyph names, so variable OTFs should be   [0m
    [0;30;107m  allowed to use post table version 2.                                      [0m
    [0;30;107m                                                                            [0m
    [0;30;107m  This check expects:                                                       [0m
    [0;30;107m  - Version 2 for TTF or OTF CFF2 Variable fonts                            [0m
    [0;30;107m  - Version 3 for OTF                                                       [0m

    * [1;91;107mFAIL[0m: Post table should be version 2 instead of 3.0.


    Result: [1;91;107mFAIL[0m

 >> [1;35;107mcom.google.fonts/check/dsig[0m
    [0;36;107mDoes the font have a DSIG table?[0m
    with NotoSansKhmer-VF.ttf

    [1;35;107m  Rationale:                                                                [0m
    [0;30;107m  Microsoft Office 2013 and below products expect fonts to have a digital   [0m
    [0;30;107m  signature declared in a DSIG table in order to implement OpenType         [0m
    [0;30;107m  features. The EOL date for Microsoft Office 2013 products is 4/11/2023.   [0m
    [0;30;107m  This issue does not impact Microsoft Office 2016 and above products.      [0m
    [0;30;107m                                                                            [0m
    [0;30;107m  This checks verifies that this signature is available in the font.        [0m
    [0;30;107m                                                                            [0m
    [0;30;107m  A fake signature is enough to address this issue. If needed, a dummy      [0m
    [0;30;107m  table can be added to the font with the `gftools fix-dsig` script         [0m
    [0;30;107m  available at https://github.com/googlefonts/gftools                       [0m
    [0;30;107m                                                                            [0m
    [0;30;107m  Reference: https://github.com/googlefonts/fontbakery/issues/1845          [0m

    * [1;91;107mFAIL[0m: This font lacks a digital signature (DSIG table). Some applications may require one (even if only a dummy placeholder) in order to work properly. You can add a DSIG table by running the `gftools fix-dsig` script. [code: lacks-signature]


    Result: [1;91;107mFAIL[0m

 >> [1;35;107mcom.google.fonts/check/gdef_spacing_marks[0m
    [0;36;107mCheck mark characters are in GDEF mark glyph class)[0m
    with NotoSansKhmer-VF.ttf

    [1;35;107m  Rationale:                                                                [0m
    [0;30;107m  Glyphs in the GDEF mark glyph class should be non-spacing.                [0m
    [0;30;107m  Spacing glyphs in the GDEF mark glyph class may have incorrect anchor     [0m
    [0;30;107m  positioning that was only intended for building composite glyphs during   [0m
    [0;30;107m  design.                                                                   [0m

    * [1;30;103mWARN[0m: The following spacing glyphs may be in the GDEF mark glyph class by mistake:
	 uni17B4 and uni17B5 [code: spacing-mark-glyphs]


    Result: [1;30;103mWARN[0m

 >> [1;35;107mcom.google.fonts/check/gdef_mark_chars[0m
    [0;36;107mCheck mark characters are in GDEF mark glyph class[0m
    with NotoSansKhmer-VF.ttf

    [1;35;107m  Rationale:                                                                [0m
    [0;30;107m  Mark characters should be in the GDEF mark glyph class.                   [0m

    * [1;30;103mWARN[0m: The following mark characters could be in the GDEF mark glyph class:
	 U+17B6, U+17BE, U+17BF, U+17C0, U+17C1, U+17C2, U+17C3, U+17C4, U+17C5, U+17C7 and U+17C8 [code: mark-chars]


    Result: [1;30;103mWARN[0m

 >> [1;35;107mcom.google.fonts/check/gpos_kerning_info[0m
    [0;36;107mDoes GPOS table have kerning information?[0m
    with NotoSansKhmer-VF.ttf

    * [1;30;103mWARN[0m: GPOS table lacks kerning information. [code: lacks-kern-info]


    Result: [1;30;103mWARN[0m

 >> [1;35;107mcom.google.fonts/check/varfont/regular_wght_coord[0m
    [0;36;107mThe variable font 'wght' (Weight) axis coordinate must be 400 on the 'Regular' instance.[0m
    with NotoSansKhmer-VF.ttf

    [1;35;107m  Rationale:                                                                [0m
    [0;30;107m  According to the Open-Type spec's registered design-variation tag 'wght'  [0m
    [0;30;107m  available at                                                              [0m
    [0;30;107m  https://docs.microsoft.com/en-gb/typography/opentype/spec/dvaraxistag_wght[0m
    [0;30;107m                                                                            [0m
    [0;30;107m  If a variable font has a 'wght' (Weight) axis, then the coordinate of its [0m
    [0;30;107m  'Regular' instance is required to be 400.                                 [0m

    * [1;91;107mFAIL[0m: The "wght" axis coordinate of the "Regular" instance must be 400. Got 90.0 instead. [code: not-400]


    Result: [1;91;107mFAIL[0m

 >> [1;35;107mcom.google.fonts/check/varfont/bold_wght_coord[0m
    [0;36;107mThe variable font 'wght' (Weight) axis coordinate must be 700 on the 'Bold' instance.[0m
    with NotoSansKhmer-VF.ttf

    [1;35;107m  Rationale:                                                                [0m
    [0;30;107m  The Open-Type spec's registered design-variation tag 'wght' available at  [0m
    [0;30;107m  https://docs.microsoft.com/en-gb/typography/opentype/spec/dvaraxistag_wght[0m
    [0;30;107m  does not specify a required value for the 'Bold' instance of a variable   [0m
    [0;30;107m  font.                                                                     [0m
    [0;30;107m                                                                            [0m
    [0;30;107m  But Dave Crossland suggested that we should enforce a required value of   [0m
    [0;30;107m  700 in this case.                                                         [0m

    * [1;91;107mFAIL[0m: The "wght" axis coordinate of the "Bold" instance must be 700. Got 151.0 instead. [code: not-700]


    Result: [1;91;107mFAIL[0m

 >> [1;35;107mcom.google.fonts/check/varfont/stat_axis_record_for_each_axis[0m
    [0;36;107mAll fvar axes have a correspondent Axis Record on STAT table? [0m
    with NotoSansKhmer-VF.ttf

    [1;35;107m  Rationale:                                                                [0m
    [0;30;107m  cording to the OpenType spec, there must be an Axis Record for every axis [0m
    [0;30;107m  defined in the fvar table.                                                [0m
    [0;30;107m                                                                            [0m
    [0;30;107m  tps://docs.microsoft.com/en-us/typography/opentype/spec/stat#axis-records [0m

    * [1;97;101mERROR[0m: Failed with KeyError: 'STAT'
           File "/usr/local/lib/python3.8/site-packages/fontbakery/checkrunner.py", line 366, in _exec_check
             for sub_result in result:  # Might raise.
           File "/usr/local/lib/python3.8/site-packages/fontbakery/profiles/stat.py", line 23, in com_google_fonts_check_varfont_stat_axis_record_for_each_axis
             stat_axes = set(a.AxisTag for a in ttFont['STAT'].table.DesignAxisRecord.Axis)
           File "/usr/local/lib/python3.8/site-packages/fontTools/ttLib/ttFont.py", line 381, in __getitem__
             data = self.reader[tag]
           File "/usr/local/lib/python3.8/site-packages/fontTools/ttLib/sfnt.py", line 105, in __getitem__
             entry = self.tables[Tag(tag)]
         


    Result: [1;97;101mERROR[0m


Total:

    [1;97;101mERROR[0m: 1
    [1;91;107mFAIL[0m: 7
    [1;30;103mWARN[0m: 3
    [0;36;107mINFO[0m: 2
    [0;34;107mSKIP[0m: 15
    [0;32;107mPASS[0m: 43


DONE!

    [1;30;107mMeaning of check results:[0m

    An [1;97;101mERROR[0m is something wrong with FontBakery itself, possibly a bug.
    A [1;91;107mFAIL[0m is a problem with the font that must be fixed.
    A [1;30;103mWARN[0m is something that you should consider addressing.
    An [0;36;107mINFO[0m result simply prints something useful. Typically stats.
    A [0;32;107mPASS[0m means the font looks good for the given checking routine.
    And a [0;34;107mSKIP[0m happens when the check does not apply to the given font.

    If you get [1;97;101mERROR[0ms, please help us improve the tool by reporting them at
    [1;36;107mhttps://github.com/googlefonts/fontbakery/issues[0m

    (but other kinds of bug reports and/or
     feature requests are also always welcome, of course!)

