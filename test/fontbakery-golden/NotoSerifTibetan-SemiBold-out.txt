Start ... running 77 individual check executions.
 >> [1;35;107mcom.google.fonts/check/required_tables[0m
    [0;36;107mFont contains all required tables?[0m
    with NotoSerifTibetan-SemiBold.ttf

    [1;35;107m  Rationale:                                                                [0m
    [0;30;107m  Depending on the typeface and coverage of a font, certain tables are      [0m
    [0;30;107m  recommended for optimum quality. For example, the performance of a        [0m
    [0;30;107m  non-linear font is improved if the VDMX, LTSH, and hdmx tables are        [0m
    [0;30;107m  present. Non-monospaced Latin fonts should have a kern table. A gasp      [0m
    [0;30;107m  table is necessary if a designer wants to influence the sizes at which    [0m
    [0;30;107m  grayscaling is used under Windows. A DSIG table containing a digital      [0m
    [0;30;107m  signature helps ensure the integrity of the font file. Etc.               [0m

    * [0;36;107mINFO[0m: This font contains the following optional tables [loca, GPOS, GSUB]


    Result: [0;36;107mINFO[0m

 >> [1;35;107mcom.google.fonts/check/superfamily/list[0m
    [0;36;107mList all superfamily filepaths[0m
    with NotoSerifTibetan-SemiBold.ttf

    [1;35;107m  Rationale:                                                                [0m
    [0;30;107m  This is a merely informative check that lists all sibling families        [0m
    [0;30;107m  detected by fontbakery.                                                   [0m
    [0;30;107m                                                                            [0m
    [0;30;107m  Only the fontfiles in these directories will be considered in             [0m
    [0;30;107m  superfamily-level checks.                                                 [0m

    * [0;36;107mINFO[0m: . [code: family-path]


    Result: [0;36;107mINFO[0m

 >> [1;35;107mcom.google.fonts/check/dsig[0m
    [0;36;107mDoes the font have a DSIG table?[0m
    with NotoSerifTibetan-SemiBold.ttf

    [1;35;107m  Rationale:                                                                [0m
    [0;30;107m  Microsoft Office 2013 and below products expect fonts to have a digital   [0m
    [0;30;107m  signature declared in a DSIG table in order to implement OpenType         [0m
    [0;30;107m  features. The EOL date for Microsoft Office 2013 products is 4/11/2023.   [0m
    [0;30;107m  This issue does not impact Microsoft Office 2016 and above products.      [0m
    [0;30;107m                                                                            [0m
    [0;30;107m  This checks verifies that this signature is available in the font.        [0m
    [0;30;107m                                                                            [0m
    [0;30;107m  A fake signature is enough to address this issue. If needed, a dummy      [0m
    [0;30;107m  table can be added to the font with the `gftools fix-dsig` script         [0m
    [0;30;107m  available at https://github.com/googlefonts/gftools                       [0m
    [0;30;107m                                                                            [0m
    [0;30;107m  Reference: https://github.com/googlefonts/fontbakery/issues/1845          [0m

    * [1;91;107mFAIL[0m: This font lacks a digital signature (DSIG table). Some applications may require one (even if only a dummy placeholder) in order to work properly. You can add a DSIG table by running the `gftools fix-dsig` script. [code: lacks-signature]


    Result: [1;91;107mFAIL[0m

 >> [1;35;107mcom.google.fonts/check/gdef_mark_chars[0m
    [0;36;107mCheck mark characters are in GDEF mark glyph class[0m
    with NotoSerifTibetan-SemiBold.ttf

    [1;35;107m  Rationale:                                                                [0m
    [0;30;107m  Mark characters should be in the GDEF mark glyph class.                   [0m

    * [1;30;103mWARN[0m: The following mark characters could be in the GDEF mark glyph class:
	 U+0F3E, U+0F3F and U+0F7F [code: mark-chars]


    Result: [1;30;103mWARN[0m

 >> [1;35;107mcom.google.fonts/check/outline_colinear_vectors[0m
    [0;36;107mDo any segments have colinear vectors?[0m
    with NotoSerifTibetan-SemiBold.ttf

    [1;35;107m  Rationale:                                                                [0m
    [0;30;107m  This test looks for consecutive line segments which have the same angle.  [0m
    [0;30;107m  This normally happens if an outline point has been added by accident.     [0m
    [0;30;107m                                                                            [0m
    [0;30;107m  This test is not run for variable fonts, as they may legitimately have    [0m
    [0;30;107m  colinear vectors.                                                         [0m

    * [1;30;103mWARN[0m: The following glyphs have colinear vectors:
	* uni0F32: L<<405.0,533.0>--<402.0,530.0>> -> L<<402.0,530.0>--<214.0,356.0>>
	* uni0F4A0FB40FB2: L<<338.0,253.0>--<338.0,253.0>> -> L<<338.0,253.0>--<583.0,253.0>>
	* uni0F4A0FB4: L<<342.0,253.0>--<343.0,253.0>> -> L<<343.0,253.0>--<585.0,253.0>>
	* uni0F530FA20F74: L<<388.0,-513.0>--<370.0,-407.0>> -> L<<370.0,-407.0>--<369.0,-401.0>>
	* uni0F530FAD0F71: L<<610.0,-198.0>--<610.0,-199.0>> -> L<<610.0,-199.0>--<610.0,-254.0>>
	* uni0F540FAD0FB1: L<<588.0,-153.0>--<588.0,-154.0>> -> L<<588.0,-154.0>--<588.0,-174.0>>
	* uni0F540FAD0FB1: L<<588.0,561.0>--<588.0,-153.0>> -> L<<588.0,-153.0>--<588.0,-154.0>>
	* uni0F620F9F0F74: L<<313.0,-242.0>--<313.0,-242.0>> -> L<<313.0,-242.0>--<313.0,-242.0>>
	* uni0F620F9F0F9F0F71: L<<98.0,162.0>--<331.0,162.0>> -> L<<331.0,162.0>--<331.0,162.0>>
	* uni0F660F9F0F74: L<<361.0,-255.0>--<361.0,-255.0>> -> L<<361.0,-255.0>--<361.0,-255.0>> and 6 more. [code: found-colinear-vectors]


    Result: [1;30;103mWARN[0m

 >> [1;35;107mcom.google.fonts/check/outline_jaggy_segments[0m
    [0;36;107mDo outlines contain any jaggy segments?[0m
    with NotoSerifTibetan-SemiBold.ttf

    [1;35;107m  Rationale:                                                                [0m
    [0;30;107m  This test heuristically detects outline segments which form a             [0m
    [0;30;107m  particularly small angle, indicative of an outline error. This may cause  [0m
    [0;30;107m  false positives in cases such as extreme ink traps, so should be regarded [0m
    [0;30;107m  as advisory and backed up by manual inspection.                           [0m

    * [1;30;103mWARN[0m: The following glyphs have jaggy segments:
	* uni0F17: B<<107.0,195.0>-<113.0,182.0>-<118.0,171.0>>/B<<118.0,171.0>-<113.0,197.0>-<107.0,224.5>> = 13.55842772575779
	* uni0F4F0FB60FA3: L<<157.0,2.0>--<503.0,2.0>>/L<<503.0,2.0>--<499.0,3.0>> = 14.036243467926484
	* uni0F620FA10FB2: L<<574.0,-352.0>--<570.0,-350.0>>/L<<570.0,-350.0>--<574.0,-353.0>> = 10.304846468766009
	* uni0F650FA9: B<<585.0,258.0>-<617.0,258.0>-<641.0,260.0>>/B<<641.0,260.0>-<627.0,262.0>-<615.0,262.0>> = 12.893744044882132
	* uni0F660FA80FBC0FBB0F74: L<<508.0,-340.0>--<606.0,-340.0>>/B<<606.0,-340.0>-<519.0,-318.0>-<450.0,-310.5>> = 14.19109654902398
	* uni0F7B.2: B<<304.5,856.5>-<361.0,832.0>-<441.0,785.0>>/B<<441.0,785.0>-<368.0,847.0>-<316.5,880.5>> = 9.90751013688095
	* uni0F7B.narrow: B<<271.5,889.5>-<317.0,859.0>-<381.0,801.0>>/B<<381.0,801.0>-<324.0,876.0>-<283.5,916.5>> = 10.580722702636576
	* uni0F7B0F7E.narrow: B<<268.0,880.5>-<314.0,852.0>-<380.0,798.0>>/B<<380.0,798.0>-<322.0,870.0>-<280.5,908.0>> = 11.857218797146295
	* uni0F7B0F7E: B<<304.5,856.5>-<361.0,832.0>-<441.0,785.0>>/B<<441.0,785.0>-<368.0,847.0>-<316.5,880.5>> = 9.90751013688095
	* uni0F7B0F82.narrow: B<<268.0,880.5>-<314.0,852.0>-<380.0,798.0>>/B<<380.0,798.0>-<322.0,870.0>-<280.5,908.0>> = 11.857218797146295 and 6 more. [code: found-jaggy-segments]


    Result: [1;30;103mWARN[0m

 >> [1;35;107mcom.google.fonts/check/outline_semi_vertical[0m
    [0;36;107mDo outlines contain any semi-vertical or semi-horizontal lines?[0m
    with NotoSerifTibetan-SemiBold.ttf

    [1;35;107m  Rationale:                                                                [0m
    [0;30;107m  This test detects line segments which are nearly, but not quite, exactly  [0m
    [0;30;107m  horizontal or vertical. Sometimes such lines are created by design, but   [0m
    [0;30;107m  often they are indicative of a design error.                              [0m
    [0;30;107m                                                                            [0m
    [0;30;107m  This test is disabled for italic styles, which often contain              [0m
    [0;30;107m  nearly-upright lines.                                                     [0m

    * [1;30;103mWARN[0m: The following glyphs have semi-vertical/semi-horizontal lines:
	* uni0F650FB3: L<<64.0,679.0>--<301.0,678.0>> [code: found-semi-vertical]


    Result: [1;30;103mWARN[0m


Total:

    [1;97;101mERROR[0m: 0
    [1;91;107mFAIL[0m: 1
    [1;30;103mWARN[0m: 4
    [0;36;107mINFO[0m: 2
    [0;34;107mSKIP[0m: 18
    [0;32;107mPASS[0m: 52


DONE!

    [1;30;107mMeaning of check results:[0m

    An [1;97;101mERROR[0m is something wrong with FontBakery itself, possibly a bug.
    A [1;91;107mFAIL[0m is a problem with the font that must be fixed.
    A [1;30;103mWARN[0m is something that you should consider addressing.
    An [0;36;107mINFO[0m result simply prints something useful. Typically stats.
    A [0;32;107mPASS[0m means the font looks good for the given checking routine.
    And a [0;34;107mSKIP[0m happens when the check does not apply to the given font.

    If you get [1;97;101mERROR[0ms, please help us improve the tool by reporting them at
    [1;36;107mhttps://github.com/googlefonts/fontbakery/issues[0m

    (but other kinds of bug reports and/or
     feature requests are also always welcome, of course!)

