Start ... running 77 individual check executions.
 >> [1;35;107mcom.google.fonts/check/family/win_ascent_and_descent[0m
    [0;36;107mChecking OS/2 usWinAscent & usWinDescent.[0m
    with NotoSerifDisplay-CondensedMedium.ttf

    [1;35;107m  Rationale:                                                                [0m
    [0;30;107m  A font's winAscent and winDescent values should be greater than the head  [0m
    [0;30;107m  table's yMax, abs(yMin) values. If they are less than these values,       [0m
    [0;30;107m  clipping can occur on Windows platforms                                   [0m
    [0;30;107m  (https://github.com/RedHatBrand/Overpass/issues/33).                      [0m
    [0;30;107m                                                                            [0m
    [0;30;107m  If the font includes tall/deep writing systems such as Arabic or          [0m
    [0;30;107m  Devanagari, the winAscent and winDescent can be greater than the yMax and [0m
    [0;30;107m  abs(yMin) to accommodate vowel marks.                                     [0m
    [0;30;107m                                                                            [0m
    [0;30;107m  When the win Metrics are significantly greater than the upm, the          [0m
    [0;30;107m  linespacing can appear too loose. To counteract this, enabling the OS/2   [0m
    [0;30;107m  fsSelection bit 7 (Use_Typo_Metrics), will force Windows to use the OS/2  [0m
    [0;30;107m  typo values instead. This means the font developer can control the        [0m
    [0;30;107m  linespacing with the typo values, whilst avoiding clipping by setting the [0m
    [0;30;107m  win values to values greater than the yMax and abs(yMin).                 [0m

    * [1;91;107mFAIL[0m: OS/2.usWinDescent value should be equal or greater than 389, but got 293 instead. [code: descent]


    Result: [1;91;107mFAIL[0m

 >> [1;35;107mcom.google.fonts/check/required_tables[0m
    [0;36;107mFont contains all required tables?[0m
    with NotoSerifDisplay-CondensedMedium.ttf

    [1;35;107m  Rationale:                                                                [0m
    [0;30;107m  Depending on the typeface and coverage of a font, certain tables are      [0m
    [0;30;107m  recommended for optimum quality. For example, the performance of a        [0m
    [0;30;107m  non-linear font is improved if the VDMX, LTSH, and hdmx tables are        [0m
    [0;30;107m  present. Non-monospaced Latin fonts should have a kern table. A gasp      [0m
    [0;30;107m  table is necessary if a designer wants to influence the sizes at which    [0m
    [0;30;107m  grayscaling is used under Windows. A DSIG table containing a digital      [0m
    [0;30;107m  signature helps ensure the integrity of the font file. Etc.               [0m

    * [0;36;107mINFO[0m: This font contains the following optional tables [loca, GPOS, GSUB]


    Result: [0;36;107mINFO[0m

 >> [1;35;107mcom.google.fonts/check/superfamily/list[0m
    [0;36;107mList all superfamily filepaths[0m
    with NotoSerifDisplay-CondensedMedium.ttf

    [1;35;107m  Rationale:                                                                [0m
    [0;30;107m  This is a merely informative check that lists all sibling families        [0m
    [0;30;107m  detected by fontbakery.                                                   [0m
    [0;30;107m                                                                            [0m
    [0;30;107m  Only the fontfiles in these directories will be considered in             [0m
    [0;30;107m  superfamily-level checks.                                                 [0m

    * [0;36;107mINFO[0m: . [code: family-path]


    Result: [0;36;107mINFO[0m

 >> [1;35;107mcom.google.fonts/check/family_naming_recommendations[0m
    [0;36;107mFont follows the family naming recommendations?[0m
    with NotoSerifDisplay-CondensedMedium.ttf

    * [0;36;107mINFO[0m: Font does not follow some family naming recommendations:

| Field | Value | Recommendation |
|:----- |:----- |:-------------- |
| Family Name | Noto Serif Display Condensed Medium | exceeds max length (31) |
 [code: bad-entries]


    Result: [0;36;107mINFO[0m

 >> [1;35;107mcom.google.fonts/check/dsig[0m
    [0;36;107mDoes the font have a DSIG table?[0m
    with NotoSerifDisplay-CondensedMedium.ttf

    [1;35;107m  Rationale:                                                                [0m
    [0;30;107m  Microsoft Office 2013 and below products expect fonts to have a digital   [0m
    [0;30;107m  signature declared in a DSIG table in order to implement OpenType         [0m
    [0;30;107m  features. The EOL date for Microsoft Office 2013 products is 4/11/2023.   [0m
    [0;30;107m  This issue does not impact Microsoft Office 2016 and above products.      [0m
    [0;30;107m                                                                            [0m
    [0;30;107m  This checks verifies that this signature is available in the font.        [0m
    [0;30;107m                                                                            [0m
    [0;30;107m  A fake signature is enough to address this issue. If needed, a dummy      [0m
    [0;30;107m  table can be added to the font with the `gftools fix-dsig` script         [0m
    [0;30;107m  available at https://github.com/googlefonts/gftools                       [0m
    [0;30;107m                                                                            [0m
    [0;30;107m  Reference: https://github.com/googlefonts/fontbakery/issues/1845          [0m

    * [1;91;107mFAIL[0m: This font lacks a digital signature (DSIG table). Some applications may require one (even if only a dummy placeholder) in order to work properly. You can add a DSIG table by running the `gftools fix-dsig` script. [code: lacks-signature]


    Result: [1;91;107mFAIL[0m

 >> [1;35;107mcom.google.fonts/check/gdef_mark_chars[0m
    [0;36;107mCheck mark characters are in GDEF mark glyph class[0m
    with NotoSerifDisplay-CondensedMedium.ttf

    [1;35;107m  Rationale:                                                                [0m
    [0;30;107m  Mark characters should be in the GDEF mark glyph class.                   [0m

    * [1;30;103mWARN[0m: The following mark characters could be in the GDEF mark glyph class:
	 U+0488, U+0489, U+1ABE, U+A670, U+A671 and U+A672 [code: mark-chars]


    Result: [1;30;103mWARN[0m

 >> [1;35;107mcom.google.fonts/check/glyf_nested_components[0m
    [0;36;107mCheck glyphs do not have components which are themselves components.[0m
    with NotoSerifDisplay-CondensedMedium.ttf

    [1;35;107m  Rationale:                                                                [0m
    [0;30;107m  There have been bugs rendering variable fonts with nested components.     [0m
    [0;30;107m  Additionally, some static fonts with nested components have been reported [0m
    [0;30;107m  to have rendering and printing issues.                                    [0m
    [0;30;107m                                                                            [0m
    [0;30;107m  For more info, see:                                                       [0m
    [0;30;107m  * https://github.com/googlefonts/fontbakery/issues/2961                   [0m
    [0;30;107m  * https://github.com/arrowtype/recursive/issues/412                       [0m

    * [1;91;107mFAIL[0m: The following glyphs have components which themselves are component glyphs:
	* onequarter
	* onequarter
	* onehalf
	* onehalf
	* threequarters
	* threequarters
	* oneeighth
	* oneeighth
	* threeeighths
	* threeeighths and 74 more. [code: found-nested-components]


    Result: [1;91;107mFAIL[0m

 >> [1;35;107mcom.google.fonts/check/outline_colinear_vectors[0m
    [0;36;107mDo any segments have colinear vectors?[0m
    with NotoSerifDisplay-CondensedMedium.ttf

    [1;35;107m  Rationale:                                                                [0m
    [0;30;107m  This test looks for consecutive line segments which have the same angle.  [0m
    [0;30;107m  This normally happens if an outline point has been added by accident.     [0m
    [0;30;107m                                                                            [0m
    [0;30;107m  This test is not run for variable fonts, as they may legitimately have    [0m
    [0;30;107m  colinear vectors.                                                         [0m

    * [1;30;103mWARN[0m: The following glyphs have colinear vectors:
	* uni0290: L<<407.0,163.0>--<401.0,27.0>> -> L<<401.0,27.0>--<401.0,-60.0>>
	* uni1D81: L<<515.0,10.0>--<515.0,10.0>> -> L<<515.0,10.0>--<525.0,10.0>>
	* uni1D82: L<<265.0,10.0>--<295.0,10.0>> -> L<<295.0,10.0>--<295.0,10.0>>
	* uni1D82: L<<295.0,10.0>--<295.0,10.0>> -> L<<295.0,10.0>--<305.0,10.0>>
	* uni1D82: L<<295.0,10.0>--<305.0,10.0>> -> L<<305.0,10.0>--<305.0,10.0>>
	* uni1D82: L<<305.0,10.0>--<305.0,10.0>> -> L<<305.0,10.0>--<306.0,10.0>>
	* uni1D84: L<<511.0,10.0>--<511.0,10.0>> -> L<<511.0,10.0>--<521.0,10.0>>
	* uni1D85: L<<259.0,10.0>--<259.0,10.0>> -> L<<259.0,10.0>--<269.0,10.0>>
	* uni1D86: L<<795.0,10.0>--<795.0,10.0>> -> L<<795.0,10.0>--<805.0,10.0>>
	* uni1D87: L<<528.0,10.0>--<528.0,10.0>> -> L<<528.0,10.0>--<538.0,10.0>> and 14 more. [code: found-colinear-vectors]


    Result: [1;30;103mWARN[0m

 >> [1;35;107mcom.google.fonts/check/outline_jaggy_segments[0m
    [0;36;107mDo outlines contain any jaggy segments?[0m
    with NotoSerifDisplay-CondensedMedium.ttf

    [1;35;107m  Rationale:                                                                [0m
    [0;30;107m  This test heuristically detects outline segments which form a             [0m
    [0;30;107m  particularly small angle, indicative of an outline error. This may cause  [0m
    [0;30;107m  false positives in cases such as extreme ink traps, so should be regarded [0m
    [0;30;107m  as advisory and backed up by manual inspection.                           [0m

    * [1;30;103mWARN[0m: The following glyphs have jaggy segments:
	* eogonek: B<<226.0,-58.0>-<254.0,-26.0>-<304.0,-5.0>>/B<<304.0,-5.0>-<281.0,-10.0>-<255.0,-10.0>> = 10.517632002589288
	* scriptg: B<<93.5,165.0>-<104.0,193.0>-<117.0,209.0>>/L<<117.0,209.0>--<52.0,145.0>> = 6.350285546882426
	* three.lf: B<<350.0,439.0>-<308.0,387.0>-<214.0,375.0>>/B<<214.0,375.0>-<305.0,372.0>-<359.5,329.0>> = 9.163192964630163
	* three.osf: B<<359.0,274.0>-<317.0,222.0>-<223.0,210.0>>/B<<223.0,210.0>-<314.0,207.0>-<368.5,164.0>> = 9.163192964630163
	* three.tosf: B<<374.0,274.0>-<332.0,222.0>-<238.0,210.0>>/B<<238.0,210.0>-<329.0,207.0>-<383.5,164.0>> = 9.163192964630163
	* three: B<<373.0,439.0>-<331.0,387.0>-<237.0,375.0>>/B<<237.0,375.0>-<328.0,372.0>-<382.5,329.0>> = 9.163192964630163
	* uni00B5: B<<232.0,-10.0>-<119.0,-10.0>-<95.0,105.0>>/B<<95.0,105.0>-<95.0,21.0>-<100.5,-33.0>> = 11.788183299107605
	* uni0190: B<<137.0,347.0>-<181.0,367.0>-<237.0,372.0>>/B<<237.0,372.0>-<57.0,397.0>-<57.0,547.0>> = 13.009327955316628
	* uni023F: B<<188.0,-10.0>-<161.0,-10.0>-<138.0,-6.0>>/B<<138.0,-6.0>-<175.0,-21.0>-<192.5,-43.5>> = 12.20209261932585
	* uni0377: B<<374.0,303.5>-<393.0,391.0>-<425.0,491.0>>/L<<425.0,491.0>--<145.0,0.0>> = 11.949917141889237 and 32 more. [code: found-jaggy-segments]


    Result: [1;30;103mWARN[0m

 >> [1;35;107mcom.google.fonts/check/outline_semi_vertical[0m
    [0;36;107mDo outlines contain any semi-vertical or semi-horizontal lines?[0m
    with NotoSerifDisplay-CondensedMedium.ttf

    [1;35;107m  Rationale:                                                                [0m
    [0;30;107m  This test detects line segments which are nearly, but not quite, exactly  [0m
    [0;30;107m  horizontal or vertical. Sometimes such lines are created by design, but   [0m
    [0;30;107m  often they are indicative of a design error.                              [0m
    [0;30;107m                                                                            [0m
    [0;30;107m  This test is disabled for italic styles, which often contain              [0m
    [0;30;107m  nearly-upright lines.                                                     [0m

    * [1;30;103mWARN[0m: The following glyphs have semi-vertical/semi-horizontal lines:
	* AE: L<<503.0,371.0>--<502.0,10.0>>
	* AEacute: L<<503.0,371.0>--<502.0,10.0>>
	* OE: L<<514.0,369.0>--<513.0,10.0>>
	* h.sc: L<<504.0,503.0>--<505.0,66.0>>
	* hcircumflex.sc: L<<504.0,503.0>--<505.0,66.0>>
	* uni018B: L<<316.0,704.0>--<189.0,703.0>>
	* uni018B: L<<71.0,713.0>--<503.0,714.0>>
	* uni018C: L<<91.0,607.0>--<92.0,760.0>>
	* uni01E2: L<<503.0,371.0>--<502.0,10.0>>
	* uni04D4: L<<503.0,371.0>--<502.0,10.0>> and 7 more. [code: found-semi-vertical]


    Result: [1;30;103mWARN[0m


Total:

    [1;97;101mERROR[0m: 0
    [1;91;107mFAIL[0m: 3
    [1;30;103mWARN[0m: 4
    [0;36;107mINFO[0m: 3
    [0;34;107mSKIP[0m: 18
    [0;32;107mPASS[0m: 49


DONE!

    [1;30;107mMeaning of check results:[0m

    An [1;97;101mERROR[0m is something wrong with FontBakery itself, possibly a bug.
    A [1;91;107mFAIL[0m is a problem with the font that must be fixed.
    A [1;30;103mWARN[0m is something that you should consider addressing.
    An [0;36;107mINFO[0m result simply prints something useful. Typically stats.
    A [0;32;107mPASS[0m means the font looks good for the given checking routine.
    And a [0;34;107mSKIP[0m happens when the check does not apply to the given font.

    If you get [1;97;101mERROR[0ms, please help us improve the tool by reporting them at
    [1;36;107mhttps://github.com/googlefonts/fontbakery/issues[0m

    (but other kinds of bug reports and/or
     feature requests are also always welcome, of course!)

