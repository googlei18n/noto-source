Start ... running 77 individual check executions.
 >> [1;35;107mcom.google.fonts/check/family/win_ascent_and_descent[0m
    [0;36;107mChecking OS/2 usWinAscent & usWinDescent.[0m
    with NotoSerifDisplay-ExtraCondensedThin.ttf

    [1;35;107m  Rationale:                                                                [0m
    [0;30;107m  A font's winAscent and winDescent values should be greater than the head  [0m
    [0;30;107m  table's yMax, abs(yMin) values. If they are less than these values,       [0m
    [0;30;107m  clipping can occur on Windows platforms                                   [0m
    [0;30;107m  (https://github.com/RedHatBrand/Overpass/issues/33).                      [0m
    [0;30;107m                                                                            [0m
    [0;30;107m  If the font includes tall/deep writing systems such as Arabic or          [0m
    [0;30;107m  Devanagari, the winAscent and winDescent can be greater than the yMax and [0m
    [0;30;107m  abs(yMin) to accommodate vowel marks.                                     [0m
    [0;30;107m                                                                            [0m
    [0;30;107m  When the win Metrics are significantly greater than the upm, the          [0m
    [0;30;107m  linespacing can appear too loose. To counteract this, enabling the OS/2   [0m
    [0;30;107m  fsSelection bit 7 (Use_Typo_Metrics), will force Windows to use the OS/2  [0m
    [0;30;107m  typo values instead. This means the font developer can control the        [0m
    [0;30;107m  linespacing with the typo values, whilst avoiding clipping by setting the [0m
    [0;30;107m  win values to values greater than the yMax and abs(yMin).                 [0m

    * [1;91;107mFAIL[0m: OS/2.usWinDescent value should be equal or greater than 389, but got 293 instead. [code: descent]


    Result: [1;91;107mFAIL[0m

 >> [1;35;107mcom.google.fonts/check/required_tables[0m
    [0;36;107mFont contains all required tables?[0m
    with NotoSerifDisplay-ExtraCondensedThin.ttf

    [1;35;107m  Rationale:                                                                [0m
    [0;30;107m  Depending on the typeface and coverage of a font, certain tables are      [0m
    [0;30;107m  recommended for optimum quality. For example, the performance of a        [0m
    [0;30;107m  non-linear font is improved if the VDMX, LTSH, and hdmx tables are        [0m
    [0;30;107m  present. Non-monospaced Latin fonts should have a kern table. A gasp      [0m
    [0;30;107m  table is necessary if a designer wants to influence the sizes at which    [0m
    [0;30;107m  grayscaling is used under Windows. A DSIG table containing a digital      [0m
    [0;30;107m  signature helps ensure the integrity of the font file. Etc.               [0m

    * [0;36;107mINFO[0m: This font contains the following optional tables [loca, GPOS, GSUB]


    Result: [0;36;107mINFO[0m

 >> [1;35;107mcom.google.fonts/check/superfamily/list[0m
    [0;36;107mList all superfamily filepaths[0m
    with NotoSerifDisplay-ExtraCondensedThin.ttf

    [1;35;107m  Rationale:                                                                [0m
    [0;30;107m  This is a merely informative check that lists all sibling families        [0m
    [0;30;107m  detected by fontbakery.                                                   [0m
    [0;30;107m                                                                            [0m
    [0;30;107m  Only the fontfiles in these directories will be considered in             [0m
    [0;30;107m  superfamily-level checks.                                                 [0m

    * [0;36;107mINFO[0m: . [code: family-path]


    Result: [0;36;107mINFO[0m

 >> [1;35;107mcom.google.fonts/check/family_naming_recommendations[0m
    [0;36;107mFont follows the family naming recommendations?[0m
    with NotoSerifDisplay-ExtraCondensedThin.ttf

    * [0;36;107mINFO[0m: Font does not follow some family naming recommendations:

| Field | Value | Recommendation |
|:----- |:----- |:-------------- |
| Family Name | Noto Serif Display ExtraCondensed Thin | exceeds max length (31) |
 [code: bad-entries]


    Result: [0;36;107mINFO[0m

 >> [1;35;107mcom.google.fonts/check/dsig[0m
    [0;36;107mDoes the font have a DSIG table?[0m
    with NotoSerifDisplay-ExtraCondensedThin.ttf

    [1;35;107m  Rationale:                                                                [0m
    [0;30;107m  Microsoft Office 2013 and below products expect fonts to have a digital   [0m
    [0;30;107m  signature declared in a DSIG table in order to implement OpenType         [0m
    [0;30;107m  features. The EOL date for Microsoft Office 2013 products is 4/11/2023.   [0m
    [0;30;107m  This issue does not impact Microsoft Office 2016 and above products.      [0m
    [0;30;107m                                                                            [0m
    [0;30;107m  This checks verifies that this signature is available in the font.        [0m
    [0;30;107m                                                                            [0m
    [0;30;107m  A fake signature is enough to address this issue. If needed, a dummy      [0m
    [0;30;107m  table can be added to the font with the `gftools fix-dsig` script         [0m
    [0;30;107m  available at https://github.com/googlefonts/gftools                       [0m
    [0;30;107m                                                                            [0m
    [0;30;107m  Reference: https://github.com/googlefonts/fontbakery/issues/1845          [0m

    * [1;91;107mFAIL[0m: This font lacks a digital signature (DSIG table). Some applications may require one (even if only a dummy placeholder) in order to work properly. You can add a DSIG table by running the `gftools fix-dsig` script. [code: lacks-signature]


    Result: [1;91;107mFAIL[0m

 >> [1;35;107mcom.google.fonts/check/gdef_mark_chars[0m
    [0;36;107mCheck mark characters are in GDEF mark glyph class[0m
    with NotoSerifDisplay-ExtraCondensedThin.ttf

    [1;35;107m  Rationale:                                                                [0m
    [0;30;107m  Mark characters should be in the GDEF mark glyph class.                   [0m

    * [1;30;103mWARN[0m: The following mark characters could be in the GDEF mark glyph class:
	 U+0488, U+0489, U+1ABE, U+A670, U+A671 and U+A672 [code: mark-chars]


    Result: [1;30;103mWARN[0m

 >> [1;35;107mcom.google.fonts/check/glyf_nested_components[0m
    [0;36;107mCheck glyphs do not have components which are themselves components.[0m
    with NotoSerifDisplay-ExtraCondensedThin.ttf

    [1;35;107m  Rationale:                                                                [0m
    [0;30;107m  There have been bugs rendering variable fonts with nested components.     [0m
    [0;30;107m  Additionally, some static fonts with nested components have been reported [0m
    [0;30;107m  to have rendering and printing issues.                                    [0m
    [0;30;107m                                                                            [0m
    [0;30;107m  For more info, see:                                                       [0m
    [0;30;107m  * https://github.com/googlefonts/fontbakery/issues/2961                   [0m
    [0;30;107m  * https://github.com/arrowtype/recursive/issues/412                       [0m

    * [1;91;107mFAIL[0m: The following glyphs have components which themselves are component glyphs:
	* onequarter
	* onequarter
	* onehalf
	* onehalf
	* threequarters
	* threequarters
	* oneeighth
	* oneeighth
	* threeeighths
	* threeeighths and 74 more. [code: found-nested-components]


    Result: [1;91;107mFAIL[0m

 >> [1;35;107mcom.google.fonts/check/outline_colinear_vectors[0m
    [0;36;107mDo any segments have colinear vectors?[0m
    with NotoSerifDisplay-ExtraCondensedThin.ttf

    [1;35;107m  Rationale:                                                                [0m
    [0;30;107m  This test looks for consecutive line segments which have the same angle.  [0m
    [0;30;107m  This normally happens if an outline point has been added by accident.     [0m
    [0;30;107m                                                                            [0m
    [0;30;107m  This test is not run for variable fonts, as they may legitimately have    [0m
    [0;30;107m  colinear vectors.                                                         [0m

    * [1;30;103mWARN[0m: The following glyphs have colinear vectors:
	* uni0290: L<<313.0,138.0>--<308.0,0.0>> -> L<<308.0,0.0>--<308.0,-101.0>>
	* uni1D8E: L<<313.0,138.0>--<308.0,0.0>> -> L<<308.0,0.0>--<308.0,-106.0>>
	* uni1DBC: L<<203.4576416015625,369.796630859375>--<200.20751953125,287.0>> -> L<<200.20751953125,287.0>--<200.20751953125,226.4024658203125>>
	* uni2E36: L<<174.0,760.0>--<166.0,516.0>> -> L<<166.0,516.0>--<173.0,398.0>>
	* uni2E37: L<<135.0,398.0>--<141.0,516.0>> -> L<<141.0,516.0>--<136.0,760.0>>
	* uni2E4B: L<<291.0,319.0>--<166.0,322.0>> -> L<<166.0,322.0>--<164.0,322.0>>
	* uniA7C6: L<<361.0,139.0>--<358.0,0.0>> -> L<<358.0,0.0>--<358.0,-112.0>> and uniAB66: L<<620.0,138.0>--<615.0,0.0>> -> L<<615.0,0.0>--<615.0,-112.0>> [code: found-colinear-vectors]


    Result: [1;30;103mWARN[0m

 >> [1;35;107mcom.google.fonts/check/outline_jaggy_segments[0m
    [0;36;107mDo outlines contain any jaggy segments?[0m
    with NotoSerifDisplay-ExtraCondensedThin.ttf

    [1;35;107m  Rationale:                                                                [0m
    [0;30;107m  This test heuristically detects outline segments which form a             [0m
    [0;30;107m  particularly small angle, indicative of an outline error. This may cause  [0m
    [0;30;107m  false positives in cases such as extreme ink traps, so should be regarded [0m
    [0;30;107m  as advisory and backed up by manual inspection.                           [0m

    * [1;30;103mWARN[0m: The following glyphs have jaggy segments:
	* eth: B<<275.5,471.5>-<307.0,452.0>-<327.0,402.0>>/B<<327.0,402.0>-<314.0,477.0>-<291.5,538.5>> = 11.967845522144682
	* scriptg: B<<93.5,165.0>-<104.0,193.0>-<117.0,209.0>>/L<<117.0,209.0>--<52.0,145.0>> = 6.350285546882426
	* uni03D7: B<<336.5,353.5>-<354.0,414.0>-<371.0,462.0>>/L<<371.0,462.0>--<69.0,0.0>> = 13.669379870419398
	* uni03F0: B<<336.5,353.5>-<354.0,414.0>-<371.0,462.0>>/L<<371.0,462.0>--<69.0,0.0>> = 13.669379870419398
	* uni0516: B<<388.5,450.5>-<384.0,421.0>-<374.0,394.0>>/L<<374.0,394.0>--<467.0,617.0>> = 2.314969371983598
	* uni1D03: L<<398.0,270.0>--<295.0,270.0>>/B<<295.0,270.0>-<339.0,259.0>-<358.5,228.0>> = 14.036243467926484
	* uni1D2F: B<<234.5,543.0>-<214.0,520.0>-<185.0,515.0>>/L<<185.0,515.0>--<277.0,515.0>> = 9.782407031807285
	* uni1D95: L<<329.0,-106.0>--<329.0,211.0>>/B<<329.0,211.0>-<321.0,100.0>-<283.0,45.0>> = 4.122297811783587
	* uni1D9E: B<<179.08172607421875,569.8884887695312>-<199.5574951171875,558.18896484375>-<212.5579833984375,528.190185546875>>/B<<212.5579833984375,528.190185546875>-<204.107666015625,573.1883544921875>-<189.48211669921875,610.0868530273438>> = 12.794485811317397
	* uni1DD9: B<<41.978363037109375,808.6115112304688>-<56.15374755859375,800.81103515625>-<65.15399169921875,780.809814453125>>/B<<65.15399169921875,780.809814453125>-<59.3038330078125,810.8116455078125>-<49.178558349609375,835.4131469726562>> = 13.193174264104101 and 10 more. [code: found-jaggy-segments]


    Result: [1;30;103mWARN[0m

 >> [1;35;107mcom.google.fonts/check/outline_semi_vertical[0m
    [0;36;107mDo outlines contain any semi-vertical or semi-horizontal lines?[0m
    with NotoSerifDisplay-ExtraCondensedThin.ttf

    [1;35;107m  Rationale:                                                                [0m
    [0;30;107m  This test detects line segments which are nearly, but not quite, exactly  [0m
    [0;30;107m  horizontal or vertical. Sometimes such lines are created by design, but   [0m
    [0;30;107m  often they are indicative of a design error.                              [0m
    [0;30;107m                                                                            [0m
    [0;30;107m  This test is disabled for italic styles, which often contain              [0m
    [0;30;107m  nearly-upright lines.                                                     [0m

    * [1;30;103mWARN[0m: The following glyphs have semi-vertical/semi-horizontal lines:
	* AE: L<<375.0,377.0>--<373.0,10.0>>
	* AEacute: L<<375.0,377.0>--<373.0,10.0>>
	* E: L<<137.0,370.0>--<135.0,10.0>>
	* Eacute: L<<137.0,370.0>--<135.0,10.0>>
	* Ebreve: L<<137.0,370.0>--<135.0,10.0>>
	* Ecaron: L<<137.0,370.0>--<135.0,10.0>>
	* Ecircumflex: L<<137.0,370.0>--<135.0,10.0>>
	* Edieresis: L<<137.0,370.0>--<135.0,10.0>>
	* Edotaccent: L<<137.0,370.0>--<135.0,10.0>>
	* Egrave: L<<137.0,370.0>--<135.0,10.0>> and 69 more. [code: found-semi-vertical]


    Result: [1;30;103mWARN[0m


Total:

    [1;97;101mERROR[0m: 0
    [1;91;107mFAIL[0m: 3
    [1;30;103mWARN[0m: 4
    [0;36;107mINFO[0m: 3
    [0;34;107mSKIP[0m: 18
    [0;32;107mPASS[0m: 49


DONE!

    [1;30;107mMeaning of check results:[0m

    An [1;97;101mERROR[0m is something wrong with FontBakery itself, possibly a bug.
    A [1;91;107mFAIL[0m is a problem with the font that must be fixed.
    A [1;30;103mWARN[0m is something that you should consider addressing.
    An [0;36;107mINFO[0m result simply prints something useful. Typically stats.
    A [0;32;107mPASS[0m means the font looks good for the given checking routine.
    And a [0;34;107mSKIP[0m happens when the check does not apply to the given font.

    If you get [1;97;101mERROR[0ms, please help us improve the tool by reporting them at
    [1;36;107mhttps://github.com/googlefonts/fontbakery/issues[0m

    (but other kinds of bug reports and/or
     feature requests are also always welcome, of course!)

