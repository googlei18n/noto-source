Start ... running 77 individual check executions.
 >> [1;35;107mcom.google.fonts/check/family/win_ascent_and_descent[0m
    [0;36;107mChecking OS/2 usWinAscent & usWinDescent.[0m
    with NotoSerif-SemiCondensedSemiBold.ttf

    [1;35;107m  Rationale:                                                                [0m
    [0;30;107m  A font's winAscent and winDescent values should be greater than the head  [0m
    [0;30;107m  table's yMax, abs(yMin) values. If they are less than these values,       [0m
    [0;30;107m  clipping can occur on Windows platforms                                   [0m
    [0;30;107m  (https://github.com/RedHatBrand/Overpass/issues/33).                      [0m
    [0;30;107m                                                                            [0m
    [0;30;107m  If the font includes tall/deep writing systems such as Arabic or          [0m
    [0;30;107m  Devanagari, the winAscent and winDescent can be greater than the yMax and [0m
    [0;30;107m  abs(yMin) to accommodate vowel marks.                                     [0m
    [0;30;107m                                                                            [0m
    [0;30;107m  When the win Metrics are significantly greater than the upm, the          [0m
    [0;30;107m  linespacing can appear too loose. To counteract this, enabling the OS/2   [0m
    [0;30;107m  fsSelection bit 7 (Use_Typo_Metrics), will force Windows to use the OS/2  [0m
    [0;30;107m  typo values instead. This means the font developer can control the        [0m
    [0;30;107m  linespacing with the typo values, whilst avoiding clipping by setting the [0m
    [0;30;107m  win values to values greater than the yMax and abs(yMin).                 [0m

    * [1;91;107mFAIL[0m: OS/2.usWinDescent value should be equal or greater than 389, but got 293 instead. [code: descent]


    Result: [1;91;107mFAIL[0m

 >> [1;35;107mcom.google.fonts/check/required_tables[0m
    [0;36;107mFont contains all required tables?[0m
    with NotoSerif-SemiCondensedSemiBold.ttf

    [1;35;107m  Rationale:                                                                [0m
    [0;30;107m  Depending on the typeface and coverage of a font, certain tables are      [0m
    [0;30;107m  recommended for optimum quality. For example, the performance of a        [0m
    [0;30;107m  non-linear font is improved if the VDMX, LTSH, and hdmx tables are        [0m
    [0;30;107m  present. Non-monospaced Latin fonts should have a kern table. A gasp      [0m
    [0;30;107m  table is necessary if a designer wants to influence the sizes at which    [0m
    [0;30;107m  grayscaling is used under Windows. A DSIG table containing a digital      [0m
    [0;30;107m  signature helps ensure the integrity of the font file. Etc.               [0m

    * [0;36;107mINFO[0m: This font contains the following optional tables [loca, GPOS, GSUB]


    Result: [0;36;107mINFO[0m

 >> [1;35;107mcom.google.fonts/check/superfamily/list[0m
    [0;36;107mList all superfamily filepaths[0m
    with NotoSerif-SemiCondensedSemiBold.ttf

    [1;35;107m  Rationale:                                                                [0m
    [0;30;107m  This is a merely informative check that lists all sibling families        [0m
    [0;30;107m  detected by fontbakery.                                                   [0m
    [0;30;107m                                                                            [0m
    [0;30;107m  Only the fontfiles in these directories will be considered in             [0m
    [0;30;107m  superfamily-level checks.                                                 [0m

    * [0;36;107mINFO[0m: . [code: family-path]


    Result: [0;36;107mINFO[0m

 >> [1;35;107mcom.google.fonts/check/family_naming_recommendations[0m
    [0;36;107mFont follows the family naming recommendations?[0m
    with NotoSerif-SemiCondensedSemiBold.ttf

    * [0;36;107mINFO[0m: Font does not follow some family naming recommendations:

| Field | Value | Recommendation |
|:----- |:----- |:-------------- |
| Family Name | Noto Serif SemiCondensed SemiBold | exceeds max length (31) |
 [code: bad-entries]


    Result: [0;36;107mINFO[0m

 >> [1;35;107mcom.google.fonts/check/dsig[0m
    [0;36;107mDoes the font have a DSIG table?[0m
    with NotoSerif-SemiCondensedSemiBold.ttf

    [1;35;107m  Rationale:                                                                [0m
    [0;30;107m  Microsoft Office 2013 and below products expect fonts to have a digital   [0m
    [0;30;107m  signature declared in a DSIG table in order to implement OpenType         [0m
    [0;30;107m  features. The EOL date for Microsoft Office 2013 products is 4/11/2023.   [0m
    [0;30;107m  This issue does not impact Microsoft Office 2016 and above products.      [0m
    [0;30;107m                                                                            [0m
    [0;30;107m  This checks verifies that this signature is available in the font.        [0m
    [0;30;107m                                                                            [0m
    [0;30;107m  A fake signature is enough to address this issue. If needed, a dummy      [0m
    [0;30;107m  table can be added to the font with the `gftools fix-dsig` script         [0m
    [0;30;107m  available at https://github.com/googlefonts/gftools                       [0m
    [0;30;107m                                                                            [0m
    [0;30;107m  Reference: https://github.com/googlefonts/fontbakery/issues/1845          [0m

    * [1;91;107mFAIL[0m: This font lacks a digital signature (DSIG table). Some applications may require one (even if only a dummy placeholder) in order to work properly. You can add a DSIG table by running the `gftools fix-dsig` script. [code: lacks-signature]


    Result: [1;91;107mFAIL[0m

 >> [1;35;107mcom.google.fonts/check/gdef_mark_chars[0m
    [0;36;107mCheck mark characters are in GDEF mark glyph class[0m
    with NotoSerif-SemiCondensedSemiBold.ttf

    [1;35;107m  Rationale:                                                                [0m
    [0;30;107m  Mark characters should be in the GDEF mark glyph class.                   [0m

    * [1;30;103mWARN[0m: The following mark characters could be in the GDEF mark glyph class:
	 U+0488, U+0489, U+1ABE, U+A670, U+A671 and U+A672 [code: mark-chars]


    Result: [1;30;103mWARN[0m

 >> [1;35;107mcom.google.fonts/check/glyf_nested_components[0m
    [0;36;107mCheck glyphs do not have components which are themselves components.[0m
    with NotoSerif-SemiCondensedSemiBold.ttf

    [1;35;107m  Rationale:                                                                [0m
    [0;30;107m  There have been bugs rendering variable fonts with nested components.     [0m
    [0;30;107m  Additionally, some static fonts with nested components have been reported [0m
    [0;30;107m  to have rendering and printing issues.                                    [0m
    [0;30;107m                                                                            [0m
    [0;30;107m  For more info, see:                                                       [0m
    [0;30;107m  * https://github.com/googlefonts/fontbakery/issues/2961                   [0m
    [0;30;107m  * https://github.com/arrowtype/recursive/issues/412                       [0m

    * [1;91;107mFAIL[0m: The following glyphs have components which themselves are component glyphs:
	* onequarter
	* onequarter
	* onehalf
	* onehalf
	* threequarters
	* threequarters
	* oneeighth
	* oneeighth
	* threeeighths
	* threeeighths and 70 more. [code: found-nested-components]


    Result: [1;91;107mFAIL[0m

 >> [1;35;107mcom.google.fonts/check/outline_colinear_vectors[0m
    [0;36;107mDo any segments have colinear vectors?[0m
    with NotoSerif-SemiCondensedSemiBold.ttf

    [1;35;107m  Rationale:                                                                [0m
    [0;30;107m  This test looks for consecutive line segments which have the same angle.  [0m
    [0;30;107m  This normally happens if an outline point has been added by accident.     [0m
    [0;30;107m                                                                            [0m
    [0;30;107m  This test is not run for variable fonts, as they may legitimately have    [0m
    [0;30;107m  colinear vectors.                                                         [0m

    * [1;30;103mWARN[0m: The following glyphs have colinear vectors:
	* brevemacron: L<<-188.0,750.0>--<-188.0,750.0>> -> L<<-188.0,750.0>--<81.0,750.0>>
	* uni0290: L<<449.0,172.0>--<447.0,0.0>> -> L<<447.0,0.0>--<447.0,-41.0>>
	* uni04CE: L<<734.0,48.0>--<745.0,48.0>> -> L<<745.0,48.0>--<745.0,48.0>>
	* uni04CE: L<<745.0,48.0>--<745.0,48.0>> -> L<<745.0,48.0>--<762.0,48.0>>
	* uni1D8E: L<<450.0,172.0>--<446.0,0.0>> -> L<<446.0,0.0>--<446.0,-42.0>>
	* uni1D92: L<<457.0,95.0>--<457.0,95.0>> -> L<<457.0,95.0>--<457.0,95.0>>
	* uni1D93: L<<441.0,95.0>--<441.0,95.0>> -> L<<441.0,95.0>--<441.0,95.0>>
	* uni1DBC: L<<291.8609619140625,390.19580078125>--<290.5609130859375,287.0>> -> L<<290.5609130859375,287.0>--<290.5609130859375,262.4010009765625>>
	* uniA7C4: L<<567.0,113.0>--<567.0,113.0>> -> L<<567.0,113.0>--<567.0,113.0>>
	* uniA7C6: L<<556.0,192.0>--<552.0,0.0>> -> L<<552.0,0.0>--<552.0,-61.0>> and uniAB66: L<<909.0,172.0>--<904.0,0.0>> -> L<<904.0,0.0>--<904.0,-57.0>> [code: found-colinear-vectors]


    Result: [1;30;103mWARN[0m

 >> [1;35;107mcom.google.fonts/check/outline_jaggy_segments[0m
    [0;36;107mDo outlines contain any jaggy segments?[0m
    with NotoSerif-SemiCondensedSemiBold.ttf

    [1;35;107m  Rationale:                                                                [0m
    [0;30;107m  This test heuristically detects outline segments which form a             [0m
    [0;30;107m  particularly small angle, indicative of an outline error. This may cause  [0m
    [0;30;107m  false positives in cases such as extreme ink traps, so should be regarded [0m
    [0;30;107m  as advisory and backed up by manual inspection.                           [0m

    * [1;30;103mWARN[0m: The following glyphs have jaggy segments:
	* scriptg: B<<93.5,165.0>-<104.0,193.0>-<117.0,209.0>>/L<<117.0,209.0>--<52.0,145.0>> = 6.350285546882426
	* uni0247: L<<211.0,-2.0>--<156.0,-174.0>>/L<<156.0,-174.0>--<186.0,6.0>> = 8.270261700013789
	* uni0247: L<<302.0,546.0>--<356.0,714.0>>/L<<356.0,714.0>--<327.0,541.0>> = 8.302868709554588
	* uni03D7: B<<220.0,258.5>-<203.0,196.0>-<186.0,154.0>>/L<<186.0,154.0>--<458.0,536.0>> = 13.416231609494835
	* uni03F0: B<<220.0,258.5>-<203.0,196.0>-<186.0,154.0>>/L<<186.0,154.0>--<458.0,536.0>> = 13.416231609494835
	* uni1D95: L<<472.0,-42.0>--<472.0,218.0>>/B<<472.0,218.0>-<461.0,105.0>-<404.0,47.5>> = 5.559947263309491
	* uni2133: B<<1101.5,668.0>-<1119.0,688.0>-<1125.0,694.0>>/B<<1125.0,694.0>-<1109.0,683.0>-<1066.5,648.5>> = 10.491477012331565
	* uni2C66: L<<213.0,476.0>--<213.0,371.0>>/L<<213.0,371.0>--<238.0,476.0>> = 13.392497753751098
	* uniA65E: L<<302.0,-123.0>--<305.0,461.0>>/L<<305.0,461.0>--<234.0,188.0>> = 14.28382279177366 and uniA7A0: L<<680.0,379.0>--<481.0,333.0>>/L<<481.0,333.0>--<673.0,333.0>> = 13.015642765105873 [code: found-jaggy-segments]


    Result: [1;30;103mWARN[0m

 >> [1;35;107mcom.google.fonts/check/outline_semi_vertical[0m
    [0;36;107mDo outlines contain any semi-vertical or semi-horizontal lines?[0m
    with NotoSerif-SemiCondensedSemiBold.ttf

    [1;35;107m  Rationale:                                                                [0m
    [0;30;107m  This test detects line segments which are nearly, but not quite, exactly  [0m
    [0;30;107m  horizontal or vertical. Sometimes such lines are created by design, but   [0m
    [0;30;107m  often they are indicative of a design error.                              [0m
    [0;30;107m                                                                            [0m
    [0;30;107m  This test is disabled for italic styles, which often contain              [0m
    [0;30;107m  nearly-upright lines.                                                     [0m

    * [1;30;103mWARN[0m: The following glyphs have semi-vertical/semi-horizontal lines:
	* h: L<<219.0,314.0>--<220.0,114.0>>
	* hcircumflex: L<<219.0,314.0>--<220.0,114.0>>
	* sterling: L<<389.0,339.0>--<244.0,340.0>>
	* uni01A2: L<<623.0,474.0>--<622.0,331.0>>
	* uni01A5: L<<93.0,-123.0>--<92.0,563.0>>
	* uni021F: L<<219.0,314.0>--<220.0,114.0>>
	* uni02B0: L<<142.3553466796875,475.392333984375>--<143.00537109375,355.397216796875>>
	* uni036A: L<<-28.44732666015625,745.607666015625>--<-27.997314453125,665.602783203125>>
	* uni04BB: L<<219.0,314.0>--<220.0,114.0>>
	* uni052C: L<<150.0,56.0>--<477.0,57.0>> and 14 more. [code: found-semi-vertical]


    Result: [1;30;103mWARN[0m


Total:

    [1;97;101mERROR[0m: 0
    [1;91;107mFAIL[0m: 3
    [1;30;103mWARN[0m: 4
    [0;36;107mINFO[0m: 3
    [0;34;107mSKIP[0m: 18
    [0;32;107mPASS[0m: 49


DONE!

    [1;30;107mMeaning of check results:[0m

    An [1;97;101mERROR[0m is something wrong with FontBakery itself, possibly a bug.
    A [1;91;107mFAIL[0m is a problem with the font that must be fixed.
    A [1;30;103mWARN[0m is something that you should consider addressing.
    An [0;36;107mINFO[0m result simply prints something useful. Typically stats.
    A [0;32;107mPASS[0m means the font looks good for the given checking routine.
    And a [0;34;107mSKIP[0m happens when the check does not apply to the given font.

    If you get [1;97;101mERROR[0ms, please help us improve the tool by reporting them at
    [1;36;107mhttps://github.com/googlefonts/fontbakery/issues[0m

    (but other kinds of bug reports and/or
     feature requests are also always welcome, of course!)

