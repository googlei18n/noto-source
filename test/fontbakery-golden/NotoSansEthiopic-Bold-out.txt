Start ... running 77 individual check executions.
 >> [1;35;107mcom.google.fonts/check/family/win_ascent_and_descent[0m
    [0;36;107mChecking OS/2 usWinAscent & usWinDescent.[0m
    with NotoSansEthiopic-Bold.ttf

    [1;35;107m  Rationale:                                                                [0m
    [0;30;107m  A font's winAscent and winDescent values should be greater than the head  [0m
    [0;30;107m  table's yMax, abs(yMin) values. If they are less than these values,       [0m
    [0;30;107m  clipping can occur on Windows platforms                                   [0m
    [0;30;107m  (https://github.com/RedHatBrand/Overpass/issues/33).                      [0m
    [0;30;107m                                                                            [0m
    [0;30;107m  If the font includes tall/deep writing systems such as Arabic or          [0m
    [0;30;107m  Devanagari, the winAscent and winDescent can be greater than the yMax and [0m
    [0;30;107m  abs(yMin) to accommodate vowel marks.                                     [0m
    [0;30;107m                                                                            [0m
    [0;30;107m  When the win Metrics are significantly greater than the upm, the          [0m
    [0;30;107m  linespacing can appear too loose. To counteract this, enabling the OS/2   [0m
    [0;30;107m  fsSelection bit 7 (Use_Typo_Metrics), will force Windows to use the OS/2  [0m
    [0;30;107m  typo values instead. This means the font developer can control the        [0m
    [0;30;107m  linespacing with the typo values, whilst avoiding clipping by setting the [0m
    [0;30;107m  win values to values greater than the yMax and abs(yMin).                 [0m

    * [1;91;107mFAIL[0m: OS/2.usWinDescent value 293 is too large. It should be less than double the yMin. Current absolute yMin value is 108 [code: descent]


    Result: [1;91;107mFAIL[0m

 >> [1;35;107mcom.google.fonts/check/required_tables[0m
    [0;36;107mFont contains all required tables?[0m
    with NotoSansEthiopic-Bold.ttf

    [1;35;107m  Rationale:                                                                [0m
    [0;30;107m  Depending on the typeface and coverage of a font, certain tables are      [0m
    [0;30;107m  recommended for optimum quality. For example, the performance of a        [0m
    [0;30;107m  non-linear font is improved if the VDMX, LTSH, and hdmx tables are        [0m
    [0;30;107m  present. Non-monospaced Latin fonts should have a kern table. A gasp      [0m
    [0;30;107m  table is necessary if a designer wants to influence the sizes at which    [0m
    [0;30;107m  grayscaling is used under Windows. A DSIG table containing a digital      [0m
    [0;30;107m  signature helps ensure the integrity of the font file. Etc.               [0m

    * [0;36;107mINFO[0m: This font contains the following optional tables [loca, GPOS, GSUB]


    Result: [0;36;107mINFO[0m

 >> [1;35;107mcom.google.fonts/check/superfamily/list[0m
    [0;36;107mList all superfamily filepaths[0m
    with NotoSansEthiopic-Bold.ttf

    [1;35;107m  Rationale:                                                                [0m
    [0;30;107m  This is a merely informative check that lists all sibling families        [0m
    [0;30;107m  detected by fontbakery.                                                   [0m
    [0;30;107m                                                                            [0m
    [0;30;107m  Only the fontfiles in these directories will be considered in             [0m
    [0;30;107m  superfamily-level checks.                                                 [0m

    * [0;36;107mINFO[0m: . [code: family-path]


    Result: [0;36;107mINFO[0m

 >> [1;35;107mcom.google.fonts/check/dsig[0m
    [0;36;107mDoes the font have a DSIG table?[0m
    with NotoSansEthiopic-Bold.ttf

    [1;35;107m  Rationale:                                                                [0m
    [0;30;107m  Microsoft Office 2013 and below products expect fonts to have a digital   [0m
    [0;30;107m  signature declared in a DSIG table in order to implement OpenType         [0m
    [0;30;107m  features. The EOL date for Microsoft Office 2013 products is 4/11/2023.   [0m
    [0;30;107m  This issue does not impact Microsoft Office 2016 and above products.      [0m
    [0;30;107m                                                                            [0m
    [0;30;107m  This checks verifies that this signature is available in the font.        [0m
    [0;30;107m                                                                            [0m
    [0;30;107m  A fake signature is enough to address this issue. If needed, a dummy      [0m
    [0;30;107m  table can be added to the font with the `gftools fix-dsig` script         [0m
    [0;30;107m  available at https://github.com/googlefonts/gftools                       [0m
    [0;30;107m                                                                            [0m
    [0;30;107m  Reference: https://github.com/googlefonts/fontbakery/issues/1845          [0m

    * [1;91;107mFAIL[0m: This font lacks a digital signature (DSIG table). Some applications may require one (even if only a dummy placeholder) in order to work properly. You can add a DSIG table by running the `gftools fix-dsig` script. [code: lacks-signature]


    Result: [1;91;107mFAIL[0m

 >> [1;35;107mcom.google.fonts/check/outline_alignment_miss[0m
    [0;36;107mAre there any misaligned on-curve points?[0m
    with NotoSansEthiopic-Bold.ttf

    [1;35;107m  Rationale:                                                                [0m
    [0;30;107m  This test heuristically looks for on-curve points which are close to, but [0m
    [0;30;107m  do not sit on, significant boundary coordinates. For example, a point     [0m
    [0;30;107m  which has a Y-coordinate of 1 or -1 might be a misplaced baseline point.  [0m
    [0;30;107m  As well as the baseline, the test also checks for points near the         [0m
    [0;30;107m  x-height (but only for lower case Latin letters), cap-height, ascender    [0m
    [0;30;107m  and descender Y coordinates.                                              [0m
    [0;30;107m                                                                            [0m
    [0;30;107m  Not all such misaligned curve points are a mistake, and sometimes the     [0m
    [0;30;107m  design may call for points in locations near the boundaries. As this test [0m
    [0;30;107m  is liable to generate significant numbers of false positives, the test    [0m
    [0;30;107m  will pass if there are more than 100 reported misalignments.              [0m

    * [1;30;103mWARN[0m: The following glyphs have on-curve points which have potentially incorrect y coordinates:
	* jaa.eth: X=116.0,Y=713.0 (should be at cap-height 714?)
	* jaa.eth: X=710.0,Y=713.0 (should be at cap-height 714?)
	* jee.eth: X=126.0,Y=712.0 (should be at cap-height 714?)
	* jee.eth: X=720.0,Y=712.0 (should be at cap-height 714?)
	* ji.eth: X=116.0,Y=713.0 (should be at cap-height 714?)
	* ji.eth: X=710.0,Y=713.0 (should be at cap-height 714?)
	* jo.eth: X=86.0,Y=713.0 (should be at cap-height 714?)
	* jo.eth: X=680.0,Y=713.0 (should be at cap-height 714?)
	* joa.eth: X=148.0,Y=713.0 (should be at cap-height 714?)
	* joa.eth: X=742.0,Y=713.0 (should be at cap-height 714?) and 17 more. [code: found-misalignments]


    Result: [1;30;103mWARN[0m

 >> [1;35;107mcom.google.fonts/check/outline_colinear_vectors[0m
    [0;36;107mDo any segments have colinear vectors?[0m
    with NotoSansEthiopic-Bold.ttf

    [1;35;107m  Rationale:                                                                [0m
    [0;30;107m  This test looks for consecutive line segments which have the same angle.  [0m
    [0;30;107m  This normally happens if an outline point has been added by accident.     [0m
    [0;30;107m                                                                            [0m
    [0;30;107m  This test is not run for variable fonts, as they may legitimately have    [0m
    [0;30;107m  colinear vectors.                                                         [0m

    * [1;30;103mWARN[0m: The following glyphs have colinear vectors:
	* ddee.eth: L<<410.0,240.0>--<597.0,240.0>> -> L<<597.0,240.0>--<597.0,240.0>>
	* ddee.eth: L<<597.0,240.0>--<597.0,240.0>> -> L<<597.0,240.0>--<604.0,240.0>>
	* ddhee.eth: L<<410.0,240.0>--<597.0,240.0>> -> L<<597.0,240.0>--<597.0,240.0>>
	* ddhee.eth: L<<597.0,240.0>--<597.0,240.0>> -> L<<597.0,240.0>--<604.0,240.0>>
	* dee.eth: L<<404.0,239.0>--<601.0,239.0>> -> L<<601.0,239.0>--<601.0,239.0>>
	* dee.eth: L<<601.0,239.0>--<601.0,239.0>> -> L<<601.0,239.0>--<604.0,239.0>>
	* fo.eth: L<<387.0,714.0>--<476.0,714.0>> -> L<<476.0,714.0>--<476.0,714.0>>
	* fo.eth: L<<476.0,714.0>--<476.0,714.0>> -> L<<476.0,714.0>--<477.0,714.0>>
	* ge.eth: L<<208.0,714.0>--<208.0,714.0>> -> L<<208.0,714.0>--<343.0,714.0>>
	* gge.eth: L<<222.0,526.0>--<224.0,526.0>> -> L<<224.0,526.0>--<224.0,526.0>> and 14 more. [code: found-colinear-vectors]


    Result: [1;30;103mWARN[0m

 >> [1;35;107mcom.google.fonts/check/outline_jaggy_segments[0m
    [0;36;107mDo outlines contain any jaggy segments?[0m
    with NotoSansEthiopic-Bold.ttf

    [1;35;107m  Rationale:                                                                [0m
    [0;30;107m  This test heuristically detects outline segments which form a             [0m
    [0;30;107m  particularly small angle, indicative of an outline error. This may cause  [0m
    [0;30;107m  false positives in cases such as extreme ink traps, so should be regarded [0m
    [0;30;107m  as advisory and backed up by manual inspection.                           [0m

    * [1;30;103mWARN[0m: The following glyphs have jaggy segments:
	* ccha.eth: B<<1266.0,42.0>-<1222.0,3.0>-<1133.0,0.0>>/L<<1133.0,0.0>--<1133.0,0.0>> = 1.9305874411669464
	* ccha.eth: B<<502.0,42.0>-<458.0,3.0>-<369.0,0.0>>/L<<369.0,0.0>--<369.0,0.0>> = 1.9305874411669464
	* ccha.eth: B<<884.0,42.0>-<840.0,3.0>-<751.0,0.0>>/L<<751.0,0.0>--<751.0,0.0>> = 1.9305874411669464
	* cchee.eth: B<<1243.0,42.0>-<1199.0,3.0>-<1110.0,0.0>>/L<<1110.0,0.0>--<1110.0,0.0>> = 1.9305874411669464
	* cchee.eth: B<<479.0,42.0>-<435.0,3.0>-<346.0,0.0>>/L<<346.0,0.0>--<346.0,0.0>> = 1.9305874411669464
	* cchee.eth: B<<861.0,42.0>-<817.0,3.0>-<728.0,0.0>>/L<<728.0,0.0>--<728.0,0.0>> = 1.9305874411669464
	* cchu.eth: B<<1266.0,42.0>-<1222.0,3.0>-<1133.0,0.0>>/L<<1133.0,0.0>--<1133.0,0.0>> = 1.9305874411669464
	* cchu.eth: B<<502.0,42.0>-<458.0,3.0>-<369.0,0.0>>/L<<369.0,0.0>--<369.0,0.0>> = 1.9305874411669464
	* cchu.eth: B<<884.0,42.0>-<840.0,3.0>-<751.0,0.0>>/L<<751.0,0.0>--<751.0,0.0>> = 1.9305874411669464
	* cha.eth: B<<1125.0,42.0>-<1081.0,3.0>-<992.0,0.0>>/L<<992.0,0.0>--<992.0,0.0>> = 1.9305874411669464 and 12 more. [code: found-jaggy-segments]


    Result: [1;30;103mWARN[0m


Total:

    [1;97;101mERROR[0m: 0
    [1;91;107mFAIL[0m: 2
    [1;30;103mWARN[0m: 3
    [0;36;107mINFO[0m: 2
    [0;34;107mSKIP[0m: 17
    [0;32;107mPASS[0m: 53


DONE!

    [1;30;107mMeaning of check results:[0m

    An [1;97;101mERROR[0m is something wrong with FontBakery itself, possibly a bug.
    A [1;91;107mFAIL[0m is a problem with the font that must be fixed.
    A [1;30;103mWARN[0m is something that you should consider addressing.
    An [0;36;107mINFO[0m result simply prints something useful. Typically stats.
    A [0;32;107mPASS[0m means the font looks good for the given checking routine.
    And a [0;34;107mSKIP[0m happens when the check does not apply to the given font.

    If you get [1;97;101mERROR[0ms, please help us improve the tool by reporting them at
    [1;36;107mhttps://github.com/googlefonts/fontbakery/issues[0m

    (but other kinds of bug reports and/or
     feature requests are also always welcome, of course!)

