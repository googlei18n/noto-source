Start ... running 71 individual check executions.
 >> [1;35;107mcom.google.fonts/check/ots[0m
    [0;36;107mChecking with ots-sanitize.[0m
    with NotoSansBengaliUI-Medium.otf

    * [1;30;103mWARN[0m: ots-sanitize passed this file, however warnings were printed:

WARNING: Layout: tags aren't arranged alphabetically.
WARNING: Layout: tags aren't arranged alphabetically.
WARNING: Layout: tags aren't arranged alphabetically.
WARNING: Layout: tags aren't arranged alphabetically.



    Result: [1;30;103mWARN[0m

 >> [1;35;107mcom.google.fonts/check/superfamily/list[0m
    [0;36;107mList all superfamily filepaths[0m
    with NotoSansBengaliUI-Medium.otf

    [1;35;107m  Rationale:                                                                [0m
    [0;30;107m  This is a merely informative check that lists all sibling families        [0m
    [0;30;107m  detected by fontbakery.                                                   [0m
    [0;30;107m                                                                            [0m
    [0;30;107m  Only the fontfiles in these directories will be considered in             [0m
    [0;30;107m  superfamily-level checks.                                                 [0m

    * [0;36;107mINFO[0m: . [code: family-path]


    Result: [0;36;107mINFO[0m

 >> [1;35;107mcom.google.fonts/check/code_pages[0m
    [0;36;107mCheck code page character ranges[0m
    with NotoSansBengaliUI-Medium.otf

    [1;35;107m  Rationale:                                                                [0m
    [0;30;107m  At least some programs (such as Word and Sublime Text) under Windows 7 do [0m
    [0;30;107m  not recognize fonts unless code page bits are properly set on the         [0m
    [0;30;107m  ulCodePageRange1 (and/or ulCodePageRange2) fields of the OS/2 table.      [0m
    [0;30;107m                                                                            [0m
    [0;30;107m  More specifically, the fonts are selectable in the font menu, but         [0m
    [0;30;107m  whichever Windows API these applications use considers them unsuitable    [0m
    [0;30;107m  for any character set, so anything set in these fonts is rendered with a  [0m
    [0;30;107m  fallback font of Arial.                                                   [0m
    [0;30;107m                                                                            [0m
    [0;30;107m  This check currently does not identify which code pages should be set.    [0m
    [0;30;107m  Auto-detecting coverage is not trivial since the OpenType specification   [0m
    [0;30;107m  leaves the interpretation of whether a given code page is "functional" or [0m
    [0;30;107m  not open to the font developer to decide.                                 [0m
    [0;30;107m                                                                            [0m
    [0;30;107m  So here we simply detect as a FAIL when a given font has no code page     [0m
    [0;30;107m  declared at all.                                                          [0m

    * [1;91;107mFAIL[0m: No code pages defined in the OS/2 table ulCodePageRange1 and CodePageRange2 fields.


    Result: [1;91;107mFAIL[0m

 >> [1;35;107mcom.google.fonts/check/name/match_familyname_fullfont[0m
    [0;36;107mDoes full font name begin with the font family name?[0m
    with NotoSansBengaliUI-Medium.otf

    * [1;91;107mFAIL[0m: On the 'name' table, the full font name (NameID 4 - FULL_FONT_NAME: 'Noto Sans Bengali Med') does not begin with font family name (NameID 1 - FONT_FAMILY_NAME: 'Noto Sans Bengali UI Medium') [code: does-not]


    Result: [1;91;107mFAIL[0m

 >> [1;35;107mcom.google.fonts/check/dsig[0m
    [0;36;107mDoes the font have a DSIG table?[0m
    with NotoSansBengaliUI-Medium.otf

    [1;35;107m  Rationale:                                                                [0m
    [0;30;107m  Microsoft Office 2013 and below products expect fonts to have a digital   [0m
    [0;30;107m  signature declared in a DSIG table in order to implement OpenType         [0m
    [0;30;107m  features. The EOL date for Microsoft Office 2013 products is 4/11/2023.   [0m
    [0;30;107m  This issue does not impact Microsoft Office 2016 and above products.      [0m
    [0;30;107m                                                                            [0m
    [0;30;107m  This checks verifies that this signature is available in the font.        [0m
    [0;30;107m                                                                            [0m
    [0;30;107m  A fake signature is enough to address this issue. If needed, a dummy      [0m
    [0;30;107m  table can be added to the font with the `gftools fix-dsig` script         [0m
    [0;30;107m  available at https://github.com/googlefonts/gftools                       [0m
    [0;30;107m                                                                            [0m
    [0;30;107m  Reference: https://github.com/googlefonts/fontbakery/issues/1845          [0m

    * [1;91;107mFAIL[0m: This font lacks a digital signature (DSIG table). Some applications may require one (even if only a dummy placeholder) in order to work properly. You can add a DSIG table by running the `gftools fix-dsig` script. [code: lacks-signature]


    Result: [1;91;107mFAIL[0m

 >> [1;35;107mcom.google.fonts/check/gdef_mark_chars[0m
    [0;36;107mCheck mark characters are in GDEF mark glyph class[0m
    with NotoSansBengaliUI-Medium.otf

    [1;35;107m  Rationale:                                                                [0m
    [0;30;107m  Mark characters should be in the GDEF mark glyph class.                   [0m

    * [1;30;103mWARN[0m: The following mark characters could be in the GDEF mark glyph class:
	 U+0982, U+0983, U+09BE, U+09BF, U+09C0, U+09C7, U+09C8, U+09CB, U+09CC and U+09D7 [code: mark-chars]


    Result: [1;30;103mWARN[0m


Total:

    [1;97;101mERROR[0m: 0
    [1;91;107mFAIL[0m: 3
    [1;30;103mWARN[0m: 2
    [0;36;107mINFO[0m: 1
    [0;34;107mSKIP[0m: 23
    [0;32;107mPASS[0m: 42


DONE!

    [1;30;107mMeaning of check results:[0m

    An [1;97;101mERROR[0m is something wrong with FontBakery itself, possibly a bug.
    A [1;91;107mFAIL[0m is a problem with the font that must be fixed.
    A [1;30;103mWARN[0m is something that you should consider addressing.
    An [0;36;107mINFO[0m result simply prints something useful. Typically stats.
    A [0;32;107mPASS[0m means the font looks good for the given checking routine.
    And a [0;34;107mSKIP[0m happens when the check does not apply to the given font.

    If you get [1;97;101mERROR[0ms, please help us improve the tool by reporting them at
    [1;36;107mhttps://github.com/googlefonts/fontbakery/issues[0m

    (but other kinds of bug reports and/or
     feature requests are also always welcome, of course!)

