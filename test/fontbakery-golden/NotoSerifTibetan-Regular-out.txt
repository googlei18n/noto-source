Start ... running 77 individual check executions.
 >> [1;35;107mcom.google.fonts/check/required_tables[0m
    [0;36;107mFont contains all required tables?[0m
    with NotoSerifTibetan-Regular.ttf

    [1;35;107m  Rationale:                                                                [0m
    [0;30;107m  Depending on the typeface and coverage of a font, certain tables are      [0m
    [0;30;107m  recommended for optimum quality. For example, the performance of a        [0m
    [0;30;107m  non-linear font is improved if the VDMX, LTSH, and hdmx tables are        [0m
    [0;30;107m  present. Non-monospaced Latin fonts should have a kern table. A gasp      [0m
    [0;30;107m  table is necessary if a designer wants to influence the sizes at which    [0m
    [0;30;107m  grayscaling is used under Windows. A DSIG table containing a digital      [0m
    [0;30;107m  signature helps ensure the integrity of the font file. Etc.               [0m

    * [0;36;107mINFO[0m: This font contains the following optional tables [loca, GPOS, GSUB]


    Result: [0;36;107mINFO[0m

 >> [1;35;107mcom.google.fonts/check/superfamily/list[0m
    [0;36;107mList all superfamily filepaths[0m
    with NotoSerifTibetan-Regular.ttf

    [1;35;107m  Rationale:                                                                [0m
    [0;30;107m  This is a merely informative check that lists all sibling families        [0m
    [0;30;107m  detected by fontbakery.                                                   [0m
    [0;30;107m                                                                            [0m
    [0;30;107m  Only the fontfiles in these directories will be considered in             [0m
    [0;30;107m  superfamily-level checks.                                                 [0m

    * [0;36;107mINFO[0m: . [code: family-path]


    Result: [0;36;107mINFO[0m

 >> [1;35;107mcom.google.fonts/check/dsig[0m
    [0;36;107mDoes the font have a DSIG table?[0m
    with NotoSerifTibetan-Regular.ttf

    [1;35;107m  Rationale:                                                                [0m
    [0;30;107m  Microsoft Office 2013 and below products expect fonts to have a digital   [0m
    [0;30;107m  signature declared in a DSIG table in order to implement OpenType         [0m
    [0;30;107m  features. The EOL date for Microsoft Office 2013 products is 4/11/2023.   [0m
    [0;30;107m  This issue does not impact Microsoft Office 2016 and above products.      [0m
    [0;30;107m                                                                            [0m
    [0;30;107m  This checks verifies that this signature is available in the font.        [0m
    [0;30;107m                                                                            [0m
    [0;30;107m  A fake signature is enough to address this issue. If needed, a dummy      [0m
    [0;30;107m  table can be added to the font with the `gftools fix-dsig` script         [0m
    [0;30;107m  available at https://github.com/googlefonts/gftools                       [0m
    [0;30;107m                                                                            [0m
    [0;30;107m  Reference: https://github.com/googlefonts/fontbakery/issues/1845          [0m

    * [1;91;107mFAIL[0m: This font lacks a digital signature (DSIG table). Some applications may require one (even if only a dummy placeholder) in order to work properly. You can add a DSIG table by running the `gftools fix-dsig` script. [code: lacks-signature]


    Result: [1;91;107mFAIL[0m

 >> [1;35;107mcom.google.fonts/check/gdef_mark_chars[0m
    [0;36;107mCheck mark characters are in GDEF mark glyph class[0m
    with NotoSerifTibetan-Regular.ttf

    [1;35;107m  Rationale:                                                                [0m
    [0;30;107m  Mark characters should be in the GDEF mark glyph class.                   [0m

    * [1;30;103mWARN[0m: The following mark characters could be in the GDEF mark glyph class:
	 U+0F3E, U+0F3F and U+0F7F [code: mark-chars]


    Result: [1;30;103mWARN[0m

 >> [1;35;107mcom.google.fonts/check/outline_colinear_vectors[0m
    [0;36;107mDo any segments have colinear vectors?[0m
    with NotoSerifTibetan-Regular.ttf

    [1;35;107m  Rationale:                                                                [0m
    [0;30;107m  This test looks for consecutive line segments which have the same angle.  [0m
    [0;30;107m  This normally happens if an outline point has been added by accident.     [0m
    [0;30;107m                                                                            [0m
    [0;30;107m  This test is not run for variable fonts, as they may legitimately have    [0m
    [0;30;107m  colinear vectors.                                                         [0m

    * [1;30;103mWARN[0m: The following glyphs have colinear vectors:
	* uni0F33: L<<163.0,405.0>--<352.0,580.0>> -> L<<352.0,580.0>--<357.0,585.0>>
	* uni0F33: L<<393.0,552.0>--<389.0,548.0>> -> L<<389.0,548.0>--<191.0,365.0>>
	* uni0F620FA70F74: L<<353.0,-291.0>--<340.0,-214.0>> -> L<<340.0,-214.0>--<338.0,-205.0>>
	* uni0F660F990F74: L<<423.0,-208.0>--<423.0,-208.0>> -> L<<423.0,-208.0>--<423.0,-208.0>> and uni0FB70F74.3: L<<339.0,-44.0>--<327.0,29.0>> -> L<<327.0,29.0>--<324.0,41.0>> [code: found-colinear-vectors]


    Result: [1;30;103mWARN[0m

 >> [1;35;107mcom.google.fonts/check/outline_jaggy_segments[0m
    [0;36;107mDo outlines contain any jaggy segments?[0m
    with NotoSerifTibetan-Regular.ttf

    [1;35;107m  Rationale:                                                                [0m
    [0;30;107m  This test heuristically detects outline segments which form a             [0m
    [0;30;107m  particularly small angle, indicative of an outline error. This may cause  [0m
    [0;30;107m  false positives in cases such as extreme ink traps, so should be regarded [0m
    [0;30;107m  as advisory and backed up by manual inspection.                           [0m

    * [1;30;103mWARN[0m: The following glyphs have jaggy segments:
	* uni0F2C: B<<447.0,573.0>-<447.0,531.0>-<415.0,499.0>>/B<<415.0,499.0>-<464.0,529.0>-<515.0,529.0>> = 13.523160650415996
	* uni0F4F0FB60FA30F71: L<<141.0,3.0>--<503.0,3.0>>/L<<503.0,3.0>--<499.0,4.0>> = 14.036243467926484
	* uni0F4F0FB60FA3: L<<141.0,-7.0>--<503.0,-7.0>>/L<<503.0,-7.0>--<499.0,-6.0>> = 14.036243467926484
	* uni0F65.3: L<<123.0,502.0>--<123.0,509.0>>/B<<123.0,509.0>-<110.0,445.0>-<110.0,328.0>> = 11.481991354748077
	* uni0F69.3: L<<169.0,206.0>--<169.0,213.0>>/B<<169.0,213.0>-<156.0,149.0>-<156.0,32.0>> = 11.481991354748077
	* uni0F690FB10F71: L<<167.0,138.0>--<167.0,147.0>>/B<<167.0,147.0>-<158.0,90.0>-<156.0,3.0>> = 8.972626614896399
	* uni0F7B.2: B<<317.0,839.0>-<379.0,813.0>-<468.0,762.0>>/B<<468.0,762.0>-<389.0,835.0>-<334.0,873.5>> = 12.925335351060049
	* uni0F7B0F7E: B<<317.0,839.0>-<379.0,813.0>-<468.0,762.0>>/B<<468.0,762.0>-<389.0,835.0>-<334.0,873.5>> = 12.925335351060049
	* uni0F7B0F82: B<<317.0,839.0>-<379.0,813.0>-<468.0,762.0>>/B<<468.0,762.0>-<389.0,835.0>-<334.0,873.5>> = 12.925335351060049
	* uni0F7B0F83: B<<317.0,839.0>-<379.0,813.0>-<468.0,762.0>>/B<<468.0,762.0>-<389.0,835.0>-<334.0,873.5>> = 12.925335351060049 and 4 more. [code: found-jaggy-segments]


    Result: [1;30;103mWARN[0m


Total:

    [1;97;101mERROR[0m: 0
    [1;91;107mFAIL[0m: 1
    [1;30;103mWARN[0m: 3
    [0;36;107mINFO[0m: 2
    [0;34;107mSKIP[0m: 17
    [0;32;107mPASS[0m: 54


DONE!

    [1;30;107mMeaning of check results:[0m

    An [1;97;101mERROR[0m is something wrong with FontBakery itself, possibly a bug.
    A [1;91;107mFAIL[0m is a problem with the font that must be fixed.
    A [1;30;103mWARN[0m is something that you should consider addressing.
    An [0;36;107mINFO[0m result simply prints something useful. Typically stats.
    A [0;32;107mPASS[0m means the font looks good for the given checking routine.
    And a [0;34;107mSKIP[0m happens when the check does not apply to the given font.

    If you get [1;97;101mERROR[0ms, please help us improve the tool by reporting them at
    [1;36;107mhttps://github.com/googlefonts/fontbakery/issues[0m

    (but other kinds of bug reports and/or
     feature requests are also always welcome, of course!)

