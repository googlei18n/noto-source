Start ... running 77 individual check executions.
 >> [1;35;107mcom.google.fonts/check/unicode_range_bits[0m
    [0;36;107mEnsure UnicodeRange bits are properly set.[0m
    with NotoSansCaucasianAlbanian-Regular.ttf

    [1;35;107m  Rationale:                                                                [0m
    [0;30;107m  When the UnicodeRange bits on the OS/2 table are not properly set, some   [0m
    [0;30;107m  programs running on Windows may not recognize the font and use a system   [0m
    [0;30;107m  fallback font instead. For that reason, this check calculates the proper  [0m
    [0;30;107m  settings by inspecting the glyphs declared on the cmap table and then     [0m
    [0;30;107m  ensures that their corresponding ranges are enabled.                      [0m

    * [1;30;103mWARN[0m: UnicodeRange bit 57 "Non-Plane 0 *" should be 0 because cmap has none of the 2048 codepoints in this range. [code: bad-range-bit]


    Result: [1;30;103mWARN[0m

 >> [1;35;107mcom.google.fonts/check/whitespace_glyphnames[0m
    [0;36;107mFont has **proper** whitespace glyph names?[0m
    with NotoSansCaucasianAlbanian-Regular.ttf

    [1;35;107m  Rationale:                                                                [0m
    [0;30;107m  This check enforces adherence to recommended whitespace (codepoints 0020  [0m
    [0;30;107m  and 00A0) glyph names according to the Adobe Glyph List.                  [0m

    * [1;30;103mWARN[0m: Glyph 0x00A0 is called "nbspace": Change to "uni00A0" [code: not-recommended-00a0]


    Result: [1;30;103mWARN[0m

 >> [1;35;107mcom.google.fonts/check/required_tables[0m
    [0;36;107mFont contains all required tables?[0m
    with NotoSansCaucasianAlbanian-Regular.ttf

    [1;35;107m  Rationale:                                                                [0m
    [0;30;107m  Depending on the typeface and coverage of a font, certain tables are      [0m
    [0;30;107m  recommended for optimum quality. For example, the performance of a        [0m
    [0;30;107m  non-linear font is improved if the VDMX, LTSH, and hdmx tables are        [0m
    [0;30;107m  present. Non-monospaced Latin fonts should have a kern table. A gasp      [0m
    [0;30;107m  table is necessary if a designer wants to influence the sizes at which    [0m
    [0;30;107m  grayscaling is used under Windows. A DSIG table containing a digital      [0m
    [0;30;107m  signature helps ensure the integrity of the font file. Etc.               [0m

    * [0;36;107mINFO[0m: This font contains the following optional tables [loca, GPOS, GSUB]


    Result: [0;36;107mINFO[0m

 >> [1;35;107mcom.google.fonts/check/superfamily/list[0m
    [0;36;107mList all superfamily filepaths[0m
    with NotoSansCaucasianAlbanian-Regular.ttf

    [1;35;107m  Rationale:                                                                [0m
    [0;30;107m  This is a merely informative check that lists all sibling families        [0m
    [0;30;107m  detected by fontbakery.                                                   [0m
    [0;30;107m                                                                            [0m
    [0;30;107m  Only the fontfiles in these directories will be considered in             [0m
    [0;30;107m  superfamily-level checks.                                                 [0m

    * [0;36;107mINFO[0m: . [code: family-path]


    Result: [0;36;107mINFO[0m

 >> [1;35;107mcom.google.fonts/check/monospace[0m
    [0;36;107mChecking correctness of monospaced metadata.[0m
    with NotoSansCaucasianAlbanian-Regular.ttf

    [1;35;107m  Rationale:                                                                [0m
    [0;30;107m  There are various metadata in the OpenType spec to specify if a font is   [0m
    [0;30;107m  monospaced or not. If the font is not truly monospaced, then no           [0m
    [0;30;107m  monospaced metadata should be set (as sometimes they mistakenly are...)   [0m
    [0;30;107m                                                                            [0m
    [0;30;107m  Requirements for monospace fonts:                                         [0m
    [0;30;107m                                                                            [0m
    [0;30;107m  * post.isFixedPitch - "Set to 0 if the font is proportionally spaced,     [0m
    [0;30;107m  non-zero if the font is not proportionally spaced (monospaced)"           [0m
    [0;30;107m    www.microsoft.com/typography/otspec/post.htm                            [0m
    [0;30;107m                                                                            [0m
    [0;30;107m  * hhea.advanceWidthMax must be correct, meaning no glyph's width value is [0m
    [0;30;107m  greater.                                                                  [0m
    [0;30;107m    www.microsoft.com/typography/otspec/hhea.htm                            [0m
    [0;30;107m                                                                            [0m
    [0;30;107m  * OS/2.panose.bProportion must be set to 9 (monospace). Spec says: "The   [0m
    [0;30;107m  PANOSE definition contains ten digits each of which currently describes   [0m
    [0;30;107m  up to sixteen variations. Windows uses bFamilyType, bSerifStyle and       [0m
    [0;30;107m  bProportion in the font mapper to determine family type. It also uses     [0m
    [0;30;107m  bProportion to determine if the font is monospaced."                      [0m
    [0;30;107m    www.microsoft.com/typography/otspec/os2.htm#pan                         [0m
    [0;30;107m    monotypecom-test.monotype.de/services/pan2                              [0m
    [0;30;107m                                                                            [0m
    [0;30;107m  * OS/2.xAvgCharWidth must be set accurately.                              [0m
    [0;30;107m    "OS/2.xAvgCharWidth is used when rendering monospaced fonts, at least   [0m
    [0;30;107m  by Windows GDI"                                                           [0m
    [0;30;107m    http://typedrawers.com/discussion/comment/15397/#Comment_15397          [0m
    [0;30;107m                                                                            [0m
    [0;30;107m  Also we should report an error for glyphs not of average width.           [0m
    [0;30;107m                                                                            [0m
    [0;30;107m  Please also note:                                                         [0m
    [0;30;107m  Thomas Phinney told us that a few years ago (as of December 2019), if you [0m
    [0;30;107m  gave a font a monospace flag in Panose, Microsoft Word would ignore the   [0m
    [0;30;107m  actual advance widths and treat it as monospaced. Source:                 [0m
    [0;30;107m  https://typedrawers.com/discussion/comment/45140/#Comment_45140           [0m

    * [1;91;107mFAIL[0m: On monospaced fonts, the value of post.isFixedPitch must be set to a non-zero value (meaning 'fixed width monospaced'), but got 0 instead. [code: mono-bad-post-isFixedPitch]
    * [1;91;107mFAIL[0m: On monospaced fonts, the value of OS/2.panose.bProportion must be set to 9 (proportion: monospaced), but got 2 instead. [code: mono-bad-panose-proportion]
    * [1;30;103mWARN[0m: Font is monospaced but 152 glyphs (83.98%) have a different width. You should check the widths of: ['CR', 'space', 'u10530', 'u10532', 'u10533', 'u10534', 'u10535', 'u10536', 'u10537', 'u10538', 'u10539', 'u1053A', 'u1053B', 'u1053C', 'u1053E', 'u1053F', 'u10540', 'u10541', 'u10542', 'u10543', 'u10544', 'u10546', 'u10547', 'u10548', 'u10549', 'u1054A', 'u1054B', 'u1054C', 'u1054D', 'u1054E', 'u1054F', 'u10550', 'u10551', 'u10552', 'u10553', 'u10554', 'u10555', 'u10556', 'u10557', 'u10558', 'u10559', 'u1055A', 'u1055B', 'u1055C', 'u1055D', 'u1055E', 'u1055F', 'u10560', 'u10561', 'u10562', 'u10563', 'u1056F', 'uni25CC', 'nbspace', 'u10530_fe26', 'u10532_fe26', 'u10533_fe26', 'u10534_fe26', 'u10535_fe26', 'u10536_fe26', 'u10537_fe26', 'u10538_fe26', 'u10539_fe26', 'u1053A_fe26', 'u1053B_fe26', 'u1053C_fe26', 'u1053E_fe26', 'u1053F_fe26', 'u10540_fe26', 'u10541_fe26', 'u10542_fe26', 'u10543_fe26', 'u10544_fe26', 'u10546_fe26', 'u10547_fe26', 'u10548_fe26', 'u10549_fe26', 'u1054A_fe26', 'u1054B_fe26', 'u1054C_fe26', 'u1054D_fe26', 'u1054E_fe26', 'u1054F_fe26', 'u10550_fe26', 'u10551_fe26', 'u10552_fe26', 'u10553_fe26', 'u10554_fe26', 'u10555_fe26', 'u10556_fe26', 'u10557_fe26', 'u10558_fe26', 'u10559_fe26', 'u1055A_fe26', 'u1055B_fe26', 'u1055C_fe26', 'u1055D_fe26', 'u1055E_fe26', 'u1055F_fe26', 'u10560_fe26', 'u10561_fe26', 'u10562_fe26', 'u10563_fe26', 'u10530_fe2d', 'u10532_fe2d', 'u10533_fe2d', 'u10534_fe2d', 'u10535_fe2d', 'u10536_fe2d', 'u10537_fe2d', 'u10538_fe2d', 'u10539_fe2d', 'u1053A_fe2d', 'u1053B_fe2d', 'u1053C_fe2d', 'u1053E_fe2d', 'u1053F_fe2d', 'u10540_fe2d', 'u10541_fe2d', 'u10542_fe2d', 'u10543_fe2d', 'u10544_fe2d', 'u10546_fe2d', 'u10547_fe2d', 'u10548_fe2d', 'u10549_fe2d', 'u1054A_fe2d', 'u1054B_fe2d', 'u1054C_fe2d', 'u1054D_fe2d', 'u1054E_fe2d', 'u1054F_fe2d', 'u10550_fe2d', 'u10551_fe2d', 'u10552_fe2d', 'u10553_fe2d', 'u10554_fe2d', 'u10555_fe2d', 'u10556_fe2d', 'u10557_fe2d', 'u10558_fe2d', 'u10559_fe2d', 'u1055A_fe2d', 'u1055B_fe2d', 'u1055C_fe2d', 'u1055D_fe2d', 'u1055E_fe2d', 'u1055F_fe2d', 'u10560_fe2d', 'u10561_fe2d', 'u10562_fe2d', 'u10563_fe2d'] [code: mono-outliers]


    Result: [1;91;107mFAIL[0m

 >> [1;35;107mcom.google.fonts/check/name/match_familyname_fullfont[0m
    [0;36;107mDoes full font name begin with the font family name?[0m
    with NotoSansCaucasianAlbanian-Regular.ttf

    * [1;91;107mFAIL[0m: On the 'name' table, the full font name (NameID 4 - FULL_FONT_NAME: 'Noto Sans CaucAlban') does not begin with font family name (NameID 1 - FONT_FAMILY_NAME: 'Noto Sans Caucasian Albanian Regular') [code: does-not]


    Result: [1;91;107mFAIL[0m

 >> [1;35;107mcom.google.fonts/check/dsig[0m
    [0;36;107mDoes the font have a DSIG table?[0m
    with NotoSansCaucasianAlbanian-Regular.ttf

    [1;35;107m  Rationale:                                                                [0m
    [0;30;107m  Microsoft Office 2013 and below products expect fonts to have a digital   [0m
    [0;30;107m  signature declared in a DSIG table in order to implement OpenType         [0m
    [0;30;107m  features. The EOL date for Microsoft Office 2013 products is 4/11/2023.   [0m
    [0;30;107m  This issue does not impact Microsoft Office 2016 and above products.      [0m
    [0;30;107m                                                                            [0m
    [0;30;107m  This checks verifies that this signature is available in the font.        [0m
    [0;30;107m                                                                            [0m
    [0;30;107m  A fake signature is enough to address this issue. If needed, a dummy      [0m
    [0;30;107m  table can be added to the font with the `gftools fix-dsig` script         [0m
    [0;30;107m  available at https://github.com/googlefonts/gftools                       [0m
    [0;30;107m                                                                            [0m
    [0;30;107m  Reference: https://github.com/googlefonts/fontbakery/issues/1845          [0m

    * [1;91;107mFAIL[0m: This font lacks a digital signature (DSIG table). Some applications may require one (even if only a dummy placeholder) in order to work properly. You can add a DSIG table by running the `gftools fix-dsig` script. [code: lacks-signature]


    Result: [1;91;107mFAIL[0m

 >> [1;35;107mcom.google.fonts/check/outline_alignment_miss[0m
    [0;36;107mAre there any misaligned on-curve points?[0m
    with NotoSansCaucasianAlbanian-Regular.ttf

    [1;35;107m  Rationale:                                                                [0m
    [0;30;107m  This test heuristically looks for on-curve points which are close to, but [0m
    [0;30;107m  do not sit on, significant boundary coordinates. For example, a point     [0m
    [0;30;107m  which has a Y-coordinate of 1 or -1 might be a misplaced baseline point.  [0m
    [0;30;107m  As well as the baseline, the test also checks for points near the         [0m
    [0;30;107m  x-height (but only for lower case Latin letters), cap-height, ascender    [0m
    [0;30;107m  and descender Y coordinates.                                              [0m
    [0;30;107m                                                                            [0m
    [0;30;107m  Not all such misaligned curve points are a mistake, and sometimes the     [0m
    [0;30;107m  design may call for points in locations near the boundaries. As this test [0m
    [0;30;107m  is liable to generate significant numbers of false positives, the test    [0m
    [0;30;107m  will pass if there are more than 100 reported misalignments.              [0m

    * [1;30;103mWARN[0m: The following glyphs have on-curve points which have potentially incorrect y coordinates:
	* u1054E: X=452.0,Y=1.0 (should be at baseline 0?)
	* u1054E: X=452.0,Y=715.0 (should be at cap-height 714?)
	* u1054E: X=540.0,Y=715.0 (should be at cap-height 714?)
	* u1054E: X=540.0,Y=1.0 (should be at baseline 0?)
	* u1054E_fe26: X=452.0,Y=1.0 (should be at baseline 0?)
	* u1054E_fe26: X=452.0,Y=715.0 (should be at cap-height 714?)
	* u1054E_fe26: X=540.0,Y=715.0 (should be at cap-height 714?)
	* u1054E_fe26: X=540.0,Y=1.0 (should be at baseline 0?)
	* u1054E_fe2d: X=452.0,Y=1.0 (should be at baseline 0?)
	* u1054E_fe2d: X=452.0,Y=715.0 (should be at cap-height 714?)
	* u1054E_fe2d: X=540.0,Y=715.0 (should be at cap-height 714?) and u1054E_fe2d: X=540.0,Y=1.0 (should be at baseline 0?) [code: found-misalignments]


    Result: [1;30;103mWARN[0m

 >> [1;35;107mcom.google.fonts/check/outline_short_segments[0m
    [0;36;107mAre any segments inordinately short?[0m
    with NotoSansCaucasianAlbanian-Regular.ttf

    [1;35;107m  Rationale:                                                                [0m
    [0;30;107m  This test looks for outline segments which seem particularly short (less  [0m
    [0;30;107m  than 0.006%% of the overall path length).                                 [0m
    [0;30;107m                                                                            [0m
    [0;30;107m  This test is not run for variable fonts, as they may legitimately have    [0m
    [0;30;107m  short segments. As this test is liable to generate significant numbers of [0m
    [0;30;107m  false positives, the test will pass if there are more than 100 reported   [0m
    [0;30;107m  short segments.                                                           [0m

    * [1;30;103mWARN[0m: The following glyphs have segments which seem very short:
	* u1053B contains a short segment L<<231.0,383.0>--<227.0,383.0>>
	* u1055D contains a short segment B<<226.0,413.0>-<232.0,416.0>-<237.5,419.5>>
	* u1055D contains a short segment B<<237.5,419.5>-<243.0,423.0>-<249.0,426.0>>
	* u1055D contains a short segment B<<283.0,366.0>-<279.0,364.0>-<277.0,363.0>>
	* u1053B_fe26 contains a short segment L<<231.0,383.0>--<227.0,383.0>>
	* u1055D_fe26 contains a short segment B<<226.0,413.0>-<232.0,416.0>-<237.5,419.5>>
	* u1055D_fe26 contains a short segment B<<237.5,419.5>-<243.0,423.0>-<249.0,426.0>>
	* u1055D_fe26 contains a short segment B<<283.0,366.0>-<279.0,364.0>-<277.0,363.0>>
	* u1053B_fe2d contains a short segment L<<231.0,383.0>--<227.0,383.0>>
	* u1055D_fe2d contains a short segment B<<226.0,413.0>-<232.0,416.0>-<237.5,419.5>>
	* u1055D_fe2d contains a short segment B<<237.5,419.5>-<243.0,423.0>-<249.0,426.0>> and u1055D_fe2d contains a short segment B<<283.0,366.0>-<279.0,364.0>-<277.0,363.0>> [code: found-short-segments]


    Result: [1;30;103mWARN[0m


Total:

    [1;97;101mERROR[0m: 0
    [1;91;107mFAIL[0m: 3
    [1;30;103mWARN[0m: 4
    [0;36;107mINFO[0m: 2
    [0;34;107mSKIP[0m: 17
    [0;32;107mPASS[0m: 51


DONE!

    [1;30;107mMeaning of check results:[0m

    An [1;97;101mERROR[0m is something wrong with FontBakery itself, possibly a bug.
    A [1;91;107mFAIL[0m is a problem with the font that must be fixed.
    A [1;30;103mWARN[0m is something that you should consider addressing.
    An [0;36;107mINFO[0m result simply prints something useful. Typically stats.
    A [0;32;107mPASS[0m means the font looks good for the given checking routine.
    And a [0;34;107mSKIP[0m happens when the check does not apply to the given font.

    If you get [1;97;101mERROR[0ms, please help us improve the tool by reporting them at
    [1;36;107mhttps://github.com/googlefonts/fontbakery/issues[0m

    (but other kinds of bug reports and/or
     feature requests are also always welcome, of course!)

