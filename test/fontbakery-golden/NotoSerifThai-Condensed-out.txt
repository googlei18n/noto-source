Start ... running 77 individual check executions.
 >> [1;35;107mcom.google.fonts/check/required_tables[0m
    [0;36;107mFont contains all required tables?[0m
    with NotoSerifThai-Condensed.ttf

    [1;35;107m  Rationale:                                                                [0m
    [0;30;107m  Depending on the typeface and coverage of a font, certain tables are      [0m
    [0;30;107m  recommended for optimum quality. For example, the performance of a        [0m
    [0;30;107m  non-linear font is improved if the VDMX, LTSH, and hdmx tables are        [0m
    [0;30;107m  present. Non-monospaced Latin fonts should have a kern table. A gasp      [0m
    [0;30;107m  table is necessary if a designer wants to influence the sizes at which    [0m
    [0;30;107m  grayscaling is used under Windows. A DSIG table containing a digital      [0m
    [0;30;107m  signature helps ensure the integrity of the font file. Etc.               [0m

    * [0;36;107mINFO[0m: This font contains the following optional tables [loca, GPOS, GSUB]


    Result: [0;36;107mINFO[0m

 >> [1;35;107mcom.google.fonts/check/superfamily/list[0m
    [0;36;107mList all superfamily filepaths[0m
    with NotoSerifThai-Condensed.ttf

    [1;35;107m  Rationale:                                                                [0m
    [0;30;107m  This is a merely informative check that lists all sibling families        [0m
    [0;30;107m  detected by fontbakery.                                                   [0m
    [0;30;107m                                                                            [0m
    [0;30;107m  Only the fontfiles in these directories will be considered in             [0m
    [0;30;107m  superfamily-level checks.                                                 [0m

    * [0;36;107mINFO[0m: . [code: family-path]


    Result: [0;36;107mINFO[0m

 >> [1;35;107mcom.google.fonts/check/dsig[0m
    [0;36;107mDoes the font have a DSIG table?[0m
    with NotoSerifThai-Condensed.ttf

    [1;35;107m  Rationale:                                                                [0m
    [0;30;107m  Microsoft Office 2013 and below products expect fonts to have a digital   [0m
    [0;30;107m  signature declared in a DSIG table in order to implement OpenType         [0m
    [0;30;107m  features. The EOL date for Microsoft Office 2013 products is 4/11/2023.   [0m
    [0;30;107m  This issue does not impact Microsoft Office 2016 and above products.      [0m
    [0;30;107m                                                                            [0m
    [0;30;107m  This checks verifies that this signature is available in the font.        [0m
    [0;30;107m                                                                            [0m
    [0;30;107m  A fake signature is enough to address this issue. If needed, a dummy      [0m
    [0;30;107m  table can be added to the font with the `gftools fix-dsig` script         [0m
    [0;30;107m  available at https://github.com/googlefonts/gftools                       [0m
    [0;30;107m                                                                            [0m
    [0;30;107m  Reference: https://github.com/googlefonts/fontbakery/issues/1845          [0m

    * [1;91;107mFAIL[0m: This font lacks a digital signature (DSIG table). Some applications may require one (even if only a dummy placeholder) in order to work properly. You can add a DSIG table by running the `gftools fix-dsig` script. [code: lacks-signature]


    Result: [1;91;107mFAIL[0m

 >> [1;35;107mcom.google.fonts/check/outline_alignment_miss[0m
    [0;36;107mAre there any misaligned on-curve points?[0m
    with NotoSerifThai-Condensed.ttf

    [1;35;107m  Rationale:                                                                [0m
    [0;30;107m  This test heuristically looks for on-curve points which are close to, but [0m
    [0;30;107m  do not sit on, significant boundary coordinates. For example, a point     [0m
    [0;30;107m  which has a Y-coordinate of 1 or -1 might be a misplaced baseline point.  [0m
    [0;30;107m  As well as the baseline, the test also checks for points near the         [0m
    [0;30;107m  x-height (but only for lower case Latin letters), cap-height, ascender    [0m
    [0;30;107m  and descender Y coordinates.                                              [0m
    [0;30;107m                                                                            [0m
    [0;30;107m  Not all such misaligned curve points are a mistake, and sometimes the     [0m
    [0;30;107m  design may call for points in locations near the boundaries. As this test [0m
    [0;30;107m  is liable to generate significant numbers of false positives, the test    [0m
    [0;30;107m  will pass if there are more than 100 reported misalignments.              [0m

    * [1;30;103mWARN[0m: The following glyphs have on-curve points which have potentially incorrect y coordinates:
	* uni0E49: X=-129.0,Y=715.0 (should be at cap-height 714?)
	* uni0E49.narrow: X=-395.0,Y=715.0 (should be at cap-height 714?)
	* uni0E49.narrow: X=-261.0,Y=714.5 (should be at cap-height 714?)
	* uni0E4D: X=-228.0,Y=716.0 (should be at cap-height 714?)
	* uni0E4D: X=-34.0,Y=716.0 (should be at cap-height 714?)
	* uni0E4D: X=-85.0,Y=716.0 (should be at cap-height 714?)
	* uni0E4D: X=-177.0,Y=716.0 (should be at cap-height 714?)
	* uni0E4D.narrow: X=-396.0,Y=716.0 (should be at cap-height 714?)
	* uni0E4D.narrow: X=-202.0,Y=716.0 (should be at cap-height 714?)
	* uni0E4D.narrow: X=-253.0,Y=716.0 (should be at cap-height 714?) and 42 more. [code: found-misalignments]


    Result: [1;30;103mWARN[0m

 >> [1;35;107mcom.google.fonts/check/outline_colinear_vectors[0m
    [0;36;107mDo any segments have colinear vectors?[0m
    with NotoSerifThai-Condensed.ttf

    [1;35;107m  Rationale:                                                                [0m
    [0;30;107m  This test looks for consecutive line segments which have the same angle.  [0m
    [0;30;107m  This normally happens if an outline point has been added by accident.     [0m
    [0;30;107m                                                                            [0m
    [0;30;107m  This test is not run for variable fonts, as they may legitimately have    [0m
    [0;30;107m  colinear vectors.                                                         [0m

    * [1;30;103mWARN[0m: The following glyphs have colinear vectors:
	* nikhahit_maiChattawathai.narrow: L<<-269.0,1056.0>--<-269.0,1046.0>> -> L<<-269.0,1046.0>--<-275.0,981.0>>
	* nikhahit_maiChattawathai.narrow: L<<-275.0,929.0>--<-269.0,864.0>> -> L<<-269.0,864.0>--<-269.0,854.0>>
	* nikhahit_maiChattawathai: L<<-159.0,981.0>--<-165.0,1046.0>> -> L<<-165.0,1046.0>--<-165.0,1056.0>>
	* nikhahit_maiChattawathai: L<<-165.0,854.0>--<-165.0,864.0>> -> L<<-165.0,864.0>--<-159.0,929.0>>
	* uni0E3F: L<<178.0,395.0>--<227.0,395.0>> -> L<<227.0,395.0>--<231.0,395.0>>
	* uni0E3F: L<<231.0,632.0>--<226.0,632.0>> -> L<<226.0,632.0>--<178.0,632.0>>
	* uni0E3F: L<<27.0,677.0>--<229.0,677.0>> -> L<<229.0,677.0>--<231.0,677.0>>
	* uni0E4B.narrow: L<<-268.0,875.0>--<-268.0,865.0>> -> L<<-268.0,865.0>--<-275.0,781.0>>
	* uni0E4B.narrow: L<<-275.0,731.0>--<-268.0,646.0>> -> L<<-268.0,646.0>--<-268.0,636.0>>
	* uni0E4B.narrow: L<<-325.0,782.0>--<-332.0,865.0>> -> L<<-332.0,865.0>--<-332.0,875.0>> and 9 more. [code: found-colinear-vectors]


    Result: [1;30;103mWARN[0m

 >> [1;35;107mcom.google.fonts/check/outline_jaggy_segments[0m
    [0;36;107mDo outlines contain any jaggy segments?[0m
    with NotoSerifThai-Condensed.ttf

    [1;35;107m  Rationale:                                                                [0m
    [0;30;107m  This test heuristically detects outline segments which form a             [0m
    [0;30;107m  particularly small angle, indicative of an outline error. This may cause  [0m
    [0;30;107m  false positives in cases such as extreme ink traps, so should be regarded [0m
    [0;30;107m  as advisory and backed up by manual inspection.                           [0m

    * [1;30;103mWARN[0m: The following glyphs have jaggy segments:
	* uni0E1E: L<<202.0,454.0>--<202.0,125.0>>/L<<202.0,125.0>--<307.0,545.0>> = 14.036243467926484
	* uni0E1E: L<<351.0,545.0>--<454.0,125.0>>/L<<454.0,125.0>--<454.0,494.0>> = 13.779169345510887
	* uni0E1F: L<<202.0,454.0>--<202.0,125.0>>/L<<202.0,125.0>--<307.0,545.0>> = 14.036243467926484
	* uni0E1F: L<<351.0,545.0>--<454.0,125.0>>/L<<454.0,125.0>--<454.0,714.0>> = 13.779169345510887 and uni0E5A: B<<133.0,374.0>-<108.0,374.0>-<91.0,385.0>>/L<<91.0,385.0>--<95.0,382.0>> = 3.9646547228560465 [code: found-jaggy-segments]


    Result: [1;30;103mWARN[0m


Total:

    [1;97;101mERROR[0m: 0
    [1;91;107mFAIL[0m: 1
    [1;30;103mWARN[0m: 3
    [0;36;107mINFO[0m: 2
    [0;34;107mSKIP[0m: 18
    [0;32;107mPASS[0m: 53


DONE!

    [1;30;107mMeaning of check results:[0m

    An [1;97;101mERROR[0m is something wrong with FontBakery itself, possibly a bug.
    A [1;91;107mFAIL[0m is a problem with the font that must be fixed.
    A [1;30;103mWARN[0m is something that you should consider addressing.
    An [0;36;107mINFO[0m result simply prints something useful. Typically stats.
    A [0;32;107mPASS[0m means the font looks good for the given checking routine.
    And a [0;34;107mSKIP[0m happens when the check does not apply to the given font.

    If you get [1;97;101mERROR[0ms, please help us improve the tool by reporting them at
    [1;36;107mhttps://github.com/googlefonts/fontbakery/issues[0m

    (but other kinds of bug reports and/or
     feature requests are also always welcome, of course!)

