Start ... running 77 individual check executions.
 >> [1;35;107mcom.google.fonts/check/required_tables[0m
    [0;36;107mFont contains all required tables?[0m
    with NotoSansArabic-ExtraCondensedMedium.ttf

    [1;35;107m  Rationale:                                                                [0m
    [0;30;107m  Depending on the typeface and coverage of a font, certain tables are      [0m
    [0;30;107m  recommended for optimum quality. For example, the performance of a        [0m
    [0;30;107m  non-linear font is improved if the VDMX, LTSH, and hdmx tables are        [0m
    [0;30;107m  present. Non-monospaced Latin fonts should have a kern table. A gasp      [0m
    [0;30;107m  table is necessary if a designer wants to influence the sizes at which    [0m
    [0;30;107m  grayscaling is used under Windows. A DSIG table containing a digital      [0m
    [0;30;107m  signature helps ensure the integrity of the font file. Etc.               [0m

    * [0;36;107mINFO[0m: This font contains the following optional tables [loca, GPOS, GSUB]


    Result: [0;36;107mINFO[0m

 >> [1;35;107mcom.google.fonts/check/valid_glyphnames[0m
    [0;36;107mGlyph names are all valid?[0m
    with NotoSansArabic-ExtraCondensedMedium.ttf

    [1;35;107m  Rationale:                                                                [0m
    [0;30;107m  Microsoft's recommendations for OpenType Fonts states the following:      [0m
    [0;30;107m                                                                            [0m
    [0;30;107m  'NOTE: The PostScript glyph name must be no longer than 31 characters,    [0m
    [0;30;107m  include only uppercase or lowercase English letters, European digits, the [0m
    [0;30;107m  period or the underscore, i.e. from the set [A-Za-z0-9_.] and should      [0m
    [0;30;107m  start with a letter, except the special glyph name ".notdef" which starts [0m
    [0;30;107m  with a period.'                                                           [0m
    [0;30;107m                                                                            [0m
    [0;30;107m  https://docs.microsoft.com/en-us/typography/opentype/spec/recom#post-table[0m
    [0;30;107m                                                                            [0m
    [0;30;107m                                                                            [0m
    [0;30;107m  In practice, though, particularly in modern environments, glyph names can [0m
    [0;30;107m  be as long as 63 characters.                                              [0m
    [0;30;107m  According to the "Adobe Glyph List Specification" available at:           [0m
    [0;30;107m                                                                            [0m
    [0;30;107m  https://github.com/adobe-type-tools/agl-specification                     [0m

    * [1;30;103mWARN[0m: The following glyph names may be too long for some legacy systems which may expect a maximum 31-char length limit:
behThreedotsupbelowVabovear.fina, behThreedotsupbelowVabovear.init, behThreedotsupbelowVabovear.medi, dalTwodotsverticalbelowTahabovear, dalTwodotsverticalbelowTahabovear.fina, seenThreedotsbelowthreedotsar.fina, seenThreedotsbelowthreedotsar.init, seenThreedotsbelowthreedotsar.medi and yehHamzaabove_yehHamzaabovear.fina [code: legacy-long-names]


    Result: [1;30;103mWARN[0m

 >> [1;35;107mcom.google.fonts/check/superfamily/list[0m
    [0;36;107mList all superfamily filepaths[0m
    with NotoSansArabic-ExtraCondensedMedium.ttf

    [1;35;107m  Rationale:                                                                [0m
    [0;30;107m  This is a merely informative check that lists all sibling families        [0m
    [0;30;107m  detected by fontbakery.                                                   [0m
    [0;30;107m                                                                            [0m
    [0;30;107m  Only the fontfiles in these directories will be considered in             [0m
    [0;30;107m  superfamily-level checks.                                                 [0m

    * [0;36;107mINFO[0m: . [code: family-path]


    Result: [0;36;107mINFO[0m

 >> [1;35;107mcom.google.fonts/check/name/match_familyname_fullfont[0m
    [0;36;107mDoes full font name begin with the font family name?[0m
    with NotoSansArabic-ExtraCondensedMedium.ttf

    * [1;91;107mFAIL[0m: On the 'name' table, the full font name (NameID 4 - FULL_FONT_NAME: 'Noto Sans Arabic ExtCond Med') does not begin with font family name (NameID 1 - FONT_FAMILY_NAME: 'Noto Sans Arabic ExtraCondensed Medium') [code: does-not]


    Result: [1;91;107mFAIL[0m

 >> [1;35;107mcom.google.fonts/check/dsig[0m
    [0;36;107mDoes the font have a DSIG table?[0m
    with NotoSansArabic-ExtraCondensedMedium.ttf

    [1;35;107m  Rationale:                                                                [0m
    [0;30;107m  Microsoft Office 2013 and below products expect fonts to have a digital   [0m
    [0;30;107m  signature declared in a DSIG table in order to implement OpenType         [0m
    [0;30;107m  features. The EOL date for Microsoft Office 2013 products is 4/11/2023.   [0m
    [0;30;107m  This issue does not impact Microsoft Office 2016 and above products.      [0m
    [0;30;107m                                                                            [0m
    [0;30;107m  This checks verifies that this signature is available in the font.        [0m
    [0;30;107m                                                                            [0m
    [0;30;107m  A fake signature is enough to address this issue. If needed, a dummy      [0m
    [0;30;107m  table can be added to the font with the `gftools fix-dsig` script         [0m
    [0;30;107m  available at https://github.com/googlefonts/gftools                       [0m
    [0;30;107m                                                                            [0m
    [0;30;107m  Reference: https://github.com/googlefonts/fontbakery/issues/1845          [0m

    * [1;91;107mFAIL[0m: This font lacks a digital signature (DSIG table). Some applications may require one (even if only a dummy placeholder) in order to work properly. You can add a DSIG table by running the `gftools fix-dsig` script. [code: lacks-signature]


    Result: [1;91;107mFAIL[0m

 >> [1;35;107mcom.google.fonts/check/glyf_nested_components[0m
    [0;36;107mCheck glyphs do not have components which are themselves components.[0m
    with NotoSansArabic-ExtraCondensedMedium.ttf

    [1;35;107m  Rationale:                                                                [0m
    [0;30;107m  There have been bugs rendering variable fonts with nested components.     [0m
    [0;30;107m  Additionally, some static fonts with nested components have been reported [0m
    [0;30;107m  to have rendering and printing issues.                                    [0m
    [0;30;107m                                                                            [0m
    [0;30;107m  For more info, see:                                                       [0m
    [0;30;107m  * https://github.com/googlefonts/fontbakery/issues/2961                   [0m
    [0;30;107m  * https://github.com/arrowtype/recursive/issues/412                       [0m

    * [1;91;107mFAIL[0m: The following glyphs have components which themselves are component glyphs:
	* uni060B
	* uniFCBA
	* uniFD75
	* uniFDC4
	* uniFDB6
	* uniFCF8
	* uniFD14
	* uniFDF3
	* uniFD3D
	* uni0625 and 606 more. [code: found-nested-components]


    Result: [1;91;107mFAIL[0m

 >> [1;35;107mcom.google.fonts/check/outline_colinear_vectors[0m
    [0;36;107mDo any segments have colinear vectors?[0m
    with NotoSansArabic-ExtraCondensedMedium.ttf

    [1;35;107m  Rationale:                                                                [0m
    [0;30;107m  This test looks for consecutive line segments which have the same angle.  [0m
    [0;30;107m  This normally happens if an outline point has been added by accident.     [0m
    [0;30;107m                                                                            [0m
    [0;30;107m  This test is not run for variable fonts, as they may legitimately have    [0m
    [0;30;107m  colinear vectors.                                                         [0m

    * [1;30;103mWARN[0m: The following glyphs have colinear vectors:
	* behThreedotsupbelowVabovear.fina: L<<313.0,-21.0>--<313.0,-21.0>> -> L<<313.0,-21.0>--<313.0,-21.0>>
	* fehDotMovedbelowar: L<<310.0,-21.0>--<310.0,-21.0>> -> L<<310.0,-21.0>--<310.0,-21.0>>
	* uni0606: L<<284.0,719.0>--<284.0,719.0>> -> L<<284.0,719.0>--<284.0,719.0>>
	* uni0641: L<<310.0,-21.0>--<310.0,-21.0>> -> L<<310.0,-21.0>--<310.0,-21.0>>
	* uni0666: L<<328.0,667.0>--<328.0,667.0>> -> L<<328.0,667.0>--<328.0,667.0>>
	* uni066E.fina: L<<313.0,-21.0>--<313.0,-21.0>> -> L<<313.0,-21.0>--<313.0,-21.0>>
	* uni067C.fina: L<<313.0,-21.0>--<313.0,-21.0>> -> L<<313.0,-21.0>--<313.0,-21.0>>
	* uni067D.fina: L<<313.0,-21.0>--<313.0,-21.0>> -> L<<313.0,-21.0>--<313.0,-21.0>>
	* uni06A1: L<<310.0,-21.0>--<310.0,-21.0>> -> L<<310.0,-21.0>--<310.0,-21.0>>
	* uni06A3: L<<310.0,-21.0>--<310.0,-21.0>> -> L<<310.0,-21.0>--<310.0,-21.0>> and 62 more. [code: found-colinear-vectors]


    Result: [1;30;103mWARN[0m

 >> [1;35;107mcom.google.fonts/check/outline_jaggy_segments[0m
    [0;36;107mDo outlines contain any jaggy segments?[0m
    with NotoSansArabic-ExtraCondensedMedium.ttf

    [1;35;107m  Rationale:                                                                [0m
    [0;30;107m  This test heuristically detects outline segments which form a             [0m
    [0;30;107m  particularly small angle, indicative of an outline error. This may cause  [0m
    [0;30;107m  false positives in cases such as extreme ink traps, so should be regarded [0m
    [0;30;107m  as advisory and backed up by manual inspection.                           [0m

    * [1;30;103mWARN[0m: The following glyphs have jaggy segments:
	* behThreedotsupbelowVabovear.fina: L<<422.0,442.0>--<422.0,442.0>>/L<<422.0,442.0>--<365.0,437.0>> = 5.013113755035814
	* behThreedotsupbelowVabovear: L<<414.0,439.0>--<414.0,439.0>>/L<<414.0,439.0>--<357.0,434.0>> = 5.013113755035814
	* lamVabove_alefar.fina: L<<430.0,829.0>--<430.0,829.0>>/L<<430.0,829.0>--<373.0,824.0>> = 5.013113755035814
	* lamVabove_alefar.isol: L<<398.0,820.0>--<398.0,820.0>>/L<<398.0,820.0>--<341.0,815.0>> = 5.013113755035814
	* uni065A: L<<134.0,564.0>--<134.0,564.0>>/L<<134.0,564.0>--<77.0,559.0>> = 5.013113755035814
	* uni0692.fina: L<<149.0,492.0>--<149.0,492.0>>/L<<149.0,492.0>--<92.0,487.0>> = 5.013113755035814
	* uni0692: L<<159.0,492.0>--<159.0,492.0>>/L<<159.0,492.0>--<102.0,487.0>> = 5.013113755035814
	* uni06B5.fina: L<<275.0,585.0>--<275.0,585.0>>/L<<275.0,585.0>--<218.0,580.0>> = 5.013113755035814
	* uni06B5.init: L<<140.0,826.0>--<140.0,826.0>>/L<<140.0,826.0>--<83.0,821.0>> = 5.013113755035814
	* uni06B5.medi: L<<135.0,835.0>--<135.0,835.0>>/L<<135.0,835.0>--<78.0,830.0>> = 5.013113755035814 and 27 more. [code: found-jaggy-segments]


    Result: [1;30;103mWARN[0m

 >> [1;35;107mcom.google.fonts/check/outline_semi_vertical[0m
    [0;36;107mDo outlines contain any semi-vertical or semi-horizontal lines?[0m
    with NotoSansArabic-ExtraCondensedMedium.ttf

    [1;35;107m  Rationale:                                                                [0m
    [0;30;107m  This test detects line segments which are nearly, but not quite, exactly  [0m
    [0;30;107m  horizontal or vertical. Sometimes such lines are created by design, but   [0m
    [0;30;107m  often they are indicative of a design error.                              [0m
    [0;30;107m                                                                            [0m
    [0;30;107m  This test is disabled for italic styles, which often contain              [0m
    [0;30;107m  nearly-upright lines.                                                     [0m

    * [1;30;103mWARN[0m: The following glyphs have semi-vertical/semi-horizontal lines:
	* uni0602: L<<247.0,-53.0>--<1003.0,-54.0>>
	* uni0606: L<<598.0,385.0>--<469.0,386.0>>
	* uni0607: L<<598.0,385.0>--<469.0,386.0>>
	* uni0659: L<<30.0,682.0>--<239.0,683.0>>
	* uni066D: L<<12.0,287.0>--<191.0,286.0>>
	* uni066D: L<<305.0,286.0>--<486.0,287.0>> and uni221B0607.pt: L<<598.0,385.0>--<469.0,386.0>> [code: found-semi-vertical]


    Result: [1;30;103mWARN[0m


Total:

    [1;97;101mERROR[0m: 0
    [1;91;107mFAIL[0m: 3
    [1;30;103mWARN[0m: 4
    [0;36;107mINFO[0m: 2
    [0;34;107mSKIP[0m: 18
    [0;32;107mPASS[0m: 50


DONE!

    [1;30;107mMeaning of check results:[0m

    An [1;97;101mERROR[0m is something wrong with FontBakery itself, possibly a bug.
    A [1;91;107mFAIL[0m is a problem with the font that must be fixed.
    A [1;30;103mWARN[0m is something that you should consider addressing.
    An [0;36;107mINFO[0m result simply prints something useful. Typically stats.
    A [0;32;107mPASS[0m means the font looks good for the given checking routine.
    And a [0;34;107mSKIP[0m happens when the check does not apply to the given font.

    If you get [1;97;101mERROR[0ms, please help us improve the tool by reporting them at
    [1;36;107mhttps://github.com/googlefonts/fontbakery/issues[0m

    (but other kinds of bug reports and/or
     feature requests are also always welcome, of course!)

