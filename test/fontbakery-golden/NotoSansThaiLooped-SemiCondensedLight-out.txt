Start ... running 77 individual check executions.
 >> [1;35;107mcom.google.fonts/check/unicode_range_bits[0m
    [0;36;107mEnsure UnicodeRange bits are properly set.[0m
    with NotoSansThaiLooped-SemiCondensedLight.ttf

    [1;35;107m  Rationale:                                                                [0m
    [0;30;107m  When the UnicodeRange bits on the OS/2 table are not properly set, some   [0m
    [0;30;107m  programs running on Windows may not recognize the font and use a system   [0m
    [0;30;107m  fallback font instead. For that reason, this check calculates the proper  [0m
    [0;30;107m  settings by inspecting the glyphs declared on the cmap table and then     [0m
    [0;30;107m  ensures that their corresponding ranges are enabled.                      [0m

    * [1;30;103mWARN[0m: UnicodeRange bit 0 "Basic Latin" should be 1 because cmap has 20 of the 128 codepoints in this range. [code: bad-range-bit]
    * [1;30;103mWARN[0m: UnicodeRange bit 1 "Latin-1 Supplement" should be 1 because cmap has 4 of the 128 codepoints in this range. [code: bad-range-bit]
    * [1;30;103mWARN[0m: UnicodeRange bit 5 "Spacing Modifier Letters" should be 1 because cmap has 2 of the 112 codepoints in this range. [code: bad-range-bit]
    * [1;30;103mWARN[0m: UnicodeRange bit 6 "Combining Diacritical Marks" should be 1 because cmap has 4 of the 176 codepoints in this range. [code: bad-range-bit]
    * [1;30;103mWARN[0m: UnicodeRange bit 31 "General Punctuation" should be 1 because cmap has 17 of the 240 codepoints in this range. [code: bad-range-bit]
    * [1;30;103mWARN[0m: UnicodeRange bit 45 "Geometric Shapes" should be 1 because cmap has 1 of the 96 codepoints in this range. [code: bad-range-bit]
    * [1;30;103mWARN[0m: UnicodeRange bit 46 "Miscellaneous Symbols" should be 1 because cmap has 1 of the 256 codepoints in this range. [code: bad-range-bit]
    * [1;30;103mWARN[0m: UnicodeRange bit 60 "Private Use Area (plane 0)" should be 1 because cmap has 10 of the 6400 codepoints in this range. [code: bad-range-bit]
    * [1;30;103mWARN[0m: UnicodeRange bit 80 "Khmer" should be 1 because cmap has 2 of the 160 codepoints in this range. [code: bad-range-bit]


    Result: [1;30;103mWARN[0m

 >> [1;35;107mcom.google.fonts/check/required_tables[0m
    [0;36;107mFont contains all required tables?[0m
    with NotoSansThaiLooped-SemiCondensedLight.ttf

    [1;35;107m  Rationale:                                                                [0m
    [0;30;107m  Depending on the typeface and coverage of a font, certain tables are      [0m
    [0;30;107m  recommended for optimum quality. For example, the performance of a        [0m
    [0;30;107m  non-linear font is improved if the VDMX, LTSH, and hdmx tables are        [0m
    [0;30;107m  present. Non-monospaced Latin fonts should have a kern table. A gasp      [0m
    [0;30;107m  table is necessary if a designer wants to influence the sizes at which    [0m
    [0;30;107m  grayscaling is used under Windows. A DSIG table containing a digital      [0m
    [0;30;107m  signature helps ensure the integrity of the font file. Etc.               [0m

    * [0;36;107mINFO[0m: This font contains the following optional tables [loca, GPOS, GSUB]


    Result: [0;36;107mINFO[0m

 >> [1;35;107mcom.google.fonts/check/superfamily/list[0m
    [0;36;107mList all superfamily filepaths[0m
    with NotoSansThaiLooped-SemiCondensedLight.ttf

    [1;35;107m  Rationale:                                                                [0m
    [0;30;107m  This is a merely informative check that lists all sibling families        [0m
    [0;30;107m  detected by fontbakery.                                                   [0m
    [0;30;107m                                                                            [0m
    [0;30;107m  Only the fontfiles in these directories will be considered in             [0m
    [0;30;107m  superfamily-level checks.                                                 [0m

    * [0;36;107mINFO[0m: . [code: family-path]


    Result: [0;36;107mINFO[0m

 >> [1;35;107mcom.google.fonts/check/name/match_familyname_fullfont[0m
    [0;36;107mDoes full font name begin with the font family name?[0m
    with NotoSansThaiLooped-SemiCondensedLight.ttf

    * [1;91;107mFAIL[0m: On the 'name' table, the full font name (NameID 4 - FULL_FONT_NAME: 'Noto Sans Thai Looped SmCd Lt') does not begin with font family name (NameID 1 - FONT_FAMILY_NAME: 'Noto Sans Thai Looped SemiCondensed Light') [code: does-not]


    Result: [1;91;107mFAIL[0m

 >> [1;35;107mcom.google.fonts/check/dsig[0m
    [0;36;107mDoes the font have a DSIG table?[0m
    with NotoSansThaiLooped-SemiCondensedLight.ttf

    [1;35;107m  Rationale:                                                                [0m
    [0;30;107m  Microsoft Office 2013 and below products expect fonts to have a digital   [0m
    [0;30;107m  signature declared in a DSIG table in order to implement OpenType         [0m
    [0;30;107m  features. The EOL date for Microsoft Office 2013 products is 4/11/2023.   [0m
    [0;30;107m  This issue does not impact Microsoft Office 2016 and above products.      [0m
    [0;30;107m                                                                            [0m
    [0;30;107m  This checks verifies that this signature is available in the font.        [0m
    [0;30;107m                                                                            [0m
    [0;30;107m  A fake signature is enough to address this issue. If needed, a dummy      [0m
    [0;30;107m  table can be added to the font with the `gftools fix-dsig` script         [0m
    [0;30;107m  available at https://github.com/googlefonts/gftools                       [0m
    [0;30;107m                                                                            [0m
    [0;30;107m  Reference: https://github.com/googlefonts/fontbakery/issues/1845          [0m

    * [1;91;107mFAIL[0m: This font lacks a digital signature (DSIG table). Some applications may require one (even if only a dummy placeholder) in order to work properly. You can add a DSIG table by running the `gftools fix-dsig` script. [code: lacks-signature]


    Result: [1;91;107mFAIL[0m

 >> [1;35;107mcom.google.fonts/check/whitespace_widths[0m
    [0;36;107mSpace and non-breaking space have the same width?[0m
    with NotoSansThaiLooped-SemiCondensedLight.ttf

    * [1;91;107mFAIL[0m: Space and non-breaking space have differing width: The space glyph named space is 240 font units wide, non-breaking space named (uni00A0) is 430 font units wide, and both should be positive and the same. GlyphsApp has "Sidebearing arithmetic" (https://glyphsapp.com/tutorials/spacing) which allows you to set the non-breaking space width to always equal the space width. [code: different-widths]


    Result: [1;91;107mFAIL[0m

 >> [1;35;107mcom.google.fonts/check/outline_alignment_miss[0m
    [0;36;107mAre there any misaligned on-curve points?[0m
    with NotoSansThaiLooped-SemiCondensedLight.ttf

    [1;35;107m  Rationale:                                                                [0m
    [0;30;107m  This test heuristically looks for on-curve points which are close to, but [0m
    [0;30;107m  do not sit on, significant boundary coordinates. For example, a point     [0m
    [0;30;107m  which has a Y-coordinate of 1 or -1 might be a misplaced baseline point.  [0m
    [0;30;107m  As well as the baseline, the test also checks for points near the         [0m
    [0;30;107m  x-height (but only for lower case Latin letters), cap-height, ascender    [0m
    [0;30;107m  and descender Y coordinates.                                              [0m
    [0;30;107m                                                                            [0m
    [0;30;107m  Not all such misaligned curve points are a mistake, and sometimes the     [0m
    [0;30;107m  design may call for points in locations near the boundaries. As this test [0m
    [0;30;107m  is liable to generate significant numbers of false positives, the test    [0m
    [0;30;107m  will pass if there are more than 100 reported misalignments.              [0m

    * [1;30;103mWARN[0m: The following glyphs have on-curve points which have potentially incorrect y coordinates:
	* uni0E35: X=369.0,Y=716.0 (should be at cap-height 714?)
	* uni0E4A: X=334.5,Y=715.5 (should be at cap-height 714?)
	* uni0E4A.narrow: X=314.0,Y=715.0 (should be at cap-height 714?)
	* uni0E4A.extranarrow: X=314.0,Y=715.0 (should be at cap-height 714?)
	* uni0E4E: X=50.0,Y=716.0 (should be at cap-height 714?)
	* uni0E53.sups: X=88.0,Y=713.0 (should be at cap-height 714?)
	* uni0E53.sups: X=483.5,Y=714.5 (should be at cap-height 714?)
	* uni0E57.sups: X=81.5,Y=713.5 (should be at cap-height 714?)
	* uni0E57.sups: X=422.0,Y=715.5 (should be at cap-height 714?)
	* uni0E59.sups: X=80.5,Y=714.5 (should be at cap-height 714?) and 16 more. [code: found-misalignments]


    Result: [1;30;103mWARN[0m

 >> [1;35;107mcom.google.fonts/check/outline_short_segments[0m
    [0;36;107mAre any segments inordinately short?[0m
    with NotoSansThaiLooped-SemiCondensedLight.ttf

    [1;35;107m  Rationale:                                                                [0m
    [0;30;107m  This test looks for outline segments which seem particularly short (less  [0m
    [0;30;107m  than 0.006%% of the overall path length).                                 [0m
    [0;30;107m                                                                            [0m
    [0;30;107m  This test is not run for variable fonts, as they may legitimately have    [0m
    [0;30;107m  short segments. As this test is liable to generate significant numbers of [0m
    [0;30;107m  false positives, the test will pass if there are more than 100 reported   [0m
    [0;30;107m  short segments.                                                           [0m

    * [1;30;103mWARN[0m: The following glyphs have segments which seem very short:
	* uni0E03 contains a short segment B<<201.0,471.0>-<201.0,461.0>-<199.0,453.0>>
	* uni0E05 contains a short segment L<<275.0,437.0>--<270.0,437.0>>
	* uni0E06 contains a short segment B<<216.0,471.0>-<216.0,461.0>-<214.0,453.0>>
	* uni0E06 contains a short segment B<<237.0,131.0>-<238.0,121.0>-<238.5,111.5>>
	* uni0E06 contains a short segment B<<238.5,111.5>-<239.0,102.0>-<239.0,92.0>>
	* uni0E060331 contains a short segment B<<216.0,471.0>-<216.0,461.0>-<214.0,453.0>>
	* uni0E060331 contains a short segment B<<237.0,131.0>-<238.0,121.0>-<238.5,111.5>>
	* uni0E060331 contains a short segment B<<238.5,111.5>-<239.0,102.0>-<239.0,92.0>>
	* uni0E09 contains a short segment L<<215.0,96.0>--<217.0,96.0>>
	* uni0E0B contains a short segment B<<203.0,471.0>-<203.0,461.0>-<201.0,453.0>> and 83 more. [code: found-short-segments]


    Result: [1;30;103mWARN[0m

 >> [1;35;107mcom.google.fonts/check/outline_colinear_vectors[0m
    [0;36;107mDo any segments have colinear vectors?[0m
    with NotoSansThaiLooped-SemiCondensedLight.ttf

    [1;35;107m  Rationale:                                                                [0m
    [0;30;107m  This test looks for consecutive line segments which have the same angle.  [0m
    [0;30;107m  This normally happens if an outline point has been added by accident.     [0m
    [0;30;107m                                                                            [0m
    [0;30;107m  This test is not run for variable fonts, as they may legitimately have    [0m
    [0;30;107m  colinear vectors.                                                         [0m

    * [1;30;103mWARN[0m: The following glyphs have colinear vectors:
	* fanNuthai: L<<104.0,817.0>--<104.0,749.0>> -> L<<104.0,749.0>--<98.0,643.0>>
	* fanNuthai: L<<171.0,643.0>--<166.0,749.0>> -> L<<166.0,749.0>--<166.0,817.0>>
	* fanNuthai: L<<220.0,817.0>--<220.0,749.0>> -> L<<220.0,749.0>--<214.0,643.0>>
	* fanNuthai: L<<55.0,643.0>--<50.0,749.0>> -> L<<50.0,749.0>--<50.0,817.0>>
	* fonThongthai: L<<105.0,817.0>--<105.0,750.0>> -> L<<105.0,750.0>--<100.0,643.0>>
	* fonThongthai: L<<55.0,643.0>--<50.0,750.0>> -> L<<50.0,750.0>--<50.0,817.0>>
	* fongDan: L<<182.0,643.0>--<177.0,749.0>> -> L<<177.0,749.0>--<177.0,817.0>>
	* fongDan: L<<230.0,817.0>--<230.0,749.0>> -> L<<230.0,749.0>--<225.0,643.0>>
	* fongDan: L<<298.0,643.0>--<293.0,749.0>> -> L<<293.0,749.0>--<293.0,817.0>>
	* fongDan: L<<346.0,817.0>--<346.0,749.0>> -> L<<346.0,749.0>--<341.0,643.0>> and 17 more. [code: found-colinear-vectors]


    Result: [1;30;103mWARN[0m

 >> [1;35;107mcom.google.fonts/check/outline_jaggy_segments[0m
    [0;36;107mDo outlines contain any jaggy segments?[0m
    with NotoSansThaiLooped-SemiCondensedLight.ttf

    [1;35;107m  Rationale:                                                                [0m
    [0;30;107m  This test heuristically detects outline segments which form a             [0m
    [0;30;107m  particularly small angle, indicative of an outline error. This may cause  [0m
    [0;30;107m  false positives in cases such as extreme ink traps, so should be regarded [0m
    [0;30;107m  as advisory and backed up by manual inspection.                           [0m

    * [1;30;103mWARN[0m: The following glyphs have jaggy segments:
	* uni0E10.less: B<<401.0,496.0>-<387.0,496.0>-<373.0,499.0>>/L<<373.0,499.0>--<373.0,499.0>> = 12.094757077012089 and uni0E10: B<<401.0,496.0>-<387.0,496.0>-<373.0,499.0>>/L<<373.0,499.0>--<373.0,499.0>> = 12.094757077012089 [code: found-jaggy-segments]


    Result: [1;30;103mWARN[0m

 >> [1;35;107mcom.google.fonts/check/outline_semi_vertical[0m
    [0;36;107mDo outlines contain any semi-vertical or semi-horizontal lines?[0m
    with NotoSansThaiLooped-SemiCondensedLight.ttf

    [1;35;107m  Rationale:                                                                [0m
    [0;30;107m  This test detects line segments which are nearly, but not quite, exactly  [0m
    [0;30;107m  horizontal or vertical. Sometimes such lines are created by design, but   [0m
    [0;30;107m  often they are indicative of a design error.                              [0m
    [0;30;107m                                                                            [0m
    [0;30;107m  This test is disabled for italic styles, which often contain              [0m
    [0;30;107m  nearly-upright lines.                                                     [0m

    * [1;30;103mWARN[0m: The following glyphs have semi-vertical/semi-horizontal lines:
	* uni0331.alt: L<<-309.0,-80.0>--<205.0,-76.0>>
	* uni0331.alt: L<<309.0,-119.0>--<-205.0,-123.0>> and uni0E05: L<<426.0,0.0>--<425.0,392.0>> [code: found-semi-vertical]


    Result: [1;30;103mWARN[0m


Total:

    [1;97;101mERROR[0m: 0
    [1;91;107mFAIL[0m: 3
    [1;30;103mWARN[0m: 6
    [0;36;107mINFO[0m: 2
    [0;34;107mSKIP[0m: 18
    [0;32;107mPASS[0m: 48


DONE!

    [1;30;107mMeaning of check results:[0m

    An [1;97;101mERROR[0m is something wrong with FontBakery itself, possibly a bug.
    A [1;91;107mFAIL[0m is a problem with the font that must be fixed.
    A [1;30;103mWARN[0m is something that you should consider addressing.
    An [0;36;107mINFO[0m result simply prints something useful. Typically stats.
    A [0;32;107mPASS[0m means the font looks good for the given checking routine.
    And a [0;34;107mSKIP[0m happens when the check does not apply to the given font.

    If you get [1;97;101mERROR[0ms, please help us improve the tool by reporting them at
    [1;36;107mhttps://github.com/googlefonts/fontbakery/issues[0m

    (but other kinds of bug reports and/or
     feature requests are also always welcome, of course!)

