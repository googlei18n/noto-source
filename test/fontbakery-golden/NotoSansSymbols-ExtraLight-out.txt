Start ... running 77 individual check executions.
 >> [1;35;107mcom.google.fonts/check/unicode_range_bits[0m
    [0;36;107mEnsure UnicodeRange bits are properly set.[0m
    with NotoSansSymbols-ExtraLight.ttf

    [1;35;107m  Rationale:                                                                [0m
    [0;30;107m  When the UnicodeRange bits on the OS/2 table are not properly set, some   [0m
    [0;30;107m  programs running on Windows may not recognize the font and use a system   [0m
    [0;30;107m  fallback font instead. For that reason, this check calculates the proper  [0m
    [0;30;107m  settings by inspecting the glyphs declared on the cmap table and then     [0m
    [0;30;107m  ensures that their corresponding ranges are enabled.                      [0m

    * [1;30;103mWARN[0m: UnicodeRange bit 57 "Non-Plane 0 *" should be 0 because cmap has none of the 2048 codepoints in this range. [code: bad-range-bit]


    Result: [1;30;103mWARN[0m

 >> [1;35;107mcom.google.fonts/check/required_tables[0m
    [0;36;107mFont contains all required tables?[0m
    with NotoSansSymbols-ExtraLight.ttf

    [1;35;107m  Rationale:                                                                [0m
    [0;30;107m  Depending on the typeface and coverage of a font, certain tables are      [0m
    [0;30;107m  recommended for optimum quality. For example, the performance of a        [0m
    [0;30;107m  non-linear font is improved if the VDMX, LTSH, and hdmx tables are        [0m
    [0;30;107m  present. Non-monospaced Latin fonts should have a kern table. A gasp      [0m
    [0;30;107m  table is necessary if a designer wants to influence the sizes at which    [0m
    [0;30;107m  grayscaling is used under Windows. A DSIG table containing a digital      [0m
    [0;30;107m  signature helps ensure the integrity of the font file. Etc.               [0m

    * [0;36;107mINFO[0m: This font contains the following optional tables [loca, GSUB]


    Result: [0;36;107mINFO[0m

 >> [1;35;107mcom.google.fonts/check/superfamily/list[0m
    [0;36;107mList all superfamily filepaths[0m
    with NotoSansSymbols-ExtraLight.ttf

    [1;35;107m  Rationale:                                                                [0m
    [0;30;107m  This is a merely informative check that lists all sibling families        [0m
    [0;30;107m  detected by fontbakery.                                                   [0m
    [0;30;107m                                                                            [0m
    [0;30;107m  Only the fontfiles in these directories will be considered in             [0m
    [0;30;107m  superfamily-level checks.                                                 [0m

    * [0;36;107mINFO[0m: . [code: family-path]


    Result: [0;36;107mINFO[0m

 >> [1;35;107mcom.google.fonts/check/dsig[0m
    [0;36;107mDoes the font have a DSIG table?[0m
    with NotoSansSymbols-ExtraLight.ttf

    [1;35;107m  Rationale:                                                                [0m
    [0;30;107m  Microsoft Office 2013 and below products expect fonts to have a digital   [0m
    [0;30;107m  signature declared in a DSIG table in order to implement OpenType         [0m
    [0;30;107m  features. The EOL date for Microsoft Office 2013 products is 4/11/2023.   [0m
    [0;30;107m  This issue does not impact Microsoft Office 2016 and above products.      [0m
    [0;30;107m                                                                            [0m
    [0;30;107m  This checks verifies that this signature is available in the font.        [0m
    [0;30;107m                                                                            [0m
    [0;30;107m  A fake signature is enough to address this issue. If needed, a dummy      [0m
    [0;30;107m  table can be added to the font with the `gftools fix-dsig` script         [0m
    [0;30;107m  available at https://github.com/googlefonts/gftools                       [0m
    [0;30;107m                                                                            [0m
    [0;30;107m  Reference: https://github.com/googlefonts/fontbakery/issues/1845          [0m

    * [1;91;107mFAIL[0m: This font lacks a digital signature (DSIG table). Some applications may require one (even if only a dummy placeholder) in order to work properly. You can add a DSIG table by running the `gftools fix-dsig` script. [code: lacks-signature]


    Result: [1;91;107mFAIL[0m

 >> [1;35;107mcom.google.fonts/check/gdef_mark_chars[0m
    [0;36;107mCheck mark characters are in GDEF mark glyph class[0m
    with NotoSansSymbols-ExtraLight.ttf

    [1;35;107m  Rationale:                                                                [0m
    [0;30;107m  Mark characters should be in the GDEF mark glyph class.                   [0m

    * [1;30;103mWARN[0m: The following mark characters could be in the GDEF mark glyph class:
	 U+20DD, U+20DE, U+20DF, U+20E0, U+20E2, U+20E3 and U+20E4 [code: mark-chars]


    Result: [1;30;103mWARN[0m

 >> [1;35;107mcom.google.fonts/check/gpos_kerning_info[0m
    [0;36;107mDoes GPOS table have kerning information? This check skips monospaced fonts as defined by post.isFixedPitch value[0m
    with NotoSansSymbols-ExtraLight.ttf

    * [1;30;103mWARN[0m: GPOS table lacks kerning information. [code: lacks-kern-info]


    Result: [1;30;103mWARN[0m

 >> [1;35;107mcom.google.fonts/check/outline_colinear_vectors[0m
    [0;36;107mDo any segments have colinear vectors?[0m
    with NotoSansSymbols-ExtraLight.ttf

    [1;35;107m  Rationale:                                                                [0m
    [0;30;107m  This test looks for consecutive line segments which have the same angle.  [0m
    [0;30;107m  This normally happens if an outline point has been added by accident.     [0m
    [0;30;107m                                                                            [0m
    [0;30;107m  This test is not run for variable fonts, as they may legitimately have    [0m
    [0;30;107m  colinear vectors.                                                         [0m

    * [1;30;103mWARN[0m: The following glyphs have colinear vectors:
	* u1F19C: L<<748.0,552.0>--<746.0,579.0>> -> L<<746.0,579.0>--<746.0,662.0>>
	* u1F764: L<<441.0,0.0>--<443.0,170.0>> -> L<<443.0,170.0>--<447.0,308.0>>
	* u1F764: L<<484.0,308.0>--<487.0,170.0>> -> L<<487.0,170.0>--<489.0,0.0>>
	* uni262B: L<<201.0,24.0>--<215.0,23.0>> -> L<<215.0,23.0>--<228.0,23.0>>
	* uni262B: L<<636.0,23.0>--<650.0,23.0>> -> L<<650.0,23.0>--<663.0,24.0>>
	* uni2697: L<<303.0,14.0>--<304.0,21.0>> -> L<<304.0,21.0>--<358.0,250.0>>
	* uni2697: L<<746.0,250.0>--<800.0,21.0>> -> L<<800.0,21.0>--<801.0,14.0>> and uni26FD: L<<553.0,610.0>--<554.0,541.0>> -> L<<554.0,541.0>--<554.0,524.0>> [code: found-colinear-vectors]


    Result: [1;30;103mWARN[0m

 >> [1;35;107mcom.google.fonts/check/outline_jaggy_segments[0m
    [0;36;107mDo outlines contain any jaggy segments?[0m
    with NotoSansSymbols-ExtraLight.ttf

    [1;35;107m  Rationale:                                                                [0m
    [0;30;107m  This test heuristically detects outline segments which form a             [0m
    [0;30;107m  particularly small angle, indicative of an outline error. This may cause  [0m
    [0;30;107m  false positives in cases such as extreme ink traps, so should be regarded [0m
    [0;30;107m  as advisory and backed up by manual inspection.                           [0m

    * [1;30;103mWARN[0m: The following glyphs have jaggy segments:
	* u1F126: B<<505.5,495.0>-<502.0,513.0>-<500.0,531.0>>/B<<500.0,531.0>-<498.0,516.0>-<494.0,497.0>> = 13.934835114501363
	* u1F12E: B<<285.5,257.0>-<289.0,242.0>-<291.0,227.0>>/B<<291.0,227.0>-<292.0,240.0>-<296.0,256.5>> = 11.993348723586951
	* u1F146: B<<379.5,228.5>-<383.0,211.0>-<384.0,193.0>>/B<<384.0,193.0>-<390.0,232.0>-<403.0,280.0>> = 11.925992382419398
	* u1F146: B<<515.0,457.0>-<504.0,498.0>-<500.0,531.0>>/B<<500.0,531.0>-<496.0,497.0>-<484.0,456.0>> = 13.62106392678159
	* u1F14A: B<<656.0,223.5>-<661.0,205.0>-<662.0,195.0>>/B<<662.0,195.0>-<664.0,209.0>-<672.0,238.0>> = 13.840695491655614
	* u1F14B: B<<501.0,493.0>-<501.0,516.0>-<503.0,536.0>>/L<<503.0,536.0>--<390.0,156.0>> = 10.850222326187128
	* u1F14B: B<<684.5,222.5>-<688.0,202.0>-<689.0,191.0>>/B<<689.0,191.0>-<691.0,205.0>-<695.5,229.5>> = 13.324531261890755
	* u1F14B: L<<361.0,156.0>--<248.0,537.0>>/B<<248.0,537.0>-<249.0,514.0>-<250.0,491.5>> = 14.030167885582099
	* u1F14E: B<<703.5,225.0>-<707.0,202.0>-<709.0,191.0>>/B<<709.0,191.0>-<710.0,206.0>-<714.5,230.0>> = 14.118921303056382
	* u1F14F: B<<277.5,237.0>-<279.0,222.0>-<281.0,202.0>>/B<<281.0,202.0>-<283.0,221.0>-<286.5,241.0>> = 11.719599094994122 and 19 more. [code: found-jaggy-segments]


    Result: [1;30;103mWARN[0m

 >> [1;35;107mcom.google.fonts/check/outline_semi_vertical[0m
    [0;36;107mDo outlines contain any semi-vertical or semi-horizontal lines?[0m
    with NotoSansSymbols-ExtraLight.ttf

    [1;35;107m  Rationale:                                                                [0m
    [0;30;107m  This test detects line segments which are nearly, but not quite, exactly  [0m
    [0;30;107m  horizontal or vertical. Sometimes such lines are created by design, but   [0m
    [0;30;107m  often they are indicative of a design error.                              [0m
    [0;30;107m                                                                            [0m
    [0;30;107m  This test is disabled for italic styles, which often contain              [0m
    [0;30;107m  nearly-upright lines.                                                     [0m

    * [1;30;103mWARN[0m: The following glyphs have semi-vertical/semi-horizontal lines:
	* male: L<<557.0,522.0>--<556.0,381.0>>
	* uni26A4: L<<659.0,764.0>--<658.0,622.0>>
	* uni26A5: L<<557.0,764.0>--<556.0,623.0>>
	* uni26A7: L<<655.0,764.0>--<654.0,623.0>> and uni26FD: L<<804.0,444.0>--<805.0,234.0>> [code: found-semi-vertical]


    Result: [1;30;103mWARN[0m


Total:

    [1;97;101mERROR[0m: 0
    [1;91;107mFAIL[0m: 1
    [1;30;103mWARN[0m: 6
    [0;36;107mINFO[0m: 2
    [0;34;107mSKIP[0m: 18
    [0;32;107mPASS[0m: 50


DONE!

    [1;30;107mMeaning of check results:[0m

    An [1;97;101mERROR[0m is something wrong with FontBakery itself, possibly a bug.
    A [1;91;107mFAIL[0m is a problem with the font that must be fixed.
    A [1;30;103mWARN[0m is something that you should consider addressing.
    An [0;36;107mINFO[0m result simply prints something useful. Typically stats.
    A [0;32;107mPASS[0m means the font looks good for the given checking routine.
    And a [0;34;107mSKIP[0m happens when the check does not apply to the given font.

    If you get [1;97;101mERROR[0ms, please help us improve the tool by reporting them at
    [1;36;107mhttps://github.com/googlefonts/fontbakery/issues[0m

    (but other kinds of bug reports and/or
     feature requests are also always welcome, of course!)

