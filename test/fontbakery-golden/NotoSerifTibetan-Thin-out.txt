Start ... running 77 individual check executions.
 >> [1;35;107mcom.google.fonts/check/required_tables[0m
    [0;36;107mFont contains all required tables?[0m
    with NotoSerifTibetan-Thin.ttf

    [1;35;107m  Rationale:                                                                [0m
    [0;30;107m  Depending on the typeface and coverage of a font, certain tables are      [0m
    [0;30;107m  recommended for optimum quality. For example, the performance of a        [0m
    [0;30;107m  non-linear font is improved if the VDMX, LTSH, and hdmx tables are        [0m
    [0;30;107m  present. Non-monospaced Latin fonts should have a kern table. A gasp      [0m
    [0;30;107m  table is necessary if a designer wants to influence the sizes at which    [0m
    [0;30;107m  grayscaling is used under Windows. A DSIG table containing a digital      [0m
    [0;30;107m  signature helps ensure the integrity of the font file. Etc.               [0m

    * [0;36;107mINFO[0m: This font contains the following optional tables [loca, GPOS, GSUB]


    Result: [0;36;107mINFO[0m

 >> [1;35;107mcom.google.fonts/check/superfamily/list[0m
    [0;36;107mList all superfamily filepaths[0m
    with NotoSerifTibetan-Thin.ttf

    [1;35;107m  Rationale:                                                                [0m
    [0;30;107m  This is a merely informative check that lists all sibling families        [0m
    [0;30;107m  detected by fontbakery.                                                   [0m
    [0;30;107m                                                                            [0m
    [0;30;107m  Only the fontfiles in these directories will be considered in             [0m
    [0;30;107m  superfamily-level checks.                                                 [0m

    * [0;36;107mINFO[0m: . [code: family-path]


    Result: [0;36;107mINFO[0m

 >> [1;35;107mcom.google.fonts/check/dsig[0m
    [0;36;107mDoes the font have a DSIG table?[0m
    with NotoSerifTibetan-Thin.ttf

    [1;35;107m  Rationale:                                                                [0m
    [0;30;107m  Microsoft Office 2013 and below products expect fonts to have a digital   [0m
    [0;30;107m  signature declared in a DSIG table in order to implement OpenType         [0m
    [0;30;107m  features. The EOL date for Microsoft Office 2013 products is 4/11/2023.   [0m
    [0;30;107m  This issue does not impact Microsoft Office 2016 and above products.      [0m
    [0;30;107m                                                                            [0m
    [0;30;107m  This checks verifies that this signature is available in the font.        [0m
    [0;30;107m                                                                            [0m
    [0;30;107m  A fake signature is enough to address this issue. If needed, a dummy      [0m
    [0;30;107m  table can be added to the font with the `gftools fix-dsig` script         [0m
    [0;30;107m  available at https://github.com/googlefonts/gftools                       [0m
    [0;30;107m                                                                            [0m
    [0;30;107m  Reference: https://github.com/googlefonts/fontbakery/issues/1845          [0m

    * [1;91;107mFAIL[0m: This font lacks a digital signature (DSIG table). Some applications may require one (even if only a dummy placeholder) in order to work properly. You can add a DSIG table by running the `gftools fix-dsig` script. [code: lacks-signature]


    Result: [1;91;107mFAIL[0m

 >> [1;35;107mcom.google.fonts/check/gdef_mark_chars[0m
    [0;36;107mCheck mark characters are in GDEF mark glyph class[0m
    with NotoSerifTibetan-Thin.ttf

    [1;35;107m  Rationale:                                                                [0m
    [0;30;107m  Mark characters should be in the GDEF mark glyph class.                   [0m

    * [1;30;103mWARN[0m: The following mark characters could be in the GDEF mark glyph class:
	 U+0F3E, U+0F3F and U+0F7F [code: mark-chars]


    Result: [1;30;103mWARN[0m

 >> [1;35;107mcom.google.fonts/check/outline_colinear_vectors[0m
    [0;36;107mDo any segments have colinear vectors?[0m
    with NotoSerifTibetan-Thin.ttf

    [1;35;107m  Rationale:                                                                [0m
    [0;30;107m  This test looks for consecutive line segments which have the same angle.  [0m
    [0;30;107m  This normally happens if an outline point has been added by accident.     [0m
    [0;30;107m                                                                            [0m
    [0;30;107m  This test is not run for variable fonts, as they may legitimately have    [0m
    [0;30;107m  colinear vectors.                                                         [0m

    * [1;30;103mWARN[0m: The following glyphs have colinear vectors:
	* uni0F2F: L<<191.0,313.0>--<355.0,466.0>> -> L<<355.0,466.0>--<357.0,468.0>>
	* uni0F4A0FB4: L<<289.0,227.0>--<293.0,227.0>> -> L<<293.0,227.0>--<506.0,227.0>>
	* uni0F4D0F74: L<<320.0,-255.0>--<320.0,-255.0>> -> L<<320.0,-255.0>--<320.0,-255.0>>
	* uni0F4F0FB20F74: L<<459.0,-198.0>--<459.0,-198.0>> -> L<<459.0,-198.0>--<459.0,-198.0>>
	* uni0F520F74: L<<319.0,-262.0>--<319.0,-262.0>> -> L<<319.0,-262.0>--<319.0,-262.0>>
	* uni0F520FB20F74: L<<470.0,-266.0>--<470.0,-266.0>> -> L<<470.0,-266.0>--<470.0,-266.0>>
	* uni0F530FAD0F71: L<<590.0,-195.0>--<590.0,-196.0>> -> L<<590.0,-196.0>--<590.0,-232.0>>
	* uni0F670FB20F74: L<<460.0,-243.0>--<460.0,-243.0>> -> L<<460.0,-243.0>--<460.0,-243.0>>
	* uni0FB30F74.3: L<<515.0,45.0>--<515.0,72.0>> -> L<<515.0,72.0>--<515.0,77.0>>
	* uni0FB30FB1.3: L<<515.0,67.0>--<515.0,72.0>> -> L<<515.0,72.0>--<515.0,77.0>> and 3 more. [code: found-colinear-vectors]


    Result: [1;30;103mWARN[0m

 >> [1;35;107mcom.google.fonts/check/outline_jaggy_segments[0m
    [0;36;107mDo outlines contain any jaggy segments?[0m
    with NotoSerifTibetan-Thin.ttf

    [1;35;107m  Rationale:                                                                [0m
    [0;30;107m  This test heuristically detects outline segments which form a             [0m
    [0;30;107m  particularly small angle, indicative of an outline error. This may cause  [0m
    [0;30;107m  false positives in cases such as extreme ink traps, so should be regarded [0m
    [0;30;107m  as advisory and backed up by manual inspection.                           [0m

    * [1;30;103mWARN[0m: The following glyphs have jaggy segments:
	* uni0F17: B<<91.5,145.5>-<100.0,127.0>-<105.0,112.0>>/B<<105.0,112.0>-<102.0,152.0>-<90.0,191.5>> = 14.145795494102968
	* uni0F400FB40F9E: B<<614.0,113.0>-<614.0,165.0>-<613.0,205.0>>/L<<613.0,205.0>--<613.0,197.0>> = 1.4320961841645452
	* uni0F4F0FB9: L<<110.0,-218.0>--<110.0,-205.0>>/B<<110.0,-205.0>-<109.0,-255.0>-<109.0,-319.0>> = 1.1457628381748262
	* uni0F620FB40F71: B<<535.0,95.5>-<535.0,185.0>-<534.0,256.0>>/L<<534.0,256.0>--<534.0,232.0>> = 0.8069294551021693
	* uni0F64.2: B<<535.0,333.5>-<535.0,408.0>-<534.0,467.0>>/L<<534.0,467.0>--<534.0,461.0>> = 0.9710219310788218
	* uni0F640FA00F71: B<<535.0,439.0>-<535.0,489.0>-<534.0,528.0>>/L<<534.0,528.0>--<534.0,515.0>> = 1.4688007143857
	* uni0F640FA90F71: B<<535.0,399.5>-<535.0,459.0>-<534.0,505.0>>/L<<534.0,505.0>--<534.0,488.0>> = 1.2453642667683205
	* uni0F640FA90FAA: B<<535.0,439.0>-<535.0,489.0>-<534.0,528.0>>/L<<534.0,528.0>--<534.0,515.0>> = 1.4688007143857
	* uni0F640FA90FB10F74: B<<535.0,450.0>-<535.0,497.0>-<534.0,534.0>>/L<<534.0,534.0>--<534.0,526.0>> = 1.548157698977982
	* uni0F640FA90FB1: B<<535.0,399.5>-<535.0,459.0>-<534.0,505.0>>/L<<534.0,505.0>--<534.0,488.0>> = 1.2453642667683205 and 37 more. [code: found-jaggy-segments]


    Result: [1;30;103mWARN[0m

 >> [1;35;107mcom.google.fonts/check/outline_semi_vertical[0m
    [0;36;107mDo outlines contain any semi-vertical or semi-horizontal lines?[0m
    with NotoSerifTibetan-Thin.ttf

    [1;35;107m  Rationale:                                                                [0m
    [0;30;107m  This test detects line segments which are nearly, but not quite, exactly  [0m
    [0;30;107m  horizontal or vertical. Sometimes such lines are created by design, but   [0m
    [0;30;107m  often they are indicative of a design error.                              [0m
    [0;30;107m                                                                            [0m
    [0;30;107m  This test is disabled for italic styles, which often contain              [0m
    [0;30;107m  nearly-upright lines.                                                     [0m

    * [1;30;103mWARN[0m: The following glyphs have semi-vertical/semi-horizontal lines:
	* uni0F620FAB0F74: L<<305.0,504.0>--<529.0,503.0>> [code: found-semi-vertical]


    Result: [1;30;103mWARN[0m


Total:

    [1;97;101mERROR[0m: 0
    [1;91;107mFAIL[0m: 1
    [1;30;103mWARN[0m: 4
    [0;36;107mINFO[0m: 2
    [0;34;107mSKIP[0m: 18
    [0;32;107mPASS[0m: 52


DONE!

    [1;30;107mMeaning of check results:[0m

    An [1;97;101mERROR[0m is something wrong with FontBakery itself, possibly a bug.
    A [1;91;107mFAIL[0m is a problem with the font that must be fixed.
    A [1;30;103mWARN[0m is something that you should consider addressing.
    An [0;36;107mINFO[0m result simply prints something useful. Typically stats.
    A [0;32;107mPASS[0m means the font looks good for the given checking routine.
    And a [0;34;107mSKIP[0m happens when the check does not apply to the given font.

    If you get [1;97;101mERROR[0ms, please help us improve the tool by reporting them at
    [1;36;107mhttps://github.com/googlefonts/fontbakery/issues[0m

    (but other kinds of bug reports and/or
     feature requests are also always welcome, of course!)

