Start ... running 77 individual check executions.
 >> [1;35;107mcom.google.fonts/check/unicode_range_bits[0m
    [0;36;107mEnsure UnicodeRange bits are properly set.[0m
    with NotoKufiArabic-Medium.ttf

    [1;35;107m  Rationale:                                                                [0m
    [0;30;107m  When the UnicodeRange bits on the OS/2 table are not properly set, some   [0m
    [0;30;107m  programs running on Windows may not recognize the font and use a system   [0m
    [0;30;107m  fallback font instead. For that reason, this check calculates the proper  [0m
    [0;30;107m  settings by inspecting the glyphs declared on the cmap table and then     [0m
    [0;30;107m  ensures that their corresponding ranges are enabled.                      [0m

    * [1;30;103mWARN[0m: UnicodeRange bit 0 "Basic Latin" should be 1 because cmap has 13 of the 128 codepoints in this range. [code: bad-range-bit]
    * [1;30;103mWARN[0m: UnicodeRange bit 1 "Latin-1 Supplement" should be 1 because cmap has 1 of the 128 codepoints in this range. [code: bad-range-bit]
    * [1;30;103mWARN[0m: UnicodeRange bit 31 "General Punctuation" should be 1 because cmap has 5 of the 240 codepoints in this range. [code: bad-range-bit]
    * [1;30;103mWARN[0m: UnicodeRange bit 45 "Geometric Shapes" should be 1 because cmap has 1 of the 96 codepoints in this range. [code: bad-range-bit]
    * [1;30;103mWARN[0m: UnicodeRange bit 63 "Arabic Presentation Forms-A" should be 1 because cmap has 11 of the 688 codepoints in this range. [code: bad-range-bit]


    Result: [1;30;103mWARN[0m

 >> [1;35;107mcom.google.fonts/check/family/win_ascent_and_descent[0m
    [0;36;107mChecking OS/2 usWinAscent & usWinDescent.[0m
    with NotoKufiArabic-Medium.ttf

    [1;35;107m  Rationale:                                                                [0m
    [0;30;107m  A font's winAscent and winDescent values should be greater than the head  [0m
    [0;30;107m  table's yMax, abs(yMin) values. If they are less than these values,       [0m
    [0;30;107m  clipping can occur on Windows platforms                                   [0m
    [0;30;107m  (https://github.com/RedHatBrand/Overpass/issues/33).                      [0m
    [0;30;107m                                                                            [0m
    [0;30;107m  If the font includes tall/deep writing systems such as Arabic or          [0m
    [0;30;107m  Devanagari, the winAscent and winDescent can be greater than the yMax and [0m
    [0;30;107m  abs(yMin) to accommodate vowel marks.                                     [0m
    [0;30;107m                                                                            [0m
    [0;30;107m  When the win Metrics are significantly greater than the upm, the          [0m
    [0;30;107m  linespacing can appear too loose. To counteract this, enabling the OS/2   [0m
    [0;30;107m  fsSelection bit 7 (Use_Typo_Metrics), will force Windows to use the OS/2  [0m
    [0;30;107m  typo values instead. This means the font developer can control the        [0m
    [0;30;107m  linespacing with the typo values, whilst avoiding clipping by setting the [0m
    [0;30;107m  win values to values greater than the yMax and abs(yMin).                 [0m

    * [1;91;107mFAIL[0m: OS/2.usWinAscent value should be equal or greater than 1303, but got 1282 instead [code: ascent]


    Result: [1;91;107mFAIL[0m

 >> [1;35;107mcom.google.fonts/check/required_tables[0m
    [0;36;107mFont contains all required tables?[0m
    with NotoKufiArabic-Medium.ttf

    [1;35;107m  Rationale:                                                                [0m
    [0;30;107m  Depending on the typeface and coverage of a font, certain tables are      [0m
    [0;30;107m  recommended for optimum quality. For example, the performance of a        [0m
    [0;30;107m  non-linear font is improved if the VDMX, LTSH, and hdmx tables are        [0m
    [0;30;107m  present. Non-monospaced Latin fonts should have a kern table. A gasp      [0m
    [0;30;107m  table is necessary if a designer wants to influence the sizes at which    [0m
    [0;30;107m  grayscaling is used under Windows. A DSIG table containing a digital      [0m
    [0;30;107m  signature helps ensure the integrity of the font file. Etc.               [0m

    * [0;36;107mINFO[0m: This font contains the following optional tables [loca, GPOS, GSUB]


    Result: [0;36;107mINFO[0m

 >> [1;35;107mcom.google.fonts/check/superfamily/list[0m
    [0;36;107mList all superfamily filepaths[0m
    with NotoKufiArabic-Medium.ttf

    [1;35;107m  Rationale:                                                                [0m
    [0;30;107m  This is a merely informative check that lists all sibling families        [0m
    [0;30;107m  detected by fontbakery.                                                   [0m
    [0;30;107m                                                                            [0m
    [0;30;107m  Only the fontfiles in these directories will be considered in             [0m
    [0;30;107m  superfamily-level checks.                                                 [0m

    * [0;36;107mINFO[0m: . [code: family-path]


    Result: [0;36;107mINFO[0m

 >> [1;35;107mcom.google.fonts/check/monospace[0m
    [0;36;107mChecking correctness of monospaced metadata.[0m
    with NotoKufiArabic-Medium.ttf

    [1;35;107m  Rationale:                                                                [0m
    [0;30;107m  There are various metadata in the OpenType spec to specify if a font is   [0m
    [0;30;107m  monospaced or not. If the font is not truly monospaced, then no           [0m
    [0;30;107m  monospaced metadata should be set (as sometimes they mistakenly are...)   [0m
    [0;30;107m                                                                            [0m
    [0;30;107m  Requirements for monospace fonts:                                         [0m
    [0;30;107m                                                                            [0m
    [0;30;107m  * post.isFixedPitch - "Set to 0 if the font is proportionally spaced,     [0m
    [0;30;107m  non-zero if the font is not proportionally spaced (monospaced)"           [0m
    [0;30;107m    www.microsoft.com/typography/otspec/post.htm                            [0m
    [0;30;107m                                                                            [0m
    [0;30;107m  * hhea.advanceWidthMax must be correct, meaning no glyph's width value is [0m
    [0;30;107m  greater.                                                                  [0m
    [0;30;107m    www.microsoft.com/typography/otspec/hhea.htm                            [0m
    [0;30;107m                                                                            [0m
    [0;30;107m  * OS/2.panose.bProportion must be set to 9 (monospace). Spec says: "The   [0m
    [0;30;107m  PANOSE definition contains ten digits each of which currently describes   [0m
    [0;30;107m  up to sixteen variations. Windows uses bFamilyType, bSerifStyle and       [0m
    [0;30;107m  bProportion in the font mapper to determine family type. It also uses     [0m
    [0;30;107m  bProportion to determine if the font is monospaced."                      [0m
    [0;30;107m    www.microsoft.com/typography/otspec/os2.htm#pan                         [0m
    [0;30;107m    monotypecom-test.monotype.de/services/pan2                              [0m
    [0;30;107m                                                                            [0m
    [0;30;107m  * OS/2.xAvgCharWidth must be set accurately.                              [0m
    [0;30;107m    "OS/2.xAvgCharWidth is used when rendering monospaced fonts, at least   [0m
    [0;30;107m  by Windows GDI"                                                           [0m
    [0;30;107m    http://typedrawers.com/discussion/comment/15397/#Comment_15397          [0m
    [0;30;107m                                                                            [0m
    [0;30;107m  Also we should report an error for glyphs not of average width.           [0m
    [0;30;107m                                                                            [0m
    [0;30;107m  Please also note:                                                         [0m
    [0;30;107m  Thomas Phinney told us that a few years ago (as of December 2019), if you [0m
    [0;30;107m  gave a font a monospace flag in Panose, Microsoft Word would ignore the   [0m
    [0;30;107m  actual advance widths and treat it as monospaced. Source:                 [0m
    [0;30;107m  https://typedrawers.com/discussion/comment/45140/#Comment_45140           [0m

    * [1;91;107mFAIL[0m: On monospaced fonts, the value of post.isFixedPitch must be set to a non-zero value (meaning 'fixed width monospaced'), but got 0 instead. [code: mono-bad-post-isFixedPitch]
    * [1;91;107mFAIL[0m: On monospaced fonts, the value of OS/2.panose.bProportion must be set to 9 (proportion: monospaced), but got 4 instead. [code: mono-bad-panose-proportion]
    * [1;30;103mWARN[0m: Font is monospaced but 670 glyphs (87.70%) have a different width. You should check the widths of: ['uni0621', 'uni0627', 'uniFE8E', 'uni0623', 'uniFE84', 'uni0625', 'uniFE88', 'uni0672', 'uni0672.fina', 'uni0673', 'uni0673.fina', 'uni0622', 'uniFE82', 'uni0671', 'uniFB51', 'uni0675', 'uni0675.fina', 'uni066E', 'uni066E.fina', 'uni066E.medi', 'uni066E.init', 'uni0628', 'uniFE90', 'uniFE92', 'uniFE91', 'uni067E', 'uniFB57', 'uniFB58', 'uni067B', 'uniFB53', 'uniFB55', 'uniFB54', 'uni0680', 'uniFB5B', 'uniFB5C', 'uniFBE9', 'uniFBE8', 'uni062A', 'uniFE96', 'uniFE97', 'uni067C', 'uni067C.fina', 'uni067C.init', 'uni067D', 'uni067D.fina', 'uni067D.init', 'uni062B', 'uniFE9A', 'uniFE9B', 'uni0679', 'uniFB67', 'uniFB68', 'uni067A', 'uniFB5F', 'uniFB60', 'uni067F', 'uniFB63', 'uniFB64', 'uni0750', 'uni0750.fina', 'uni0750.medi', 'uni0750.init', 'uni0751', 'uni0751.fina', 'uni0751.init', 'uni0752', 'uni0752.fina', 'uni0752.init', 'uni0753', 'uni0753.fina', 'uni0753.init', 'uni0754', 'uni0754.fina', 'uni0754.init', 'uni0755', 'uni0755.fina', 'uni0755.init', 'uni0756', 'uni0756.fina', 'uni0756.init', 'uni062C', 'uniFE9E', 'uniFEA0', 'uniFE9F', 'uni0686', 'uniFB7B', 'uniFB7D', 'uniFB7C', 'uni0687', 'uniFB7F', 'uniFB81', 'uniFB80', 'uni06BF', 'uni06BF.fina', 'uni06BF.medi', 'uni06BF.init', 'uni0683', 'uniFB77', 'uniFB79', 'uniFB78', 'uni0684', 'uniFB73', 'uniFB75', 'uniFB74', 'uni062D', 'uniFEA2', 'uniFEA4', 'uniFEA3', 'uni0681', 'uni0681.fina', 'uni0681.medi', 'uni0681.init', 'uni0682', 'uni0682.fina', 'uni0682.medi', 'uni0682.init', 'uni0757', 'uni0757.fina', 'uni0757.medi', 'uni0757.init', 'uni0685', 'uni0685.fina', 'uni0685.medi', 'uni0685.init', 'uni0758', 'uni0758.fina', 'uni0758.medi', 'uni0758.init', 'uni062E', 'uniFEA6', 'uniFEA8', 'uniFEA7', 'uni062F', 'uniFEAA', 'uni0630', 'uniFEAC', 'uni0688', 'uniFB89', 'uni068C', 'uniFB85', 'uni068D', 'uniFB83', 'uni0689', 'uni0689.fina', 'uni068A', 'uni068A.fina', 'uni068B', 'uni068B.fina', 'uni068E', 'uniFB87', 'uni068F', 'uni068F.fina', 'uni0690', 'uni0690.fina', 'uni06EE', 'uni06EE.fina', 'uni0759', 'uni0759.fina', 'uni075A', 'uni075A.fina', 'uni0631', 'uniFEAE', 'uni0632', 'uniFEB0', 'uni0691', 'uniFB8D', 'uni0692', 'uni0692.fina', 'uni0693', 'uni0693.fina', 'uni0694', 'uni0694.fina', 'uni0695', 'uni0695.fina', 'uni0696', 'uni0696.fina', 'uni0697', 'uni0697.fina', 'uni0698', 'uniFB8B', 'uni0699', 'uni0699.fina', 'uni06EF', 'uni06EF.fina', 'uni075B', 'uni075B.fina', 'uni076B', 'uni076B.fina', 'uni076C', 'uni076C.fina', 'uni0633', 'uniFEB2', 'uniFEB4', 'uniFEB3', 'uni069A', 'uni069A.fina', 'uni069A.medi', 'uni069A.init', 'uni069B', 'uni069B.fina', 'uni069B.medi', 'uni069B.init', 'uni0634', 'uniFEB6', 'uniFEB8', 'uniFEB7', 'uni06FA', 'uni06FA.fina', 'uni06FA.medi', 'uni06FA.init', 'uni069C', 'uni069C.fina', 'uni069C.medi', 'uni069C.init', 'uni0635', 'uniFEBA', 'uniFEBC', 'uniFEBB', 'uni069D', 'uni069D.fina', 'uni069D.medi', 'uni069D.init', 'uni069E', 'uni069E.fina', 'uni069E.medi', 'uni069E.init', 'uni0636', 'uniFEBE', 'uniFEC0', 'uniFEBF', 'uni06FB', 'uni06FB.fina', 'uni06FB.medi', 'uni06FB.init', 'uni0637', 'uniFEC2', 'uniFEC4', 'uniFEC3', 'uni069F', 'uni069F.fina', 'uni069F.medi', 'uni069F.init', 'uni0638', 'uniFEC6', 'uniFEC8', 'uniFEC7', 'uni0639', 'uniFECA', 'uniFECC', 'uniFECB', 'uni06A0', 'uni06A0.fina', 'uni06A0.medi', 'uni06A0.init', 'uni063A', 'uniFECE', 'uniFED0', 'uniFECF', 'uni06FC', 'uni06FC.fina', 'uni06FC.medi', 'uni06FC.init', 'uni0641', 'uniFED2', 'uniFED4', 'uniFED3', 'uni06A4', 'uniFB6A', 'uniFB6B', 'uniFB6D', 'uniFB6C', 'uni06A1', 'uni06A1.fina', 'uni06A1.medi', 'uni06A1.init', 'uni06A2', 'uni06A2.fina', 'uni06A2.medi', 'uni06A2.init', 'uni06A3', 'uni06A3.fina', 'uni06A3.medi', 'uni06A3.init', 'uni06A5', 'uni06A5.fina', 'uni06A5.medi', 'uni06A5.init', 'uni06A6', 'uniFB6F', 'uniFB71', 'uniFB70', 'uni066F', 'uni066F.medi', 'uni066F.init', 'uni066F.fina', 'uni0642', 'uniFED6', 'uniFED8', 'uniFED7', 'uni06A7', 'uni06A7.fina', 'uni06A7.medi', 'uni06A7.init', 'uni06A8', 'uni06A8.fina', 'uni06A8.medi', 'uni06A8.init', 'uni0643', 'uniFEDA', 'uniFEDC', 'uniFEDB', 'uni06A9', 'uniFB8F', 'uniFB91', 'uniFB90', 'uni0762', 'uni0762.fina', 'uni0762.medi', 'uni0762.init', 'uni0763', 'uni0763.fina', 'uni0763.medi', 'uni0763.init', 'uni0764', 'uni0764.fina', 'uni0764.medi', 'uni0764.init', 'uni06AF', 'uniFB93', 'uniFB95', 'uniFB94', 'uni06B0', 'uni06B0.fina', 'uni06B0.medi', 'uni06B0.init', 'uni06B4', 'uni06B4.fina', 'uni06B4.medi', 'uni06B4.init', 'uni06AA', 'uni06AA.fina', 'uni06AA.medi', 'uni06AA.init', 'uni06AB', 'uni06AB.fina', 'uni06AB.medi', 'uni06AB.init', 'uni06AC', 'uni06AC.fina', 'uni06AC.medi', 'uni06AC.init', 'uni06AE', 'uni06AE.fina', 'uni06AE.medi', 'uni06AE.init', 'uni06B2', 'uni06B2.fina', 'uni06B2.medi', 'uni06B2.init', 'uni06AD', 'uniFBD4', 'uniFBD6', 'uniFBD5', 'uni06B1', 'uniFB9B', 'uniFB9D', 'uniFB9C', 'uni06B3', 'uniFB97', 'uniFB99', 'uniFB98', 'uni0644', 'uniFEDE', 'uniFEE0', 'uniFEDF', 'uni06B5', 'uni06B5.fina', 'uni06B5.medi', 'uni06B5.init', 'uni06B6', 'uni06B6.fina', 'uni06B6.medi', 'uni06B6.init', 'uni06B7', 'uni06B7.fina', 'uni06B7.medi', 'uni06B7.init', 'uni06B8', 'uni06B8.fina', 'uni06B8.medi', 'uni06B8.init', 'uni0645', 'uniFEE2', 'uniFEE4', 'uniFEE3', 'uni08A7', 'uni08A7.fina', 'uni08A7.medi', 'uni08A7.init', 'uni0646', 'uniFEE6', 'uniFEE8', 'uniFEE7', 'uni06B9', 'uni06B9.fina', 'uni06B9.medi', 'uni06B9.init', 'uni06BA', 'uni06BA.medi', 'uni06BA.init', 'uniFB9F', 'uni06BB', 'uniFBA1', 'uniFBA2', 'uni06BC', 'uni06BC.fina', 'uni06BC.medi', 'uni06BC.init', 'uni06BD', 'uni06BD.fina', 'uni06BD.medi', 'uni06BD.init', 'uni0647', 'uniFEEA', 'uniFEEC', 'uniFEEB', 'uni06C0', 'uniFBA5', 'uni06C1', 'uniFBA7', 'uniFBA9', 'uniFBA8', 'uni06C2', 'uni06C2.fina', 'uni06C2.medi', 'uni06C2.init', 'uni06BE', 'uniFBAB', 'uniFBAD', 'uniFBAC', 'uni06FF', 'uni06FF.fina', 'uni06FF.medi', 'uni06FF.init', 'uni0629', 'uniFE94', 'uni06C3', 'uni06C3.fina', 'uni0648', 'uniFEEE', 'uni06C4', 'uni06C4.fina', 'uni06CA', 'uni06CA.fina', 'uni06CF', 'uni06CF.fina', 'uni0624', 'uniFE86', 'uni08B1', 'uni06C5', 'uniFBE1', 'uni06C6', 'uniFBDA', 'uni06C7', 'uniFBD8', 'uni06C8', 'uniFBDC', 'uni06C9', 'uniFBE3', 'uni06CB', 'uniFBDF', 'uni0649', 'uniFEF0', 'uni064A', 'uniFEF2', 'uniFEF3', 'uni0626', 'uniFE8A', 'uniFE8C', 'uniFE8B', 'uni06CE', 'uni06CE.fina', 'uni06CE.init', 'uni08A9', 'uni08A9.fina', 'uni08A9.init', 'uni06CC', 'uniFBFD', 'uniFBFE', 'uni06CD', 'uni06CD.fina', 'uni06D0', 'uniFBE5', 'uniFBE6', 'uni06D1', 'uni06D1.fina', 'uni06D1.init', 'uni06D2', 'uniFBAF', 'uni06D3', 'uniFBB1', 'uni0676', 'uni0676.fina', 'uni0677', 'uni0677.fina', 'uni0678', 'uni0678.fina', 'uni0678.init', 'uni06D5', 'uni06D5.fina', 'uni075C', 'uni075C.fina', 'uni075C.medi', 'uni075C.init', 'uni075D', 'uni075D.fina', 'uni075D.medi', 'uni075D.init', 'uni075E', 'uni075E.fina', 'uni075E.medi', 'uni075E.init', 'uni075F', 'uni075F.fina', 'uni075F.medi', 'uni075F.init', 'uni0760', 'uni0760.fina', 'uni0760.medi', 'uni0760.init', 'uni0761', 'uni0761.fina', 'uni0761.medi', 'uni0761.init', 'uni0765', 'uni0765.fina', 'uni0765.medi', 'uni0765.init', 'uni0766', 'uni0766.fina', 'uni0766.medi', 'uni0766.init', 'uni0767', 'uni0767.fina', 'uni0767.init', 'uni0768', 'uni0768.fina', 'uni0768.medi', 'uni0768.init', 'uni0769', 'uni0769.fina', 'uni0769.medi', 'uni0769.init', 'uni076A', 'uni076A.fina', 'uni076A.medi', 'uni076A.init', 'uni076D', 'uni076D.fina', 'uni076D.medi', 'uni076D.init', 'uni0640', 'uniFEFB', 'uniFEFB.isol', 'uniFEFC', 'uniFEF7', 'uniFEF7.isol', 'uniFEF8', 'uniFEF9.isol', 'uniFEFA', 'lam_alefWavyhamzaabovear.isol', 'lam_alefWavyhamzaabovear.fina', 'lam_alefWavyhamzabelowar.isol', 'lam_alefWavyhamzabelowar.fina', 'uniFEF5.isol', 'uniFEF6', 'lam_alefWaslaar.isol', 'lam_highhamzaAlefar.isol', 'lam_highhamzaAlefar.fina', 'lam_alefWaslaar.fina', 'lamVabove_alefar.isol', 'lamVabove_alefar.fina', 'lamDotabove_alefar.isol', 'lamDotabove_alefar.fina', 'lamThreedotsabove_alefar.isol', 'lamThreedotsabove_alefar.fina', 'lamThreedotsbelow_alefar.isol', 'lamThreedotsbelow_alefar.fina', 'lamBar_alefar.isol', 'lamBar_alefar.fina', 'uniFDF2', 'uni06E5', 'uni06E6', 'alef_althb.fina', 'alef_althb.isol', 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight', 'nine', 'uni066B', 'uni066C', 'uni0660', 'uni0661', 'uni0662', 'uni0663', 'uni0664', 'uni0665', 'uni0666', 'uni0667', 'uni0668', 'uni0669', 'uni06F0', 'uni06F1', 'uni06F2', 'uni06F3', 'uni06F4', 'uni06F5', 'uni06F6', 'uni06F7', 'uni06F8', 'uni06F9', 'uni06F4.urdu', 'uni06F7.urdu', 'uni061E', 'uni06DE', 'uni06D4', 'uni060C', 'uni061B', 'uni061F', 'uni0600', 'uni066D', 'uni0601', 'uni0602', 'uni0603', 'uni060D', 'uni060E', 'uni060F', 'uni06FD', 'uni06DD', 'uniFD3E', 'uniFD3F', 'space', 'uni00A0', 'CR', 'uni060B', 'uniFDFC', 'uni25CC', 'uni06E9', 'uni06FE', 'uni066A', 'uniFE7A', 'uniFE70', 'uniFE74', 'uniFE76', 'uniFE78', 'uniFE7C', 'uniFC63', 'uniFE7E', 'lamVaboveMadda_alefar.fina', 'lamVaboveMadda_alefar.isol', 'feh_dotless.isol', 'beh_dotless_alt.init', 'hah_alt.isol', 'hah_alt.fina'] [code: mono-outliers]


    Result: [1;91;107mFAIL[0m

 >> [1;35;107mcom.google.fonts/check/dsig[0m
    [0;36;107mDoes the font have a DSIG table?[0m
    with NotoKufiArabic-Medium.ttf

    [1;35;107m  Rationale:                                                                [0m
    [0;30;107m  Microsoft Office 2013 and below products expect fonts to have a digital   [0m
    [0;30;107m  signature declared in a DSIG table in order to implement OpenType         [0m
    [0;30;107m  features. The EOL date for Microsoft Office 2013 products is 4/11/2023.   [0m
    [0;30;107m  This issue does not impact Microsoft Office 2016 and above products.      [0m
    [0;30;107m                                                                            [0m
    [0;30;107m  This checks verifies that this signature is available in the font.        [0m
    [0;30;107m                                                                            [0m
    [0;30;107m  A fake signature is enough to address this issue. If needed, a dummy      [0m
    [0;30;107m  table can be added to the font with the `gftools fix-dsig` script         [0m
    [0;30;107m  available at https://github.com/googlefonts/gftools                       [0m
    [0;30;107m                                                                            [0m
    [0;30;107m  Reference: https://github.com/googlefonts/fontbakery/issues/1845          [0m

    * [1;91;107mFAIL[0m: This font lacks a digital signature (DSIG table). Some applications may require one (even if only a dummy placeholder) in order to work properly. You can add a DSIG table by running the `gftools fix-dsig` script. [code: lacks-signature]


    Result: [1;91;107mFAIL[0m

 >> [1;35;107mcom.google.fonts/check/gdef_mark_chars[0m
    [0;36;107mCheck mark characters are in GDEF mark glyph class[0m
    with NotoKufiArabic-Medium.ttf

    [1;35;107m  Rationale:                                                                [0m
    [0;30;107m  Mark characters should be in the GDEF mark glyph class.                   [0m

    * [1;30;103mWARN[0m: The following mark characters could be in the GDEF mark glyph class:
	 U+065F [code: mark-chars]


    Result: [1;30;103mWARN[0m

 >> [1;35;107mcom.google.fonts/check/gpos_kerning_info[0m
    [0;36;107mDoes GPOS table have kerning information? This check skips monospaced fonts as defined by post.isFixedPitch value[0m
    with NotoKufiArabic-Medium.ttf

    * [1;30;103mWARN[0m: GPOS table lacks kerning information. [code: lacks-kern-info]


    Result: [1;30;103mWARN[0m

 >> [1;35;107mcom.google.fonts/check/outline_alignment_miss[0m
    [0;36;107mAre there any misaligned on-curve points?[0m
    with NotoKufiArabic-Medium.ttf

    [1;35;107m  Rationale:                                                                [0m
    [0;30;107m  This test heuristically looks for on-curve points which are close to, but [0m
    [0;30;107m  do not sit on, significant boundary coordinates. For example, a point     [0m
    [0;30;107m  which has a Y-coordinate of 1 or -1 might be a misplaced baseline point.  [0m
    [0;30;107m  As well as the baseline, the test also checks for points near the         [0m
    [0;30;107m  x-height (but only for lower case Latin letters), cap-height, ascender    [0m
    [0;30;107m  and descender Y coordinates.                                              [0m
    [0;30;107m                                                                            [0m
    [0;30;107m  Not all such misaligned curve points are a mistake, and sometimes the     [0m
    [0;30;107m  design may call for points in locations near the boundaries. As this test [0m
    [0;30;107m  is liable to generate significant numbers of false positives, the test    [0m
    [0;30;107m  will pass if there are more than 100 reported misalignments.              [0m

    * [1;30;103mWARN[0m: The following glyphs have on-curve points which have potentially incorrect y coordinates:
	* uni0621: X=128.0,Y=-0.5 (should be at baseline 0?)
	* uni06D2: X=206.0,Y=-1.0 (should be at baseline 0?)
	* uni06D3: X=206.0,Y=-1.0 (should be at baseline 0?)
	* three: X=136.0,Y=-1.0 (should be at baseline 0?)
	* nine: X=95.0,Y=-1.0 (should be at baseline 0?)
	* uni0601: X=50.0,Y=-2.0 (should be at baseline 0?)
	* uni0601: X=131.0,Y=-2.0 (should be at baseline 0?)
	* uni0601: X=320.0,Y=-2.0 (should be at baseline 0?)
	* uni0601: X=536.0,Y=-2.0 (should be at baseline 0?)
	* uni0601: X=626.0,Y=-2.0 (should be at baseline 0?) and 3 more. [code: found-misalignments]


    Result: [1;30;103mWARN[0m

 >> [1;35;107mcom.google.fonts/check/outline_semi_vertical[0m
    [0;36;107mDo outlines contain any semi-vertical or semi-horizontal lines?[0m
    with NotoKufiArabic-Medium.ttf

    [1;35;107m  Rationale:                                                                [0m
    [0;30;107m  This test detects line segments which are nearly, but not quite, exactly  [0m
    [0;30;107m  horizontal or vertical. Sometimes such lines are created by design, but   [0m
    [0;30;107m  often they are indicative of a design error.                              [0m
    [0;30;107m                                                                            [0m
    [0;30;107m  This test is disabled for italic styles, which often contain              [0m
    [0;30;107m  nearly-upright lines.                                                     [0m

    * [1;30;103mWARN[0m: The following glyphs have semi-vertical/semi-horizontal lines:
	* uni075B.fina: L<<172.0,-39.0>--<171.0,488.0>> and uni075B: L<<176.0,-39.0>--<175.0,488.0>> [code: found-semi-vertical]


    Result: [1;30;103mWARN[0m


Total:

    [1;97;101mERROR[0m: 0
    [1;91;107mFAIL[0m: 3
    [1;30;103mWARN[0m: 5
    [0;36;107mINFO[0m: 2
    [0;34;107mSKIP[0m: 18
    [0;32;107mPASS[0m: 49


DONE!

    [1;30;107mMeaning of check results:[0m

    An [1;97;101mERROR[0m is something wrong with FontBakery itself, possibly a bug.
    A [1;91;107mFAIL[0m is a problem with the font that must be fixed.
    A [1;30;103mWARN[0m is something that you should consider addressing.
    An [0;36;107mINFO[0m result simply prints something useful. Typically stats.
    A [0;32;107mPASS[0m means the font looks good for the given checking routine.
    And a [0;34;107mSKIP[0m happens when the check does not apply to the given font.

    If you get [1;97;101mERROR[0ms, please help us improve the tool by reporting them at
    [1;36;107mhttps://github.com/googlefonts/fontbakery/issues[0m

    (but other kinds of bug reports and/or
     feature requests are also always welcome, of course!)

