Start ... running 77 individual check executions.
 >> [1;35;107mcom.google.fonts/check/ots[0m
    [0;36;107mChecking with ots-sanitize.[0m
    with NotoSansKannada-CondensedLight.ttf

    * [1;30;103mWARN[0m: ots-sanitize passed this file, however warnings were printed:

WARNING: Layout: tags aren't arranged alphabetically.
WARNING: Layout: tags aren't arranged alphabetically.
WARNING: Layout: tags aren't arranged alphabetically.
WARNING: Layout: tags aren't arranged alphabetically.



    Result: [1;30;103mWARN[0m

 >> [1;35;107mcom.google.fonts/check/whitespace_glyphnames[0m
    [0;36;107mFont has **proper** whitespace glyph names?[0m
    with NotoSansKannada-CondensedLight.ttf

    [1;35;107m  Rationale:                                                                [0m
    [0;30;107m  This check enforces adherence to recommended whitespace (codepoints 0020  [0m
    [0;30;107m  and 00A0) glyph names according to the Adobe Glyph List.                  [0m

    * [1;91;107mFAIL[0m: Glyph 0x00A0 is called "uni00A0.knda": Change to "uni00A0" [code: non-compliant-00a0]


    Result: [1;91;107mFAIL[0m

 >> [1;35;107mcom.google.fonts/check/required_tables[0m
    [0;36;107mFont contains all required tables?[0m
    with NotoSansKannada-CondensedLight.ttf

    [1;35;107m  Rationale:                                                                [0m
    [0;30;107m  Depending on the typeface and coverage of a font, certain tables are      [0m
    [0;30;107m  recommended for optimum quality. For example, the performance of a        [0m
    [0;30;107m  non-linear font is improved if the VDMX, LTSH, and hdmx tables are        [0m
    [0;30;107m  present. Non-monospaced Latin fonts should have a kern table. A gasp      [0m
    [0;30;107m  table is necessary if a designer wants to influence the sizes at which    [0m
    [0;30;107m  grayscaling is used under Windows. A DSIG table containing a digital      [0m
    [0;30;107m  signature helps ensure the integrity of the font file. Etc.               [0m

    * [0;36;107mINFO[0m: This font contains the following optional tables [loca, GPOS, GSUB]


    Result: [0;36;107mINFO[0m

 >> [1;35;107mcom.google.fonts/check/superfamily/list[0m
    [0;36;107mList all superfamily filepaths[0m
    with NotoSansKannada-CondensedLight.ttf

    [1;35;107m  Rationale:                                                                [0m
    [0;30;107m  This is a merely informative check that lists all sibling families        [0m
    [0;30;107m  detected by fontbakery.                                                   [0m
    [0;30;107m                                                                            [0m
    [0;30;107m  Only the fontfiles in these directories will be considered in             [0m
    [0;30;107m  superfamily-level checks.                                                 [0m

    * [0;36;107mINFO[0m: . [code: family-path]


    Result: [0;36;107mINFO[0m

 >> [1;35;107mcom.google.fonts/check/xavgcharwidth[0m
    [0;36;107mCheck if OS/2 xAvgCharWidth is correct.[0m
    with NotoSansKannada-CondensedLight.ttf

    * [1;30;103mWARN[0m: OS/2 xAvgCharWidth is 453 but it should be 501 which corresponds to the average of the widths of all glyphs in the font.


    Result: [1;30;103mWARN[0m

 >> [1;35;107mcom.google.fonts/check/family_naming_recommendations[0m
    [0;36;107mFont follows the family naming recommendations?[0m
    with NotoSansKannada-CondensedLight.ttf

    * [0;36;107mINFO[0m: Font does not follow some family naming recommendations:

| Field | Value | Recommendation |
|:----- |:----- |:-------------- |
| Family Name | Noto Sans Kannada Condensed Light | exceeds max length (31) |
 [code: bad-entries]


    Result: [0;36;107mINFO[0m

 >> [1;35;107mcom.google.fonts/check/dsig[0m
    [0;36;107mDoes the font have a DSIG table?[0m
    with NotoSansKannada-CondensedLight.ttf

    [1;35;107m  Rationale:                                                                [0m
    [0;30;107m  Microsoft Office 2013 and below products expect fonts to have a digital   [0m
    [0;30;107m  signature declared in a DSIG table in order to implement OpenType         [0m
    [0;30;107m  features. The EOL date for Microsoft Office 2013 products is 4/11/2023.   [0m
    [0;30;107m  This issue does not impact Microsoft Office 2016 and above products.      [0m
    [0;30;107m                                                                            [0m
    [0;30;107m  This checks verifies that this signature is available in the font.        [0m
    [0;30;107m                                                                            [0m
    [0;30;107m  A fake signature is enough to address this issue. If needed, a dummy      [0m
    [0;30;107m  table can be added to the font with the `gftools fix-dsig` script         [0m
    [0;30;107m  available at https://github.com/googlefonts/gftools                       [0m
    [0;30;107m                                                                            [0m
    [0;30;107m  Reference: https://github.com/googlefonts/fontbakery/issues/1845          [0m

    * [1;91;107mFAIL[0m: This font lacks a digital signature (DSIG table). Some applications may require one (even if only a dummy placeholder) in order to work properly. You can add a DSIG table by running the `gftools fix-dsig` script. [code: lacks-signature]


    Result: [1;91;107mFAIL[0m

 >> [1;35;107mcom.google.fonts/check/gdef_spacing_marks[0m
    [0;36;107mCheck mark characters are in GDEF mark glyph class)[0m
    with NotoSansKannada-CondensedLight.ttf

    [1;35;107m  Rationale:                                                                [0m
    [0;30;107m  Glyphs in the GDEF mark glyph class should be non-spacing.                [0m
    [0;30;107m  Spacing glyphs in the GDEF mark glyph class may have incorrect anchor     [0m
    [0;30;107m  positioning that was only intended for building composite glyphs during   [0m
    [0;30;107m  design.                                                                   [0m

    * [1;30;103mWARN[0m: The following spacing glyphs may be in the GDEF mark glyph class by mistake:
	 aavowelsignaltknda, aavowelsignknda, aivowelsignknda, auvowelsignknda, eevowelsignknda, evowelsignaltknda, iivowelsignknda, ivowelsignknda, lengthmarkknda, oovowelsignknda and 9 more. [code: spacing-mark-glyphs]


    Result: [1;30;103mWARN[0m

 >> [1;35;107mcom.google.fonts/check/gdef_mark_chars[0m
    [0;36;107mCheck mark characters are in GDEF mark glyph class[0m
    with NotoSansKannada-CondensedLight.ttf

    [1;35;107m  Rationale:                                                                [0m
    [0;30;107m  Mark characters should be in the GDEF mark glyph class.                   [0m

    * [1;30;103mWARN[0m: The following mark characters could be in the GDEF mark glyph class:
	 U+0C82, U+0C83, U+0CC3, U+0CC4, U+0CCD, U+0CD6, U+0CE2 and U+0CE3 [code: mark-chars]


    Result: [1;30;103mWARN[0m

 >> [1;35;107mcom.google.fonts/check/outline_alignment_miss[0m
    [0;36;107mAre there any misaligned on-curve points?[0m
    with NotoSansKannada-CondensedLight.ttf

    [1;35;107m  Rationale:                                                                [0m
    [0;30;107m  This test heuristically looks for on-curve points which are close to, but [0m
    [0;30;107m  do not sit on, significant boundary coordinates. For example, a point     [0m
    [0;30;107m  which has a Y-coordinate of 1 or -1 might be a misplaced baseline point.  [0m
    [0;30;107m  As well as the baseline, the test also checks for points near the         [0m
    [0;30;107m  x-height (but only for lower case Latin letters), cap-height, ascender    [0m
    [0;30;107m  and descender Y coordinates.                                              [0m
    [0;30;107m                                                                            [0m
    [0;30;107m  Not all such misaligned curve points are a mistake, and sometimes the     [0m
    [0;30;107m  design may call for points in locations near the boundaries. As this test [0m
    [0;30;107m  is liable to generate significant numbers of false positives, the test    [0m
    [0;30;107m  will pass if there are more than 100 reported misalignments.              [0m

    * [1;30;103mWARN[0m: The following glyphs have on-curve points which have potentially incorrect y coordinates:
	* uni0C84: X=734.0,Y=1.5 (should be at baseline 0?)
	* iiknda: X=631.0,Y=2.0 (should be at baseline 0?)
	* uknda: X=698.0,Y=2.0 (should be at baseline 0?)
	* uuknda: X=684.5,Y=-1.0 (should be at baseline 0?)
	* rvocalicknda: X=571.5,Y=688.0 (should be at cap-height 690?)
	* lvocalicknda: X=509.0,Y=-0.5 (should be at baseline 0?)
	* kaknda: X=364.5,Y=688.0 (should be at cap-height 690?)
	* ghaknda: X=543.5,Y=688.0 (should be at cap-height 690?)
	* chaknda: X=567.5,Y=688.0 (should be at cap-height 690?)
	* taknda: X=403.5,Y=688.0 (should be at cap-height 690?) and 47 more. [code: found-misalignments]


    Result: [1;30;103mWARN[0m

 >> [1;35;107mcom.google.fonts/check/outline_colinear_vectors[0m
    [0;36;107mDo any segments have colinear vectors?[0m
    with NotoSansKannada-CondensedLight.ttf

    [1;35;107m  Rationale:                                                                [0m
    [0;30;107m  This test looks for consecutive line segments which have the same angle.  [0m
    [0;30;107m  This normally happens if an outline point has been added by accident.     [0m
    [0;30;107m                                                                            [0m
    [0;30;107m  This test is not run for variable fonts, as they may legitimately have    [0m
    [0;30;107m  colinear vectors.                                                         [0m

    * [1;30;103mWARN[0m: The following glyphs have colinear vectors:
	* aaknda: L<<89.0,318.0>--<89.0,316.0>> -> L<<89.0,316.0>--<89.0,306.0>>
	* aknda: L<<89.0,318.0>--<89.0,316.0>> -> L<<89.0,316.0>--<89.0,306.0>>
	* rraknda: L<<525.0,295.0>--<525.0,295.0>> -> L<<525.0,295.0>--<525.0,295.0>>
	* shaknda: L<<306.0,496.0>--<300.0,496.0>> -> L<<300.0,496.0>--<293.0,496.0>>
	* ttanocrestknda: L<<455.0,328.0>--<452.0,328.0>> -> L<<452.0,328.0>--<396.0,328.0>>
	* ttaviramaknda: L<<455.0,328.0>--<452.0,328.0>> -> L<<452.0,328.0>--<396.0,328.0>> and ttevowelknda: L<<455.0,328.0>--<452.0,328.0>> -> L<<452.0,328.0>--<396.0,328.0>> [code: found-colinear-vectors]


    Result: [1;30;103mWARN[0m

 >> [1;35;107mcom.google.fonts/check/outline_jaggy_segments[0m
    [0;36;107mDo outlines contain any jaggy segments?[0m
    with NotoSansKannada-CondensedLight.ttf

    [1;35;107m  Rationale:                                                                [0m
    [0;30;107m  This test heuristically detects outline segments which form a             [0m
    [0;30;107m  particularly small angle, indicative of an outline error. This may cause  [0m
    [0;30;107m  false positives in cases such as extreme ink traps, so should be regarded [0m
    [0;30;107m  as advisory and backed up by manual inspection.                           [0m

    * [1;30;103mWARN[0m: The following glyphs have jaggy segments:
	* kassaknda: B<<439.0,-224.0>-<439.0,-204.0>-<437.0,-185.0>>/B<<437.0,-185.0>-<432.0,-220.0>-<414.0,-242.5>> = 14.139108311650475
	* kassanocrestknda: B<<439.0,-224.0>-<439.0,-204.0>-<437.0,-185.0>>/B<<437.0,-185.0>-<432.0,-220.0>-<414.0,-242.5>> = 14.139108311650475
	* kassaviramaknda: B<<439.0,-224.0>-<439.0,-204.0>-<437.0,-185.0>>/B<<437.0,-185.0>-<432.0,-220.0>-<414.0,-242.5>> = 14.139108311650475
	* kassevowelknda: B<<439.0,-224.0>-<439.0,-204.0>-<437.0,-185.0>>/B<<437.0,-185.0>-<432.0,-220.0>-<414.0,-242.5>> = 14.139108311650475
	* kassivowelknda: B<<438.0,-224.0>-<438.0,-204.0>-<436.0,-185.0>>/B<<436.0,-185.0>-<431.0,-220.0>-<413.0,-242.5>> = 14.139108311650475
	* ssasubscriptaltknda: B<<403.0,-407.0>-<403.0,-387.0>-<401.0,-368.0>>/B<<401.0,-368.0>-<396.0,-403.0>-<378.0,-425.5>> = 14.139108311650475
	* ssasubscriptknda: B<<75.0,-276.0>-<75.0,-256.0>-<73.0,-237.0>>/B<<73.0,-237.0>-<68.0,-272.0>-<50.0,-294.5>> = 14.139108311650475 and ssasubscriptrightknda: B<<93.0,-374.0>-<93.0,-354.0>-<91.0,-335.0>>/B<<91.0,-335.0>-<86.0,-370.0>-<68.0,-392.5>> = 14.139108311650475 [code: found-jaggy-segments]


    Result: [1;30;103mWARN[0m


Total:

    [1;97;101mERROR[0m: 0
    [1;91;107mFAIL[0m: 2
    [1;30;103mWARN[0m: 7
    [0;36;107mINFO[0m: 3
    [0;34;107mSKIP[0m: 18
    [0;32;107mPASS[0m: 47


DONE!

    [1;30;107mMeaning of check results:[0m

    An [1;97;101mERROR[0m is something wrong with FontBakery itself, possibly a bug.
    A [1;91;107mFAIL[0m is a problem with the font that must be fixed.
    A [1;30;103mWARN[0m is something that you should consider addressing.
    An [0;36;107mINFO[0m result simply prints something useful. Typically stats.
    A [0;32;107mPASS[0m means the font looks good for the given checking routine.
    And a [0;34;107mSKIP[0m happens when the check does not apply to the given font.

    If you get [1;97;101mERROR[0ms, please help us improve the tool by reporting them at
    [1;36;107mhttps://github.com/googlefonts/fontbakery/issues[0m

    (but other kinds of bug reports and/or
     feature requests are also always welcome, of course!)

