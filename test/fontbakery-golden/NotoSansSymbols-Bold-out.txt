Start ... running 77 individual check executions.
 >> [1;35;107mcom.google.fonts/check/unicode_range_bits[0m
    [0;36;107mEnsure UnicodeRange bits are properly set.[0m
    with NotoSansSymbols-Bold.ttf

    [1;35;107m  Rationale:                                                                [0m
    [0;30;107m  When the UnicodeRange bits on the OS/2 table are not properly set, some   [0m
    [0;30;107m  programs running on Windows may not recognize the font and use a system   [0m
    [0;30;107m  fallback font instead. For that reason, this check calculates the proper  [0m
    [0;30;107m  settings by inspecting the glyphs declared on the cmap table and then     [0m
    [0;30;107m  ensures that their corresponding ranges are enabled.                      [0m

    * [1;30;103mWARN[0m: UnicodeRange bit 57 "Non-Plane 0 *" should be 0 because cmap has none of the 2048 codepoints in this range. [code: bad-range-bit]


    Result: [1;30;103mWARN[0m

 >> [1;35;107mcom.google.fonts/check/required_tables[0m
    [0;36;107mFont contains all required tables?[0m
    with NotoSansSymbols-Bold.ttf

    [1;35;107m  Rationale:                                                                [0m
    [0;30;107m  Depending on the typeface and coverage of a font, certain tables are      [0m
    [0;30;107m  recommended for optimum quality. For example, the performance of a        [0m
    [0;30;107m  non-linear font is improved if the VDMX, LTSH, and hdmx tables are        [0m
    [0;30;107m  present. Non-monospaced Latin fonts should have a kern table. A gasp      [0m
    [0;30;107m  table is necessary if a designer wants to influence the sizes at which    [0m
    [0;30;107m  grayscaling is used under Windows. A DSIG table containing a digital      [0m
    [0;30;107m  signature helps ensure the integrity of the font file. Etc.               [0m

    * [0;36;107mINFO[0m: This font contains the following optional tables [loca, GSUB]


    Result: [0;36;107mINFO[0m

 >> [1;35;107mcom.google.fonts/check/superfamily/list[0m
    [0;36;107mList all superfamily filepaths[0m
    with NotoSansSymbols-Bold.ttf

    [1;35;107m  Rationale:                                                                [0m
    [0;30;107m  This is a merely informative check that lists all sibling families        [0m
    [0;30;107m  detected by fontbakery.                                                   [0m
    [0;30;107m                                                                            [0m
    [0;30;107m  Only the fontfiles in these directories will be considered in             [0m
    [0;30;107m  superfamily-level checks.                                                 [0m

    * [0;36;107mINFO[0m: . [code: family-path]


    Result: [0;36;107mINFO[0m

 >> [1;35;107mcom.google.fonts/check/dsig[0m
    [0;36;107mDoes the font have a DSIG table?[0m
    with NotoSansSymbols-Bold.ttf

    [1;35;107m  Rationale:                                                                [0m
    [0;30;107m  Microsoft Office 2013 and below products expect fonts to have a digital   [0m
    [0;30;107m  signature declared in a DSIG table in order to implement OpenType         [0m
    [0;30;107m  features. The EOL date for Microsoft Office 2013 products is 4/11/2023.   [0m
    [0;30;107m  This issue does not impact Microsoft Office 2016 and above products.      [0m
    [0;30;107m                                                                            [0m
    [0;30;107m  This checks verifies that this signature is available in the font.        [0m
    [0;30;107m                                                                            [0m
    [0;30;107m  A fake signature is enough to address this issue. If needed, a dummy      [0m
    [0;30;107m  table can be added to the font with the `gftools fix-dsig` script         [0m
    [0;30;107m  available at https://github.com/googlefonts/gftools                       [0m
    [0;30;107m                                                                            [0m
    [0;30;107m  Reference: https://github.com/googlefonts/fontbakery/issues/1845          [0m

    * [1;91;107mFAIL[0m: This font lacks a digital signature (DSIG table). Some applications may require one (even if only a dummy placeholder) in order to work properly. You can add a DSIG table by running the `gftools fix-dsig` script. [code: lacks-signature]


    Result: [1;91;107mFAIL[0m

 >> [1;35;107mcom.google.fonts/check/gdef_mark_chars[0m
    [0;36;107mCheck mark characters are in GDEF mark glyph class[0m
    with NotoSansSymbols-Bold.ttf

    [1;35;107m  Rationale:                                                                [0m
    [0;30;107m  Mark characters should be in the GDEF mark glyph class.                   [0m

    * [1;30;103mWARN[0m: The following mark characters could be in the GDEF mark glyph class:
	 U+20DD, U+20DE, U+20DF, U+20E0, U+20E2, U+20E3 and U+20E4 [code: mark-chars]


    Result: [1;30;103mWARN[0m

 >> [1;35;107mcom.google.fonts/check/gpos_kerning_info[0m
    [0;36;107mDoes GPOS table have kerning information? This check skips monospaced fonts as defined by post.isFixedPitch value[0m
    with NotoSansSymbols-Bold.ttf

    * [1;30;103mWARN[0m: GPOS table lacks kerning information. [code: lacks-kern-info]


    Result: [1;30;103mWARN[0m

 >> [1;35;107mcom.google.fonts/check/outline_colinear_vectors[0m
    [0;36;107mDo any segments have colinear vectors?[0m
    with NotoSansSymbols-Bold.ttf

    [1;35;107m  Rationale:                                                                [0m
    [0;30;107m  This test looks for consecutive line segments which have the same angle.  [0m
    [0;30;107m  This normally happens if an outline point has been added by accident.     [0m
    [0;30;107m                                                                            [0m
    [0;30;107m  This test is not run for variable fonts, as they may legitimately have    [0m
    [0;30;107m  colinear vectors.                                                         [0m

    * [1;30;103mWARN[0m: The following glyphs have colinear vectors:
	* u1F17C: L<<640.0,475.0>--<640.0,476.0>> -> L<<640.0,476.0>--<640.0,477.0>>
	* u1F764: L<<403.0,0.0>--<406.0,171.0>> -> L<<406.0,171.0>--<411.0,282.0>>
	* u1F764: L<<517.0,283.0>--<524.0,171.0>> -> L<<524.0,171.0>--<527.0,0.0>>
	* uni262B: L<<201.0,24.0>--<215.0,23.0>> -> L<<215.0,23.0>--<228.0,23.0>>
	* uni262B: L<<636.0,23.0>--<650.0,23.0>> -> L<<650.0,23.0>--<663.0,24.0>>
	* uni2697: L<<281.0,48.0>--<283.0,60.0>> -> L<<283.0,60.0>--<321.0,230.0>>
	* uni2697: L<<774.0,230.0>--<812.0,60.0>> -> L<<812.0,60.0>--<814.0,48.0>> and uni26FD: L<<553.0,610.0>--<554.0,541.0>> -> L<<554.0,541.0>--<554.0,524.0>> [code: found-colinear-vectors]


    Result: [1;30;103mWARN[0m

 >> [1;35;107mcom.google.fonts/check/outline_jaggy_segments[0m
    [0;36;107mDo outlines contain any jaggy segments?[0m
    with NotoSansSymbols-Bold.ttf

    [1;35;107m  Rationale:                                                                [0m
    [0;30;107m  This test heuristically detects outline segments which form a             [0m
    [0;30;107m  particularly small angle, indicative of an outline error. This may cause  [0m
    [0;30;107m  false positives in cases such as extreme ink traps, so should be regarded [0m
    [0;30;107m  as advisory and backed up by manual inspection.                           [0m

    * [1;30;103mWARN[0m: The following glyphs have jaggy segments:
	* W.001: B<<543.0,484.5>-<537.0,516.0>-<535.0,534.0>>/B<<535.0,534.0>-<533.0,516.0>-<527.0,484.5>> = 12.680383491819825
	* W.001: B<<730.5,221.0>-<739.0,177.0>-<743.0,144.0>>/B<<743.0,144.0>-<746.0,168.0>-<752.5,202.0>> = 14.03624346792643
	* W.001_enccirclebackslashcomb: B<<709.0,484.5>-<703.0,516.0>-<701.0,534.0>>/B<<701.0,534.0>-<699.0,516.0>-<693.0,484.5>> = 12.680383491819825
	* W.001_enccirclebackslashcomb: B<<896.5,221.0>-<905.0,177.0>-<909.0,144.0>>/B<<909.0,144.0>-<912.0,168.0>-<918.5,202.0>> = 14.03624346792643
	* W.001_enclosingcirclecomb: B<<709.0,484.5>-<703.0,516.0>-<701.0,534.0>>/B<<701.0,534.0>-<699.0,516.0>-<693.0,484.5>> = 12.680383491819825
	* W.001_enclosingcirclecomb: B<<896.5,221.0>-<905.0,177.0>-<909.0,144.0>>/B<<909.0,144.0>-<912.0,168.0>-<918.5,202.0>> = 14.03624346792643
	* W.001_enclosingdiamondcomb: B<<1160.5,181.0>-<1169.0,137.0>-<1173.0,104.0>>/B<<1173.0,104.0>-<1176.0,128.0>-<1182.5,162.0>> = 14.03624346792643
	* W.001_enclosingdiamondcomb: B<<973.0,444.5>-<967.0,476.0>-<965.0,494.0>>/B<<965.0,494.0>-<963.0,476.0>-<957.0,444.5>> = 12.680383491819825
	* W.001_enclosingsquarecomb: B<<719.0,484.5>-<713.0,516.0>-<711.0,534.0>>/B<<711.0,534.0>-<709.0,516.0>-<703.0,484.5>> = 12.680383491819825
	* W.001_enclosingsquarecomb: B<<906.5,221.0>-<915.0,177.0>-<919.0,144.0>>/B<<919.0,144.0>-<922.0,168.0>-<928.5,202.0>> = 14.03624346792643 and 58 more. [code: found-jaggy-segments]


    Result: [1;30;103mWARN[0m

 >> [1;35;107mcom.google.fonts/check/outline_semi_vertical[0m
    [0;36;107mDo outlines contain any semi-vertical or semi-horizontal lines?[0m
    with NotoSansSymbols-Bold.ttf

    [1;35;107m  Rationale:                                                                [0m
    [0;30;107m  This test detects line segments which are nearly, but not quite, exactly  [0m
    [0;30;107m  horizontal or vertical. Sometimes such lines are created by design, but   [0m
    [0;30;107m  often they are indicative of a design error.                              [0m
    [0;30;107m                                                                            [0m
    [0;30;107m  This test is disabled for italic styles, which often contain              [0m
    [0;30;107m  nearly-upright lines.                                                     [0m

    * [1;30;103mWARN[0m: The following glyphs have semi-vertical/semi-horizontal lines:
	* male: L<<571.0,547.0>--<572.0,293.0>>
	* uni218B: L<<453.0,410.0>--<452.0,287.0>>
	* uni218B: L<<559.0,707.0>--<558.0,575.0>>
	* uni2676: L<<664.0,427.0>--<545.0,428.0>>
	* uni267C: L<<456.0,108.0>--<455.0,231.0>>
	* uni267D: L<<455.0,231.0>--<456.0,106.0>>
	* uni2693: L<<50.0,100.0>--<49.0,325.0>>
	* uni2693: L<<709.0,325.0>--<708.0,100.0>>
	* uni2696: L<<198.0,137.0>--<196.0,396.0>>
	* uni2696: L<<250.0,396.0>--<249.0,137.0>> and 6 more. [code: found-semi-vertical]


    Result: [1;30;103mWARN[0m


Total:

    [1;97;101mERROR[0m: 0
    [1;91;107mFAIL[0m: 1
    [1;30;103mWARN[0m: 6
    [0;36;107mINFO[0m: 2
    [0;34;107mSKIP[0m: 17
    [0;32;107mPASS[0m: 51


DONE!

    [1;30;107mMeaning of check results:[0m

    An [1;97;101mERROR[0m is something wrong with FontBakery itself, possibly a bug.
    A [1;91;107mFAIL[0m is a problem with the font that must be fixed.
    A [1;30;103mWARN[0m is something that you should consider addressing.
    An [0;36;107mINFO[0m result simply prints something useful. Typically stats.
    A [0;32;107mPASS[0m means the font looks good for the given checking routine.
    And a [0;34;107mSKIP[0m happens when the check does not apply to the given font.

    If you get [1;97;101mERROR[0ms, please help us improve the tool by reporting them at
    [1;36;107mhttps://github.com/googlefonts/fontbakery/issues[0m

    (but other kinds of bug reports and/or
     feature requests are also always welcome, of course!)

