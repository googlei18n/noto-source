Start ... running 71 individual check executions.
 >> [1;35;107mcom.google.fonts/check/unicode_range_bits[0m
    [0;36;107mEnsure UnicodeRange bits are properly set.[0m
    with NotoSansKaithi-Regular.ttf

    [1;35;107m  Rationale:                                                                [0m
    [0;30;107m  When the UnicodeRange bits on the OS/2 table are not properly set, some   [0m
    [0;30;107m  programs running on Windows may not recognize the font and use a system   [0m
    [0;30;107m  fallback font instead. For that reason, this check calculates the proper  [0m
    [0;30;107m  settings by inspecting the glyphs declared on the cmap table and then     [0m
    [0;30;107m  ensures that their corresponding ranges are enabled.                      [0m

    * [1;30;103mWARN[0m: UnicodeRange bit 0 "Basic Latin" should be 1 because cmap has 13 of the 128 codepoints in this range. [code: bad-range-bit]
    * [1;30;103mWARN[0m: UnicodeRange bit 1 "Latin-1 Supplement" should be 1 because cmap has 1 of the 128 codepoints in this range. [code: bad-range-bit]
    * [1;30;103mWARN[0m: UnicodeRange bit 15 "Devanagari" should be 1 because cmap has 10 of the 128 codepoints in this range. [code: bad-range-bit]
    * [1;30;103mWARN[0m: UnicodeRange bit 57 "Non-Plane 0 *" should be 0 because cmap has none of the 2048 codepoints in this range. [code: bad-range-bit]
    * [1;30;103mWARN[0m: UnicodeRange bit 67 "Arabic Presentation Forms-B" should be 1 because cmap has 1 of the 144 codepoints in this range. [code: bad-range-bit]


    Result: [1;30;103mWARN[0m

 >> [1;35;107mcom.google.fonts/check/required_tables[0m
    [0;36;107mFont contains all required tables?[0m
    with NotoSansKaithi-Regular.ttf

    [1;35;107m  Rationale:                                                                [0m
    [0;30;107m  Depending on the typeface and coverage of a font, certain tables are      [0m
    [0;30;107m  recommended for optimum quality. For example, the performance of a        [0m
    [0;30;107m  non-linear font is improved if the VDMX, LTSH, and hdmx tables are        [0m
    [0;30;107m  present. Non-monospaced Latin fonts should have a kern table. A gasp      [0m
    [0;30;107m  table is necessary if a designer wants to influence the sizes at which    [0m
    [0;30;107m  grayscaling is used under Windows. A DSIG table containing a digital      [0m
    [0;30;107m  signature helps ensure the integrity of the font file. Etc.               [0m

    * [0;36;107mINFO[0m: This font contains the following optional tables [loca, GPOS, GSUB, gasp]


    Result: [0;36;107mINFO[0m

 >> [1;35;107mcom.google.fonts/check/superfamily/list[0m
    [0;36;107mList all superfamily filepaths[0m
    with NotoSansKaithi-Regular.ttf

    [1;35;107m  Rationale:                                                                [0m
    [0;30;107m  This is a merely informative check that lists all sibling families        [0m
    [0;30;107m  detected by fontbakery.                                                   [0m
    [0;30;107m                                                                            [0m
    [0;30;107m  Only the fontfiles in these directories will be considered in             [0m
    [0;30;107m  superfamily-level checks.                                                 [0m

    * [0;36;107mINFO[0m: . [code: family-path]


    Result: [0;36;107mINFO[0m

 >> [1;35;107mcom.google.fonts/check/post_table_version[0m
    [0;36;107mFont has correct post table version?[0m
    with NotoSansKaithi-Regular.ttf

    [1;35;107m  Rationale:                                                                [0m
    [0;30;107m  Apple recommends against using 'post' table format 3 under most           [0m
    [0;30;107m  circumstances, as it can create problems with some printer drivers and    [0m
    [0;30;107m  PDF documents. The savings in disk space usually does not justify the     [0m
    [0;30;107m  potential loss in functionality.                                          [0m
    [0;30;107m  Source: https://developer.apple.com/fonts/TrueType-Reference-Manual/RM06/Chap6post.html[0m
    [0;30;107m                                                                            [0m
    [0;30;107m  The CFF2 table does not contain glyph names, so variable OTFs should be   [0m
    [0;30;107m  allowed to use post table version 2.                                      [0m
    [0;30;107m                                                                            [0m
    [0;30;107m  This check expects:                                                       [0m
    [0;30;107m  - Version 2 for TTF or OTF CFF2 Variable fonts                            [0m
    [0;30;107m  - Version 3 for OTF                                                       [0m

    * [1;91;107mFAIL[0m: Post table should be version 2 instead of 3.0.


    Result: [1;91;107mFAIL[0m

 >> [1;35;107mcom.google.fonts/check/monospace[0m
    [0;36;107mChecking correctness of monospaced metadata.[0m
    with NotoSansKaithi-Regular.ttf

    [1;35;107m  Rationale:                                                                [0m
    [0;30;107m  There are various metadata in the OpenType spec to specify if a font is   [0m
    [0;30;107m  monospaced or not. If the font is not truly monospaced, then no           [0m
    [0;30;107m  monospaced metadata should be set (as sometimes they mistakenly are...)   [0m
    [0;30;107m                                                                            [0m
    [0;30;107m  Requirements for monospace fonts:                                         [0m
    [0;30;107m                                                                            [0m
    [0;30;107m  * post.isFixedPitch - "Set to 0 if the font is proportionally spaced,     [0m
    [0;30;107m  non-zero if the font is not proportionally spaced (monospaced)"           [0m
    [0;30;107m    www.microsoft.com/typography/otspec/post.htm                            [0m
    [0;30;107m                                                                            [0m
    [0;30;107m  * hhea.advanceWidthMax must be correct, meaning no glyph's width value is [0m
    [0;30;107m  greater.                                                                  [0m
    [0;30;107m    www.microsoft.com/typography/otspec/hhea.htm                            [0m
    [0;30;107m                                                                            [0m
    [0;30;107m  * OS/2.panose.bProportion must be set to 9 (monospace). Spec says: "The   [0m
    [0;30;107m  PANOSE definition contains ten digits each of which currently describes   [0m
    [0;30;107m  up to sixteen variations. Windows uses bFamilyType, bSerifStyle and       [0m
    [0;30;107m  bProportion in the font mapper to determine family type. It also uses     [0m
    [0;30;107m  bProportion to determine if the font is monospaced."                      [0m
    [0;30;107m    www.microsoft.com/typography/otspec/os2.htm#pan                         [0m
    [0;30;107m    monotypecom-test.monotype.de/services/pan2                              [0m
    [0;30;107m                                                                            [0m
    [0;30;107m  * OS/2.xAvgCharWidth must be set accurately.                              [0m
    [0;30;107m    "OS/2.xAvgCharWidth is used when rendering monospaced fonts, at least   [0m
    [0;30;107m  by Windows GDI"                                                           [0m
    [0;30;107m    http://typedrawers.com/discussion/comment/15397/#Comment_15397          [0m
    [0;30;107m                                                                            [0m
    [0;30;107m  Also we should report an error for glyphs not of average width.           [0m
    [0;30;107m                                                                            [0m
    [0;30;107m  Please also note:                                                         [0m
    [0;30;107m  Thomas Phinney told us that a few years ago (as of December 2019), if you [0m
    [0;30;107m  gave a font a monospace flag in Panose, Microsoft Word would ignore the   [0m
    [0;30;107m  actual advance widths and treat it as monospaced. Source:                 [0m
    [0;30;107m  https://typedrawers.com/discussion/comment/45140/#Comment_45140           [0m

    * [1;91;107mFAIL[0m: On monospaced fonts, the value of post.isFixedPitch must be set to a non-zero value (meaning 'fixed width monospaced'), but got 0 instead. [code: mono-bad-post-isFixedPitch]
    * [1;91;107mFAIL[0m: On monospaced fonts, the value of OS/2.panose.bProportion must be set to 9 (proportion: monospaced), but got 2 instead. [code: mono-bad-panose-proportion]
    * [1;30;103mWARN[0m: Font is monospaced but 278 glyphs (88.53503184713377%) have a different width. You should check the widths of: ['uni000D', 'space', 'u11082', 'u11083', 'u11084', 'u11085', 'u11086', 'u11087', 'u11088', 'u11089', 'u1108A', 'u1108B', 'u1108C', 'u1108D', 'u1108E', 'u1108F', 'u11090', 'u11091', 'u11092', 'u11093', 'u11094', 'u11095', 'u11096', 'u11097', 'u11098', 'u11099', 'u1109A', 'u1109B', 'u1109C', 'u1109D', 'u1109E', 'u1109F', 'u110A0', 'u110A1', 'u110A2', 'u110A3', 'u110A4', 'u110A5', 'u110A6', 'u110A7', 'u110A8', 'u110A9', 'u110AA', 'u110AB', 'u110AC', 'u110AD', 'u110AE', 'u110AF', 'u110B0', 'u110B2', 'u110B7', 'u110B8', 'u110BB', 'u110BC', 'u110BD', 'u110C0', 'u110C1', 'glyph00068', 'glyph00069', 'glyph00070', 'glyph00071', 'glyph00072', 'glyph00073', 'glyph00074', 'glyph00075', 'glyph00076', 'glyph00077', 'glyph00078', 'glyph00079', 'glyph00080', 'glyph00081', 'glyph00082', 'glyph00083', 'glyph00084', 'glyph00087', 'glyph00088', 'glyph00089', 'glyph00090', 'glyph00091', 'glyph00092', 'glyph00093', 'glyph00094', 'glyph00095', 'glyph00096', 'glyph00097', 'glyph00098', 'glyph00099', 'glyph00100', 'glyph00101', 'glyph00102', 'glyph00103', 'glyph00104', 'glyph00105', 'glyph00106', 'uni0966', 'uni0967', 'uni0968', 'uni0969', 'uni096A', 'uni096B', 'uni096C', 'uni096D', 'uni096E', 'uni096F', 'glyph00117', 'glyph00118', 'glyph00119', 'glyph00120', 'glyph00121', 'glyph00122', 'glyph00123', 'glyph00124', 'glyph00125', 'glyph00126', 'glyph00127', 'glyph00128', 'glyph00129', 'glyph00130', 'glyph00131', 'glyph00132', 'glyph00133', 'glyph00134', 'glyph00135', 'glyph00136', 'glyph00137', 'glyph00138', 'glyph00139', 'glyph00140', 'glyph00141', 'glyph00142', 'glyph00143', 'glyph00144', 'glyph00145', 'glyph00146', 'glyph00147', 'glyph00148', 'glyph00149', 'glyph00150', 'glyph00151', 'glyph00152', 'glyph00153', 'glyph00154', 'glyph00155', 'glyph00156', 'glyph00157', 'glyph00158', 'glyph00159', 'glyph00160', 'glyph00161', 'glyph00162', 'glyph00163', 'glyph00164', 'glyph00165', 'glyph00166', 'glyph00167', 'glyph00168', 'glyph00169', 'glyph00170', 'glyph00171', 'glyph00172', 'glyph00173', 'glyph00174', 'glyph00175', 'glyph00176', 'glyph00177', 'glyph00178', 'glyph00179', 'glyph00180', 'glyph00181', 'glyph00182', 'glyph00183', 'glyph00184', 'glyph00185', 'glyph00186', 'glyph00187', 'glyph00188', 'glyph00189', 'glyph00190', 'glyph00191', 'glyph00192', 'glyph00193', 'glyph00194', 'glyph00195', 'glyph00196', 'glyph00197', 'glyph00198', 'glyph00199', 'glyph00200', 'glyph00201', 'glyph00202', 'glyph00203', 'glyph00204', 'glyph00205', 'glyph00206', 'glyph00207', 'glyph00208', 'glyph00209', 'glyph00210', 'glyph00211', 'glyph00212', 'glyph00213', 'u110BE', 'u110BF', 'glyph00220', 'glyph00234', 'glyph00235', 'glyph00236', 'glyph00237', 'glyph00238', 'glyph00239', 'glyph00240', 'glyph00241', 'glyph00242', 'glyph00243', 'glyph00244', 'glyph00245', 'glyph00246', 'glyph00247', 'glyph00248', 'glyph00249', 'glyph00250', 'glyph00251', 'glyph00252', 'glyph00253', 'glyph00254', 'glyph00255', 'glyph00256', 'glyph00257', 'glyph00258', 'glyph00259', 'glyph00260', 'glyph00261', 'glyph00262', 'glyph00263', 'glyph00264', 'glyph00265', 'glyph00266', 'glyph00267', 'glyph00268', 'glyph00269', 'glyph00270', 'glyph00271', 'glyph00272', 'glyph00273', 'glyph00274', 'glyph00276', 'glyph00277', 'glyph00278', 'glyph00279', 'glyph00280', 'glyph00281', 'glyph00282', 'glyph00283', 'glyph00284', 'glyph00285', 'glyph00286', 'glyph00287', 'glyph00288', 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight', 'nine', 'uniA830', 'uniA831', 'uniA832', 'uniA833', 'uniA834', 'uniA835', 'uniA836', 'uniA837', 'uniA838', 'uniA839'] [code: mono-outliers]


    Result: [1;91;107mFAIL[0m

 >> [1;35;107mcom.google.fonts/check/dsig[0m
    [0;36;107mDoes the font have a DSIG table?[0m
    with NotoSansKaithi-Regular.ttf

    [1;35;107m  Rationale:                                                                [0m
    [0;30;107m  Microsoft Office 2013 and below products expect fonts to have a digital   [0m
    [0;30;107m  signature declared in a DSIG table in order to implement OpenType         [0m
    [0;30;107m  features. The EOL date for Microsoft Office 2013 products is 4/11/2023.   [0m
    [0;30;107m  This issue does not impact Microsoft Office 2016 and above products.      [0m
    [0;30;107m                                                                            [0m
    [0;30;107m  This checks verifies that this signature is available in the font.        [0m
    [0;30;107m                                                                            [0m
    [0;30;107m  A fake signature is enough to address this issue. If needed, a dummy      [0m
    [0;30;107m  table can be added to the font with the `gftools fix-dsig` script         [0m
    [0;30;107m  available at https://github.com/googlefonts/gftools                       [0m
    [0;30;107m                                                                            [0m
    [0;30;107m  Reference: https://github.com/googlefonts/fontbakery/issues/1845          [0m

    * [1;91;107mFAIL[0m: This font lacks a digital signature (DSIG table). Some applications may require one (even if only a dummy placeholder) in order to work properly. You can add a DSIG table by running the `gftools fix-dsig` script. [code: lacks-signature]


    Result: [1;91;107mFAIL[0m

 >> [1;35;107mcom.google.fonts/check/gdef_mark_chars[0m
    [0;36;107mCheck mark characters are in GDEF mark glyph class[0m
    with NotoSansKaithi-Regular.ttf

    [1;35;107m  Rationale:                                                                [0m
    [0;30;107m  Mark characters should be in the GDEF mark glyph class.                   [0m

    * [1;30;103mWARN[0m: The following mark characters could be in the GDEF mark glyph class:
	 U+11082, U+110B0, U+110B1, U+110B2, U+110B7 and U+110B8 [code: mark-chars]


    Result: [1;30;103mWARN[0m

 >> [1;35;107mcom.google.fonts/check/gpos_kerning_info[0m
    [0;36;107mDoes GPOS table have kerning information?[0m
    with NotoSansKaithi-Regular.ttf

    * [1;30;103mWARN[0m: GPOS table lacks kerning information. [code: lacks-kern-info]


    Result: [1;30;103mWARN[0m


Total:

    [1;97;101mERROR[0m: 0
    [1;91;107mFAIL[0m: 3
    [1;30;103mWARN[0m: 3
    [0;36;107mINFO[0m: 2
    [0;34;107mSKIP[0m: 20
    [0;32;107mPASS[0m: 43


DONE!

    [1;30;107mMeaning of check results:[0m

    An [1;97;101mERROR[0m is something wrong with FontBakery itself, possibly a bug.
    A [1;91;107mFAIL[0m is a problem with the font that must be fixed.
    A [1;30;103mWARN[0m is something that you should consider addressing.
    An [0;36;107mINFO[0m result simply prints something useful. Typically stats.
    A [0;32;107mPASS[0m means the font looks good for the given checking routine.
    And a [0;34;107mSKIP[0m happens when the check does not apply to the given font.

    If you get [1;97;101mERROR[0ms, please help us improve the tool by reporting them at
    [1;36;107mhttps://github.com/googlefonts/fontbakery/issues[0m

    (but other kinds of bug reports and/or
     feature requests are also always welcome, of course!)

