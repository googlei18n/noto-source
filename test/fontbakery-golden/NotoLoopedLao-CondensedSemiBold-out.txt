Start ... running 77 individual check executions.
 >> [1;35;107mcom.google.fonts/check/unicode_range_bits[0m
    [0;36;107mEnsure UnicodeRange bits are properly set.[0m
    with NotoLoopedLao-CondensedSemiBold.ttf

    [1;35;107m  Rationale:                                                                [0m
    [0;30;107m  When the UnicodeRange bits on the OS/2 table are not properly set, some   [0m
    [0;30;107m  programs running on Windows may not recognize the font and use a system   [0m
    [0;30;107m  fallback font instead. For that reason, this check calculates the proper  [0m
    [0;30;107m  settings by inspecting the glyphs declared on the cmap table and then     [0m
    [0;30;107m  ensures that their corresponding ranges are enabled.                      [0m

    * [1;30;103mWARN[0m: UnicodeRange bit 0 "Basic Latin" should be 1 because cmap has 17 of the 128 codepoints in this range. [code: bad-range-bit]
    * [1;30;103mWARN[0m: UnicodeRange bit 1 "Latin-1 Supplement" should be 1 because cmap has 4 of the 128 codepoints in this range. [code: bad-range-bit]
    * [1;30;103mWARN[0m: UnicodeRange bit 6 "Combining Diacritical Marks" should be 1 because cmap has 1 of the 176 codepoints in this range. [code: bad-range-bit]
    * [1;30;103mWARN[0m: UnicodeRange bit 24 "Thai" should be 1 because cmap has 2 of the 128 codepoints in this range. [code: bad-range-bit]
    * [1;30;103mWARN[0m: UnicodeRange bit 31 "General Punctuation" should be 1 because cmap has 17 of the 240 codepoints in this range. [code: bad-range-bit]
    * [1;30;103mWARN[0m: UnicodeRange bit 33 "Currency Symbols" should be 1 because cmap has 1 of the 48 codepoints in this range. [code: bad-range-bit]
    * [1;30;103mWARN[0m: UnicodeRange bit 45 "Geometric Shapes" should be 1 because cmap has 1 of the 96 codepoints in this range. [code: bad-range-bit]
    * [1;30;103mWARN[0m: UnicodeRange bit 46 "Miscellaneous Symbols" should be 1 because cmap has 1 of the 256 codepoints in this range. [code: bad-range-bit]


    Result: [1;30;103mWARN[0m

 >> [1;35;107mcom.google.fonts/check/required_tables[0m
    [0;36;107mFont contains all required tables?[0m
    with NotoLoopedLao-CondensedSemiBold.ttf

    [1;35;107m  Rationale:                                                                [0m
    [0;30;107m  Depending on the typeface and coverage of a font, certain tables are      [0m
    [0;30;107m  recommended for optimum quality. For example, the performance of a        [0m
    [0;30;107m  non-linear font is improved if the VDMX, LTSH, and hdmx tables are        [0m
    [0;30;107m  present. Non-monospaced Latin fonts should have a kern table. A gasp      [0m
    [0;30;107m  table is necessary if a designer wants to influence the sizes at which    [0m
    [0;30;107m  grayscaling is used under Windows. A DSIG table containing a digital      [0m
    [0;30;107m  signature helps ensure the integrity of the font file. Etc.               [0m

    * [0;36;107mINFO[0m: This font contains the following optional tables [loca, GPOS, GSUB]


    Result: [0;36;107mINFO[0m

 >> [1;35;107mcom.google.fonts/check/superfamily/list[0m
    [0;36;107mList all superfamily filepaths[0m
    with NotoLoopedLao-CondensedSemiBold.ttf

    [1;35;107m  Rationale:                                                                [0m
    [0;30;107m  This is a merely informative check that lists all sibling families        [0m
    [0;30;107m  detected by fontbakery.                                                   [0m
    [0;30;107m                                                                            [0m
    [0;30;107m  Only the fontfiles in these directories will be considered in             [0m
    [0;30;107m  superfamily-level checks.                                                 [0m

    * [0;36;107mINFO[0m: . [code: family-path]


    Result: [0;36;107mINFO[0m

 >> [1;35;107mcom.google.fonts/check/name/match_familyname_fullfont[0m
    [0;36;107mDoes full font name begin with the font family name?[0m
    with NotoLoopedLao-CondensedSemiBold.ttf

    * [1;91;107mFAIL[0m: On the 'name' table, the full font name (NameID 4 - FULL_FONT_NAME: 'Noto Looped Lao Cond SmBd') does not begin with font family name (NameID 1 - FONT_FAMILY_NAME: 'Noto Looped Lao Condensed SemiBold') [code: does-not]


    Result: [1;91;107mFAIL[0m

 >> [1;35;107mcom.google.fonts/check/linegaps[0m
    [0;36;107mChecking Vertical Metric Linegaps.[0m
    with NotoLoopedLao-CondensedSemiBold.ttf

    * [1;30;103mWARN[0m: hhea lineGap is not equal to 0. [code: hhea]


    Result: [1;30;103mWARN[0m

 >> [1;35;107mcom.google.fonts/check/dsig[0m
    [0;36;107mDoes the font have a DSIG table?[0m
    with NotoLoopedLao-CondensedSemiBold.ttf

    [1;35;107m  Rationale:                                                                [0m
    [0;30;107m  Microsoft Office 2013 and below products expect fonts to have a digital   [0m
    [0;30;107m  signature declared in a DSIG table in order to implement OpenType         [0m
    [0;30;107m  features. The EOL date for Microsoft Office 2013 products is 4/11/2023.   [0m
    [0;30;107m  This issue does not impact Microsoft Office 2016 and above products.      [0m
    [0;30;107m                                                                            [0m
    [0;30;107m  This checks verifies that this signature is available in the font.        [0m
    [0;30;107m                                                                            [0m
    [0;30;107m  A fake signature is enough to address this issue. If needed, a dummy      [0m
    [0;30;107m  table can be added to the font with the `gftools fix-dsig` script         [0m
    [0;30;107m  available at https://github.com/googlefonts/gftools                       [0m
    [0;30;107m                                                                            [0m
    [0;30;107m  Reference: https://github.com/googlefonts/fontbakery/issues/1845          [0m

    * [1;91;107mFAIL[0m: This font lacks a digital signature (DSIG table). Some applications may require one (even if only a dummy placeholder) in order to work properly. You can add a DSIG table by running the `gftools fix-dsig` script. [code: lacks-signature]


    Result: [1;91;107mFAIL[0m

 >> [1;35;107mcom.google.fonts/check/glyf_nested_components[0m
    [0;36;107mCheck glyphs do not have components which are themselves components.[0m
    with NotoLoopedLao-CondensedSemiBold.ttf

    [1;35;107m  Rationale:                                                                [0m
    [0;30;107m  There have been bugs rendering variable fonts with nested components.     [0m
    [0;30;107m  Additionally, some static fonts with nested components have been reported [0m
    [0;30;107m  to have rendering and printing issues.                                    [0m
    [0;30;107m                                                                            [0m
    [0;30;107m  For more info, see:                                                       [0m
    [0;30;107m  * https://github.com/googlefonts/fontbakery/issues/2961                   [0m
    [0;30;107m  * https://github.com/arrowtype/recursive/issues/412                       [0m

    * [1;91;107mFAIL[0m: The following glyphs have components which themselves are component glyphs:
	* uni0EB3 [code: found-nested-components]


    Result: [1;91;107mFAIL[0m

 >> [1;35;107mcom.google.fonts/check/outline_alignment_miss[0m
    [0;36;107mAre there any misaligned on-curve points?[0m
    with NotoLoopedLao-CondensedSemiBold.ttf

    [1;35;107m  Rationale:                                                                [0m
    [0;30;107m  This test heuristically looks for on-curve points which are close to, but [0m
    [0;30;107m  do not sit on, significant boundary coordinates. For example, a point     [0m
    [0;30;107m  which has a Y-coordinate of 1 or -1 might be a misplaced baseline point.  [0m
    [0;30;107m  As well as the baseline, the test also checks for points near the         [0m
    [0;30;107m  x-height (but only for lower case Latin letters), cap-height, ascender    [0m
    [0;30;107m  and descender Y coordinates.                                              [0m
    [0;30;107m                                                                            [0m
    [0;30;107m  Not all such misaligned curve points are a mistake, and sometimes the     [0m
    [0;30;107m  design may call for points in locations near the boundaries. As this test [0m
    [0;30;107m  is liable to generate significant numbers of false positives, the test    [0m
    [0;30;107m  will pass if there are more than 100 reported misalignments.              [0m

    * [1;30;103mWARN[0m: The following glyphs have on-curve points which have potentially incorrect y coordinates:
	* uni0E87.short: X=65.0,Y=-2.0 (should be at baseline 0?)
	* uni0E8A: X=376.0,Y=-2.0 (should be at baseline 0?)
	* uni0EB4.narrow: X=50.0,Y=712.0 (should be at cap-height 714?)
	* uni0EB4.narrow: X=386.0,Y=712.0 (should be at cap-height 714?)
	* uni0EB5.narrow: X=50.0,Y=712.0 (should be at cap-height 714?)
	* uni0EB5.narrow: X=375.0,Y=712.0 (should be at cap-height 714?)
	* uni0EB6.narrow: X=50.0,Y=712.0 (should be at cap-height 714?)
	* uni0EB6.narrow: X=378.0,Y=712.0 (should be at cap-height 714?)
	* uni0EB7.narrow: X=50.0,Y=712.0 (should be at cap-height 714?)
	* uni0EB7.narrow: X=375.0,Y=712.0 (should be at cap-height 714?) and 18 more. [code: found-misalignments]


    Result: [1;30;103mWARN[0m

 >> [1;35;107mcom.google.fonts/check/outline_short_segments[0m
    [0;36;107mAre any segments inordinately short?[0m
    with NotoLoopedLao-CondensedSemiBold.ttf

    [1;35;107m  Rationale:                                                                [0m
    [0;30;107m  This test looks for outline segments which seem particularly short (less  [0m
    [0;30;107m  than 0.006%% of the overall path length).                                 [0m
    [0;30;107m                                                                            [0m
    [0;30;107m  This test is not run for variable fonts, as they may legitimately have    [0m
    [0;30;107m  short segments. As this test is liable to generate significant numbers of [0m
    [0;30;107m  false positives, the test will pass if there are more than 100 reported   [0m
    [0;30;107m  short segments.                                                           [0m

    * [1;30;103mWARN[0m: The following glyphs have segments which seem very short:
	* uni0E81 contains a short segment B<<119.0,195.0>-<121.0,195.0>-<123.0,195.0>>
	* uni0E81 contains a short segment L<<123.0,360.0>--<121.0,360.0>>
	* uni0E86 contains a short segment B<<273.0,478.5>-<264.0,491.0>-<248.0,491.0>>
	* uni0E86 contains a short segment B<<248.0,491.0>-<235.0,491.0>-<225.5,479.5>>
	* uni0E86 contains a short segment B<<158.0,479.5>-<147.0,491.0>-<133.0,491.0>>
	* uni0E86 contains a short segment B<<94.0,447.0>-<104.0,450.0>-<115.0,450.0>>
	* uni0E88 contains a short segment L<<162.0,161.0>--<157.0,161.0>>
	* uni0E89 contains a short segment L<<141.0,196.0>--<138.0,196.0>>
	* uni0E8C contains a short segment B<<184.0,478.0>-<176.0,478.0>-<170.0,477.0>>
	* uni0E8E contains a short segment L<<262.0,246.0>--<243.0,246.0>> and 69 more. [code: found-short-segments]


    Result: [1;30;103mWARN[0m

 >> [1;35;107mcom.google.fonts/check/outline_colinear_vectors[0m
    [0;36;107mDo any segments have colinear vectors?[0m
    with NotoLoopedLao-CondensedSemiBold.ttf

    [1;35;107m  Rationale:                                                                [0m
    [0;30;107m  This test looks for consecutive line segments which have the same angle.  [0m
    [0;30;107m  This normally happens if an outline point has been added by accident.     [0m
    [0;30;107m                                                                            [0m
    [0;30;107m  This test is not run for variable fonts, as they may legitimately have    [0m
    [0;30;107m  colinear vectors.                                                         [0m

    * [1;30;103mWARN[0m: The following glyphs have colinear vectors:
	* uni0EC8.small: L<<147.0,1106.0>--<147.0,1038.0>> -> L<<147.0,1038.0>--<142.0,929.0>>
	* uni0EC8.small: L<<55.0,929.0>--<50.0,1038.0>> -> L<<50.0,1038.0>--<50.0,1106.0>>
	* uni0EC8.ss03: L<<159.0,831.0>--<159.0,758.0>> -> L<<159.0,758.0>--<153.0,637.0>>
	* uni0EC8.ss03: L<<57.0,637.0>--<50.0,758.0>> -> L<<50.0,758.0>--<50.0,831.0>>
	* uni0EC8: L<<159.0,831.0>--<159.0,758.0>> -> L<<159.0,758.0>--<153.0,637.0>> and uni0EC8: L<<57.0,637.0>--<50.0,758.0>> -> L<<50.0,758.0>--<50.0,831.0>> [code: found-colinear-vectors]


    Result: [1;30;103mWARN[0m

 >> [1;35;107mcom.google.fonts/check/outline_jaggy_segments[0m
    [0;36;107mDo outlines contain any jaggy segments?[0m
    with NotoLoopedLao-CondensedSemiBold.ttf

    [1;35;107m  Rationale:                                                                [0m
    [0;30;107m  This test heuristically detects outline segments which form a             [0m
    [0;30;107m  particularly small angle, indicative of an outline error. This may cause  [0m
    [0;30;107m  false positives in cases such as extreme ink traps, so should be regarded [0m
    [0;30;107m  as advisory and backed up by manual inspection.                           [0m

    * [1;30;103mWARN[0m: The following glyphs have jaggy segments:
	* uni0EA8.BRACKET.110: B<<316.0,348.0>-<379.0,348.0>-<392.0,288.0>>/L<<392.0,288.0>--<392.0,349.0>> = 12.225122675735754
	* uni0EA8.BRACKET.110: L<<392.0,219.0>--<392.0,237.0>>/B<<392.0,237.0>-<390.0,227.0>-<386.0,219.0>> = 11.309932474020195
	* uni0EA9.BRACKET.110: B<<318.0,409.0>-<381.0,409.0>-<394.0,349.0>>/L<<394.0,349.0>--<394.0,555.0>> = 12.225122675735754
	* uni0EA9.BRACKET.110: L<<394.0,279.0>--<394.0,297.0>>/B<<394.0,297.0>-<392.0,288.0>-<388.0,280.0>> = 12.528807709151492
	* uni0EDE.BRACKET.110: B<<357.0,347.0>-<419.0,347.0>-<433.0,287.0>>/L<<433.0,287.0>--<433.0,365.0>> = 13.134022306396327
	* uni0EDF.BRACKET.110: B<<312.0,409.0>-<374.0,409.0>-<387.0,349.0>>/L<<387.0,349.0>--<387.0,555.0>> = 12.225122675735754 and uni0EDF.BRACKET.110: L<<387.0,279.0>--<387.0,297.0>>/B<<387.0,297.0>-<385.0,288.0>-<381.0,280.0>> = 12.528807709151492 [code: found-jaggy-segments]


    Result: [1;30;103mWARN[0m


Total:

    [1;97;101mERROR[0m: 0
    [1;91;107mFAIL[0m: 3
    [1;30;103mWARN[0m: 6
    [0;36;107mINFO[0m: 2
    [0;34;107mSKIP[0m: 18
    [0;32;107mPASS[0m: 48


DONE!

    [1;30;107mMeaning of check results:[0m

    An [1;97;101mERROR[0m is something wrong with FontBakery itself, possibly a bug.
    A [1;91;107mFAIL[0m is a problem with the font that must be fixed.
    A [1;30;103mWARN[0m is something that you should consider addressing.
    An [0;36;107mINFO[0m result simply prints something useful. Typically stats.
    A [0;32;107mPASS[0m means the font looks good for the given checking routine.
    And a [0;34;107mSKIP[0m happens when the check does not apply to the given font.

    If you get [1;97;101mERROR[0ms, please help us improve the tool by reporting them at
    [1;36;107mhttps://github.com/googlefonts/fontbakery/issues[0m

    (but other kinds of bug reports and/or
     feature requests are also always welcome, of course!)

