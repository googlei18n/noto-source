Start ... running 77 individual check executions.
 >> [1;35;107mcom.google.fonts/check/required_tables[0m
    [0;36;107mFont contains all required tables?[0m
    with NotoSansMandaic-VF.ttf

    [1;35;107m  Rationale:                                                                [0m
    [0;30;107m  Depending on the typeface and coverage of a font, certain tables are      [0m
    [0;30;107m  recommended for optimum quality. For example, the performance of a        [0m
    [0;30;107m  non-linear font is improved if the VDMX, LTSH, and hdmx tables are        [0m
    [0;30;107m  present. Non-monospaced Latin fonts should have a kern table. A gasp      [0m
    [0;30;107m  table is necessary if a designer wants to influence the sizes at which    [0m
    [0;30;107m  grayscaling is used under Windows. A DSIG table containing a digital      [0m
    [0;30;107m  signature helps ensure the integrity of the font file. Etc.               [0m

    * [0;36;107mINFO[0m: This font contains the following optional tables [loca, GPOS, GSUB]


    Result: [0;36;107mINFO[0m

 >> [1;35;107mcom.google.fonts/check/superfamily/list[0m
    [0;36;107mList all superfamily filepaths[0m
    with NotoSansMandaic-VF.ttf

    [1;35;107m  Rationale:                                                                [0m
    [0;30;107m  This is a merely informative check that lists all sibling families        [0m
    [0;30;107m  detected by fontbakery.                                                   [0m
    [0;30;107m                                                                            [0m
    [0;30;107m  Only the fontfiles in these directories will be considered in             [0m
    [0;30;107m  superfamily-level checks.                                                 [0m

    * [0;36;107mINFO[0m: . [code: family-path]


    Result: [0;36;107mINFO[0m

 >> [1;35;107mcom.google.fonts/check/monospace[0m
    [0;36;107mChecking correctness of monospaced metadata.[0m
    with NotoSansMandaic-VF.ttf

    [1;35;107m  Rationale:                                                                [0m
    [0;30;107m  There are various metadata in the OpenType spec to specify if a font is   [0m
    [0;30;107m  monospaced or not. If the font is not truly monospaced, then no           [0m
    [0;30;107m  monospaced metadata should be set (as sometimes they mistakenly are...)   [0m
    [0;30;107m                                                                            [0m
    [0;30;107m  Requirements for monospace fonts:                                         [0m
    [0;30;107m                                                                            [0m
    [0;30;107m  * post.isFixedPitch - "Set to 0 if the font is proportionally spaced,     [0m
    [0;30;107m  non-zero if the font is not proportionally spaced (monospaced)"           [0m
    [0;30;107m    www.microsoft.com/typography/otspec/post.htm                            [0m
    [0;30;107m                                                                            [0m
    [0;30;107m  * hhea.advanceWidthMax must be correct, meaning no glyph's width value is [0m
    [0;30;107m  greater.                                                                  [0m
    [0;30;107m    www.microsoft.com/typography/otspec/hhea.htm                            [0m
    [0;30;107m                                                                            [0m
    [0;30;107m  * OS/2.panose.bProportion must be set to 9 (monospace). Spec says: "The   [0m
    [0;30;107m  PANOSE definition contains ten digits each of which currently describes   [0m
    [0;30;107m  up to sixteen variations. Windows uses bFamilyType, bSerifStyle and       [0m
    [0;30;107m  bProportion in the font mapper to determine family type. It also uses     [0m
    [0;30;107m  bProportion to determine if the font is monospaced."                      [0m
    [0;30;107m    www.microsoft.com/typography/otspec/os2.htm#pan                         [0m
    [0;30;107m    monotypecom-test.monotype.de/services/pan2                              [0m
    [0;30;107m                                                                            [0m
    [0;30;107m  * OS/2.xAvgCharWidth must be set accurately.                              [0m
    [0;30;107m    "OS/2.xAvgCharWidth is used when rendering monospaced fonts, at least   [0m
    [0;30;107m  by Windows GDI"                                                           [0m
    [0;30;107m    http://typedrawers.com/discussion/comment/15397/#Comment_15397          [0m
    [0;30;107m                                                                            [0m
    [0;30;107m  Also we should report an error for glyphs not of average width.           [0m
    [0;30;107m                                                                            [0m
    [0;30;107m  Please also note:                                                         [0m
    [0;30;107m  Thomas Phinney told us that a few years ago (as of December 2019), if you [0m
    [0;30;107m  gave a font a monospace flag in Panose, Microsoft Word would ignore the   [0m
    [0;30;107m  actual advance widths and treat it as monospaced. Source:                 [0m
    [0;30;107m  https://typedrawers.com/discussion/comment/45140/#Comment_45140           [0m

    * [1;91;107mFAIL[0m: On monospaced fonts, the value of post.isFixedPitch must be set to a non-zero value (meaning 'fixed width monospaced'), but got 0 instead. [code: mono-bad-post-isFixedPitch]
    * [1;91;107mFAIL[0m: On monospaced fonts, the value of OS/2.panose.bProportion must be set to 9 (proportion: monospaced), but got 2 instead. [code: mono-bad-panose-proportion]
    * [1;30;103mWARN[0m: Font is monospaced but 122 glyphs (92.42%) have a different width. You should check the widths of: ['uni0640', 'uni0840', 'uni0840.Fina', 'uni0840.Fina_XShort', 'uni0840.Isol', 'uni0841', 'uni0841.Fina', 'uni0841.Init', 'uni0841.Isol', 'uni0841.Medi', 'uni0842', 'uni0842.Fina', 'uni0842.Init', 'uni0842.Isol', 'uni0842.Medi', 'uni0843', 'uni0843.Fina', 'uni0843.Init', 'uni0843.Isol', 'uni0843.Medi', 'uni0844', 'uni0844.Fina', 'uni0844.Fina_XShort', 'uni0844.Init', 'uni0844.Isol', 'uni0844.Medi', 'uni0844.Medi_XShort', 'uni0845', 'uni0845.Fina', 'uni0845.Init', 'uni0845.Isol', 'uni0845.Medi', 'uni0846', 'uni0846.Fina', 'uni0846.Isol', 'uni0847', 'uni0847.Fina', 'uni0847.Fina_XShort', 'uni0847.Isol', 'uni0847.Medi', 'uni0848', 'uni0848.Fina', 'uni0848.Fina_Long', 'uni0848.Fina_Short', 'uni0848.Init', 'uni0848.Init_Long', 'uni0848.Isol', 'uni0848.Isol_Long', 'uni0848.Medi', 'uni0848.Medi_Long', 'uni0848.Medi_Short', 'uni0849', 'uni0849.Fina', 'uni0849.Fina_Short', 'uni0849.Fina_XShort', 'uni0849.Isol', 'uni084A', 'uni084A.Fina', 'uni084A.Init', 'uni084A.Isol', 'uni084A.Medi', 'uni084B', 'uni084B.Fina', 'uni084B.Init', 'uni084B.Isol', 'uni084B.Medi', 'uni084C', 'uni084C.Fina', 'uni084C.Init', 'uni084C.Isol', 'uni084C.Medi', 'uni084D', 'uni084D.Fina', 'uni084D.Init', 'uni084D.Isol', 'uni084D.Medi', 'uni084E', 'uni084E.Fina', 'uni084E.Init', 'uni084E.Isol', 'uni084E.Medi', 'uni084F', 'uni084F.Fina', 'uni084F.Init', 'uni084F.Isol', 'uni084F.Medi', 'uni0850', 'uni0850.Fina', 'uni0850.Init', 'uni0850.Isol', 'uni0850.Medi', 'uni0851', 'uni0851.Fina', 'uni0851.Init', 'uni0851.Isol', 'uni0851.Medi', 'uni0852', 'uni0852.Fina', 'uni0852.Init', 'uni0852.Isol', 'uni0852.Medi', 'uni0853', 'uni0853.Fina', 'uni0853.Init', 'uni0853.Isol', 'uni0853.Medi', 'uni0854', 'uni0854.Fina', 'uni0854.Isol', 'uni0855', 'uni0855.Fina', 'uni0855.Init', 'uni0855.Isol', 'uni0855.Medi', 'uni0856', 'uni0856.Isol', 'uni0857', 'uni0857.Isol', 'uni0858', 'uni0858.Isol', 'uni085E', 'uni25CC'] [code: mono-outliers]


    Result: [1;91;107mFAIL[0m

 >> [1;35;107mcom.google.fonts/check/dsig[0m
    [0;36;107mDoes the font have a DSIG table?[0m
    with NotoSansMandaic-VF.ttf

    [1;35;107m  Rationale:                                                                [0m
    [0;30;107m  Microsoft Office 2013 and below products expect fonts to have a digital   [0m
    [0;30;107m  signature declared in a DSIG table in order to implement OpenType         [0m
    [0;30;107m  features. The EOL date for Microsoft Office 2013 products is 4/11/2023.   [0m
    [0;30;107m  This issue does not impact Microsoft Office 2016 and above products.      [0m
    [0;30;107m                                                                            [0m
    [0;30;107m  This checks verifies that this signature is available in the font.        [0m
    [0;30;107m                                                                            [0m
    [0;30;107m  A fake signature is enough to address this issue. If needed, a dummy      [0m
    [0;30;107m  table can be added to the font with the `gftools fix-dsig` script         [0m
    [0;30;107m  available at https://github.com/googlefonts/gftools                       [0m
    [0;30;107m                                                                            [0m
    [0;30;107m  Reference: https://github.com/googlefonts/fontbakery/issues/1845          [0m

    * [1;91;107mFAIL[0m: This font lacks a digital signature (DSIG table). Some applications may require one (even if only a dummy placeholder) in order to work properly. You can add a DSIG table by running the `gftools fix-dsig` script. [code: lacks-signature]


    Result: [1;91;107mFAIL[0m

 >> [1;35;107mcom.google.fonts/check/gpos_kerning_info[0m
    [0;36;107mDoes GPOS table have kerning information? This check skips monospaced fonts as defined by post.isFixedPitch value[0m
    with NotoSansMandaic-VF.ttf

    * [1;30;103mWARN[0m: GPOS table lacks kerning information. [code: lacks-kern-info]


    Result: [1;30;103mWARN[0m

 >> [1;35;107mcom.google.fonts/check/outline_alignment_miss[0m
    [0;36;107mAre there any misaligned on-curve points?[0m
    with NotoSansMandaic-VF.ttf

    [1;35;107m  Rationale:                                                                [0m
    [0;30;107m  This test heuristically looks for on-curve points which are close to, but [0m
    [0;30;107m  do not sit on, significant boundary coordinates. For example, a point     [0m
    [0;30;107m  which has a Y-coordinate of 1 or -1 might be a misplaced baseline point.  [0m
    [0;30;107m  As well as the baseline, the test also checks for points near the         [0m
    [0;30;107m  x-height (but only for lower case Latin letters), cap-height, ascender    [0m
    [0;30;107m  and descender Y coordinates.                                              [0m
    [0;30;107m                                                                            [0m
    [0;30;107m  Not all such misaligned curve points are a mistake, and sometimes the     [0m
    [0;30;107m  design may call for points in locations near the boundaries. As this test [0m
    [0;30;107m  is liable to generate significant numbers of false positives, the test    [0m
    [0;30;107m  will pass if there are more than 100 reported misalignments.              [0m

    * [1;30;103mWARN[0m: The following glyphs have on-curve points which have potentially incorrect y coordinates:
	* uni0842: X=184.0,Y=696.0 (should be at cap-height 694?)
	* uni0842.Fina: X=217.5,Y=696.0 (should be at cap-height 694?)
	* uni0842.Init: X=190.0,Y=696.0 (should be at cap-height 694?)
	* uni0842.Isol: X=184.0,Y=696.0 (should be at cap-height 694?)
	* uni0842.Medi: X=190.0,Y=696.0 (should be at cap-height 694?)
	* uni0847: X=476.0,Y=-0.5 (should be at baseline 0?)
	* uni0847: X=394.5,Y=-2.0 (should be at baseline 0?)
	* uni0847.Fina: X=470.5,Y=-0.5 (should be at baseline 0?)
	* uni0847.Fina: X=392.0,Y=-2.0 (should be at baseline 0?)
	* uni0847.Fina_XShort: X=466.5,Y=-1.0 (should be at baseline 0?) and 8 more. [code: found-misalignments]


    Result: [1;30;103mWARN[0m


Total:

    [1;97;101mERROR[0m: 0
    [1;91;107mFAIL[0m: 2
    [1;30;103mWARN[0m: 2
    [0;36;107mINFO[0m: 2
    [0;34;107mSKIP[0m: 17
    [0;32;107mPASS[0m: 54


DONE!

    [1;30;107mMeaning of check results:[0m

    An [1;97;101mERROR[0m is something wrong with FontBakery itself, possibly a bug.
    A [1;91;107mFAIL[0m is a problem with the font that must be fixed.
    A [1;30;103mWARN[0m is something that you should consider addressing.
    An [0;36;107mINFO[0m result simply prints something useful. Typically stats.
    A [0;32;107mPASS[0m means the font looks good for the given checking routine.
    And a [0;34;107mSKIP[0m happens when the check does not apply to the given font.

    If you get [1;97;101mERROR[0ms, please help us improve the tool by reporting them at
    [1;36;107mhttps://github.com/googlefonts/fontbakery/issues[0m

    (but other kinds of bug reports and/or
     feature requests are also always welcome, of course!)

