Start ... running 77 individual check executions.
 >> [1;35;107mcom.google.fonts/check/family/win_ascent_and_descent[0m
    [0;36;107mChecking OS/2 usWinAscent & usWinDescent.[0m
    with NotoSans-SemiCondensedExtraLightItalic.ttf

    [1;35;107m  Rationale:                                                                [0m
    [0;30;107m  A font's winAscent and winDescent values should be greater than the head  [0m
    [0;30;107m  table's yMax, abs(yMin) values. If they are less than these values,       [0m
    [0;30;107m  clipping can occur on Windows platforms                                   [0m
    [0;30;107m  (https://github.com/RedHatBrand/Overpass/issues/33).                      [0m
    [0;30;107m                                                                            [0m
    [0;30;107m  If the font includes tall/deep writing systems such as Arabic or          [0m
    [0;30;107m  Devanagari, the winAscent and winDescent can be greater than the yMax and [0m
    [0;30;107m  abs(yMin) to accommodate vowel marks.                                     [0m
    [0;30;107m                                                                            [0m
    [0;30;107m  When the win Metrics are significantly greater than the upm, the          [0m
    [0;30;107m  linespacing can appear too loose. To counteract this, enabling the OS/2   [0m
    [0;30;107m  fsSelection bit 7 (Use_Typo_Metrics), will force Windows to use the OS/2  [0m
    [0;30;107m  typo values instead. This means the font developer can control the        [0m
    [0;30;107m  linespacing with the typo values, whilst avoiding clipping by setting the [0m
    [0;30;107m  win values to values greater than the yMax and abs(yMin).                 [0m

    * [1;91;107mFAIL[0m: OS/2.usWinAscent value should be equal or greater than 1071, but got 1069 instead [code: ascent]
    * [1;91;107mFAIL[0m: OS/2.usWinDescent value should be equal or greater than 389, but got 293 instead. [code: descent]


    Result: [1;91;107mFAIL[0m

 >> [1;35;107mcom.google.fonts/check/required_tables[0m
    [0;36;107mFont contains all required tables?[0m
    with NotoSans-SemiCondensedExtraLightItalic.ttf

    [1;35;107m  Rationale:                                                                [0m
    [0;30;107m  Depending on the typeface and coverage of a font, certain tables are      [0m
    [0;30;107m  recommended for optimum quality. For example, the performance of a        [0m
    [0;30;107m  non-linear font is improved if the VDMX, LTSH, and hdmx tables are        [0m
    [0;30;107m  present. Non-monospaced Latin fonts should have a kern table. A gasp      [0m
    [0;30;107m  table is necessary if a designer wants to influence the sizes at which    [0m
    [0;30;107m  grayscaling is used under Windows. A DSIG table containing a digital      [0m
    [0;30;107m  signature helps ensure the integrity of the font file. Etc.               [0m

    * [0;36;107mINFO[0m: This font contains the following optional tables [loca, GPOS, GSUB]


    Result: [0;36;107mINFO[0m

 >> [1;35;107mcom.google.fonts/check/superfamily/list[0m
    [0;36;107mList all superfamily filepaths[0m
    with NotoSans-SemiCondensedExtraLightItalic.ttf

    [1;35;107m  Rationale:                                                                [0m
    [0;30;107m  This is a merely informative check that lists all sibling families        [0m
    [0;30;107m  detected by fontbakery.                                                   [0m
    [0;30;107m                                                                            [0m
    [0;30;107m  Only the fontfiles in these directories will be considered in             [0m
    [0;30;107m  superfamily-level checks.                                                 [0m

    * [0;36;107mINFO[0m: . [code: family-path]


    Result: [0;36;107mINFO[0m

 >> [1;35;107mcom.google.fonts/check/family_naming_recommendations[0m
    [0;36;107mFont follows the family naming recommendations?[0m
    with NotoSans-SemiCondensedExtraLightItalic.ttf

    * [0;36;107mINFO[0m: Font does not follow some family naming recommendations:

| Field | Value | Recommendation |
|:----- |:----- |:-------------- |
| Family Name | Noto Sans SemiCondensed ExtraLight | exceeds max length (31) |
 [code: bad-entries]


    Result: [0;36;107mINFO[0m

 >> [1;35;107mcom.google.fonts/check/dsig[0m
    [0;36;107mDoes the font have a DSIG table?[0m
    with NotoSans-SemiCondensedExtraLightItalic.ttf

    [1;35;107m  Rationale:                                                                [0m
    [0;30;107m  Microsoft Office 2013 and below products expect fonts to have a digital   [0m
    [0;30;107m  signature declared in a DSIG table in order to implement OpenType         [0m
    [0;30;107m  features. The EOL date for Microsoft Office 2013 products is 4/11/2023.   [0m
    [0;30;107m  This issue does not impact Microsoft Office 2016 and above products.      [0m
    [0;30;107m                                                                            [0m
    [0;30;107m  This checks verifies that this signature is available in the font.        [0m
    [0;30;107m                                                                            [0m
    [0;30;107m  A fake signature is enough to address this issue. If needed, a dummy      [0m
    [0;30;107m  table can be added to the font with the `gftools fix-dsig` script         [0m
    [0;30;107m  available at https://github.com/googlefonts/gftools                       [0m
    [0;30;107m                                                                            [0m
    [0;30;107m  Reference: https://github.com/googlefonts/fontbakery/issues/1845          [0m

    * [1;91;107mFAIL[0m: This font lacks a digital signature (DSIG table). Some applications may require one (even if only a dummy placeholder) in order to work properly. You can add a DSIG table by running the `gftools fix-dsig` script. [code: lacks-signature]


    Result: [1;91;107mFAIL[0m

 >> [1;35;107mcom.google.fonts/check/gdef_mark_chars[0m
    [0;36;107mCheck mark characters are in GDEF mark glyph class[0m
    with NotoSans-SemiCondensedExtraLightItalic.ttf

    [1;35;107m  Rationale:                                                                [0m
    [0;30;107m  Mark characters should be in the GDEF mark glyph class.                   [0m

    * [1;30;103mWARN[0m: The following mark characters could be in the GDEF mark glyph class:
	 U+0488, U+0489, U+1ABE, U+A670, U+A671 and U+A672 [code: mark-chars]


    Result: [1;30;103mWARN[0m

 >> [1;35;107mcom.google.fonts/check/points_out_of_bounds[0m
    [0;36;107mCheck for points out of bounds.[0m
    with NotoSans-SemiCondensedExtraLightItalic.ttf

    * [1;30;103mWARN[0m: The following glyphs have coordinates which are out of bounds:
	* ('uni02C3', 86.5, 569.5)
	* ('uni02C3', 86.5, 753.5)
	* ('uni02C3', 86.5, 772.0) and ('uni02C3', 86.5, 551.0)

This happens a lot when points are not extremes, which is usually bad. However, fixing this alert by adding points on extremes may do more harm than good, especially with italics, calligraphic-script, handwriting, rounded and other fonts. So it is common to ignore this message. [code: points-out-of-bounds]


    Result: [1;30;103mWARN[0m

 >> [1;35;107mcom.google.fonts/check/glyf_nested_components[0m
    [0;36;107mCheck glyphs do not have components which are themselves components.[0m
    with NotoSans-SemiCondensedExtraLightItalic.ttf

    [1;35;107m  Rationale:                                                                [0m
    [0;30;107m  There have been bugs rendering variable fonts with nested components.     [0m
    [0;30;107m  Additionally, some static fonts with nested components have been reported [0m
    [0;30;107m  to have rendering and printing issues.                                    [0m
    [0;30;107m                                                                            [0m
    [0;30;107m  For more info, see:                                                       [0m
    [0;30;107m  * https://github.com/googlefonts/fontbakery/issues/2961                   [0m
    [0;30;107m  * https://github.com/arrowtype/recursive/issues/412                       [0m

    * [1;91;107mFAIL[0m: The following glyphs have components which themselves are component glyphs:
	* uni03FD
	* uni03FF
	* uni1D1E
	* uni1D46
	* uni1D4A
	* uni1D4B
	* uni1D59
	* uni1D9B
	* uni1D9F
	* uni1DA2 and 144 more. [code: found-nested-components]


    Result: [1;91;107mFAIL[0m

 >> [1;35;107mcom.google.fonts/check/outline_colinear_vectors[0m
    [0;36;107mDo any segments have colinear vectors?[0m
    with NotoSans-SemiCondensedExtraLightItalic.ttf

    [1;35;107m  Rationale:                                                                [0m
    [0;30;107m  This test looks for consecutive line segments which have the same angle.  [0m
    [0;30;107m  This normally happens if an outline point has been added by accident.     [0m
    [0;30;107m                                                                            [0m
    [0;30;107m  This test is not run for variable fonts, as they may legitimately have    [0m
    [0;30;107m  colinear vectors.                                                         [0m

    * [1;30;103mWARN[0m: The following glyphs have colinear vectors:
	* K: L<<139.0,330.0>--<200.0,400.0>> -> L<<200.0,400.0>--<511.0,714.0>>
	* Kappa: L<<139.0,330.0>--<200.0,400.0>> -> L<<200.0,400.0>--<511.0,714.0>>
	* daggerdbl: L<<184.0,227.0>--<211.0,383.0>> -> L<<211.0,383.0>--<249.0,533.0>>
	* daggerdbl: L<<276.0,533.0>--<250.0,383.0>> -> L<<250.0,383.0>--<210.0,227.0>>
	* uni0136: L<<139.0,330.0>--<200.0,400.0>> -> L<<200.0,400.0>--<511.0,714.0>>
	* uni0198: L<<139.0,330.0>--<200.0,399.0>> -> L<<200.0,399.0>--<472.0,670.0>>
	* uni01E8: L<<139.0,330.0>--<200.0,400.0>> -> L<<200.0,400.0>--<511.0,714.0>>
	* uni03CF: L<<139.0,330.0>--<200.0,400.0>> -> L<<200.0,400.0>--<511.0,714.0>>
	* uni1D37: L<<143.3533935546875,484.991943359375>--<183.0048828125,526.990234375>> -> L<<183.0048828125,526.990234375>--<385.1624755859375,715.382568359375>>
	* uni1E30: L<<139.0,330.0>--<200.0,400.0>> -> L<<200.0,400.0>--<511.0,714.0>> and 20 more. [code: found-colinear-vectors]


    Result: [1;30;103mWARN[0m

 >> [1;35;107mcom.google.fonts/check/outline_jaggy_segments[0m
    [0;36;107mDo outlines contain any jaggy segments?[0m
    with NotoSans-SemiCondensedExtraLightItalic.ttf

    [1;35;107m  Rationale:                                                                [0m
    [0;30;107m  This test heuristically detects outline segments which form a             [0m
    [0;30;107m  particularly small angle, indicative of an outline error. This may cause  [0m
    [0;30;107m  false positives in cases such as extreme ink traps, so should be regarded [0m
    [0;30;107m  as advisory and backed up by manual inspection.                           [0m

    * [1;30;103mWARN[0m: The following glyphs have jaggy segments:
	* gammaDoubleStruck: B<<319.5,239.5>-<328.0,221.0>-<330.0,210.0>>/B<<330.0,210.0>-<330.0,213.0>-<334.0,225.0>> = 10.304846468766044
	* scriptg: B<<83.5,165.0>-<94.0,193.0>-<107.0,209.0>>/B<<107.0,209.0>-<90.0,193.0>-<75.5,179.0>> = 7.64184570269888
	* uni03D7: B<<149.0,212.0>-<130.0,164.0>-<109.0,128.0>>/L<<109.0,128.0>--<479.0,529.0>> = 12.441081711537924
	* uni03D7: B<<345.0,255.0>-<366.0,331.0>-<404.0,396.0>>/L<<404.0,396.0>--<36.0,0.0>> = 12.589880840114798
	* uni03F0: B<<149.0,212.0>-<130.0,164.0>-<109.0,128.0>>/L<<109.0,128.0>--<479.0,529.0>> = 12.441081711537924
	* uni03F0: B<<345.0,255.0>-<366.0,331.0>-<404.0,396.0>>/L<<404.0,396.0>--<36.0,0.0>> = 12.589880840114798
	* uni1D95: L<<296.0,-79.0>--<357.0,212.0>>/B<<357.0,212.0>-<326.0,111.0>-<266.0,50.5>> = 5.223823042708006
	* uni210B: B<<456.5,433.0>-<496.0,504.0>-<559.0,581.0>>/B<<559.0,581.0>-<535.0,559.0>-<505.5,535.0>> = 8.200146059498772
	* uni2C66: L<<161.0,496.0>--<89.0,160.0>>/L<<89.0,160.0>--<239.0,496.0>> = 11.962592372999575
	* uniA794: L<<320.0,45.0>--<320.0,46.0>>/L<<320.0,46.0>--<292.0,-89.0>> = 11.717434703203358 and xi: B<<223.0,689.0>-<265.0,717.0>-<312.0,729.0>>/B<<312.0,729.0>-<290.0,727.0>-<270.5,726.5>> = 9.12829107046876 [code: found-jaggy-segments]


    Result: [1;30;103mWARN[0m


Total:

    [1;97;101mERROR[0m: 0
    [1;91;107mFAIL[0m: 3
    [1;30;103mWARN[0m: 4
    [0;36;107mINFO[0m: 3
    [0;34;107mSKIP[0m: 19
    [0;32;107mPASS[0m: 48


DONE!

    [1;30;107mMeaning of check results:[0m

    An [1;97;101mERROR[0m is something wrong with FontBakery itself, possibly a bug.
    A [1;91;107mFAIL[0m is a problem with the font that must be fixed.
    A [1;30;103mWARN[0m is something that you should consider addressing.
    An [0;36;107mINFO[0m result simply prints something useful. Typically stats.
    A [0;32;107mPASS[0m means the font looks good for the given checking routine.
    And a [0;34;107mSKIP[0m happens when the check does not apply to the given font.

    If you get [1;97;101mERROR[0ms, please help us improve the tool by reporting them at
    [1;36;107mhttps://github.com/googlefonts/fontbakery/issues[0m

    (but other kinds of bug reports and/or
     feature requests are also always welcome, of course!)

