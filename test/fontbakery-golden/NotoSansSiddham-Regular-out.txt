Start ... running 77 individual check executions.
 >> [1;35;107mcom.google.fonts/check/unicode_range_bits[0m
    [0;36;107mEnsure UnicodeRange bits are properly set.[0m
    with NotoSansSiddham-Regular.ttf

    [1;35;107m  Rationale:                                                                [0m
    [0;30;107m  When the UnicodeRange bits on the OS/2 table are not properly set, some   [0m
    [0;30;107m  programs running on Windows may not recognize the font and use a system   [0m
    [0;30;107m  fallback font instead. For that reason, this check calculates the proper  [0m
    [0;30;107m  settings by inspecting the glyphs declared on the cmap table and then     [0m
    [0;30;107m  ensures that their corresponding ranges are enabled.                      [0m

    * [1;30;103mWARN[0m: UnicodeRange bit 57 "Non-Plane 0 *" should be 0 because cmap has none of the 2048 codepoints in this range. [code: bad-range-bit]


    Result: [1;30;103mWARN[0m

 >> [1;35;107mcom.google.fonts/check/required_tables[0m
    [0;36;107mFont contains all required tables?[0m
    with NotoSansSiddham-Regular.ttf

    [1;35;107m  Rationale:                                                                [0m
    [0;30;107m  Depending on the typeface and coverage of a font, certain tables are      [0m
    [0;30;107m  recommended for optimum quality. For example, the performance of a        [0m
    [0;30;107m  non-linear font is improved if the VDMX, LTSH, and hdmx tables are        [0m
    [0;30;107m  present. Non-monospaced Latin fonts should have a kern table. A gasp      [0m
    [0;30;107m  table is necessary if a designer wants to influence the sizes at which    [0m
    [0;30;107m  grayscaling is used under Windows. A DSIG table containing a digital      [0m
    [0;30;107m  signature helps ensure the integrity of the font file. Etc.               [0m

    * [0;36;107mINFO[0m: This font contains the following optional tables [loca, GPOS, GSUB]


    Result: [0;36;107mINFO[0m

 >> [1;35;107mcom.google.fonts/check/valid_glyphnames[0m
    [0;36;107mGlyph names are all valid?[0m
    with NotoSansSiddham-Regular.ttf

    [1;35;107m  Rationale:                                                                [0m
    [0;30;107m  Microsoft's recommendations for OpenType Fonts states the following:      [0m
    [0;30;107m                                                                            [0m
    [0;30;107m  'NOTE: The PostScript glyph name must be no longer than 31 characters,    [0m
    [0;30;107m  include only uppercase or lowercase English letters, European digits, the [0m
    [0;30;107m  period or the underscore, i.e. from the set [A-Za-z0-9_.] and should      [0m
    [0;30;107m  start with a letter, except the special glyph name ".notdef" which starts [0m
    [0;30;107m  with a period.'                                                           [0m
    [0;30;107m                                                                            [0m
    [0;30;107m  https://docs.microsoft.com/en-us/typography/opentype/spec/recom#post-table[0m
    [0;30;107m                                                                            [0m
    [0;30;107m                                                                            [0m
    [0;30;107m  In practice, though, particularly in modern environments, glyph names can [0m
    [0;30;107m  be as long as 63 characters.                                              [0m
    [0;30;107m  According to the "Adobe Glyph List Specification" available at:           [0m
    [0;30;107m                                                                            [0m
    [0;30;107m  https://github.com/adobe-type-tools/agl-specification                     [0m

    * [1;91;107mFAIL[0m: The following glyph names do not comply with naming conventions: a-sidd, aa-sidd, i-sidd, ii-sidd, u-sidd, uu-sidd, iAlt-sidd, iAlt2-sidd, iiAlt-sidd, uAlt-sidd and 484 more.

 A glyph name must be entirely comprised of characters from the following set: A-Z a-z 0-9 .(period) _(underscore). A glyph name must not start with a digit or period. There are a few exceptions such as the special glyph ".notdef". The glyph names "twocents", "a1", and "_" are all valid, while "2cents" and ".twocents" are not. [code: found-invalid-names]


    Result: [1;91;107mFAIL[0m

 >> [1;35;107mcom.google.fonts/check/superfamily/list[0m
    [0;36;107mList all superfamily filepaths[0m
    with NotoSansSiddham-Regular.ttf

    [1;35;107m  Rationale:                                                                [0m
    [0;30;107m  This is a merely informative check that lists all sibling families        [0m
    [0;30;107m  detected by fontbakery.                                                   [0m
    [0;30;107m                                                                            [0m
    [0;30;107m  Only the fontfiles in these directories will be considered in             [0m
    [0;30;107m  superfamily-level checks.                                                 [0m

    * [0;36;107mINFO[0m: . [code: family-path]


    Result: [0;36;107mINFO[0m

 >> [1;35;107mcom.google.fonts/check/monospace[0m
    [0;36;107mChecking correctness of monospaced metadata.[0m
    with NotoSansSiddham-Regular.ttf

    [1;35;107m  Rationale:                                                                [0m
    [0;30;107m  There are various metadata in the OpenType spec to specify if a font is   [0m
    [0;30;107m  monospaced or not. If the font is not truly monospaced, then no           [0m
    [0;30;107m  monospaced metadata should be set (as sometimes they mistakenly are...)   [0m
    [0;30;107m                                                                            [0m
    [0;30;107m  Requirements for monospace fonts:                                         [0m
    [0;30;107m                                                                            [0m
    [0;30;107m  * post.isFixedPitch - "Set to 0 if the font is proportionally spaced,     [0m
    [0;30;107m  non-zero if the font is not proportionally spaced (monospaced)"           [0m
    [0;30;107m    www.microsoft.com/typography/otspec/post.htm                            [0m
    [0;30;107m                                                                            [0m
    [0;30;107m  * hhea.advanceWidthMax must be correct, meaning no glyph's width value is [0m
    [0;30;107m  greater.                                                                  [0m
    [0;30;107m    www.microsoft.com/typography/otspec/hhea.htm                            [0m
    [0;30;107m                                                                            [0m
    [0;30;107m  * OS/2.panose.bProportion must be set to 9 (monospace). Spec says: "The   [0m
    [0;30;107m  PANOSE definition contains ten digits each of which currently describes   [0m
    [0;30;107m  up to sixteen variations. Windows uses bFamilyType, bSerifStyle and       [0m
    [0;30;107m  bProportion in the font mapper to determine family type. It also uses     [0m
    [0;30;107m  bProportion to determine if the font is monospaced."                      [0m
    [0;30;107m    www.microsoft.com/typography/otspec/os2.htm#pan                         [0m
    [0;30;107m    monotypecom-test.monotype.de/services/pan2                              [0m
    [0;30;107m                                                                            [0m
    [0;30;107m  * OS/2.xAvgCharWidth must be set accurately.                              [0m
    [0;30;107m    "OS/2.xAvgCharWidth is used when rendering monospaced fonts, at least   [0m
    [0;30;107m  by Windows GDI"                                                           [0m
    [0;30;107m    http://typedrawers.com/discussion/comment/15397/#Comment_15397          [0m
    [0;30;107m                                                                            [0m
    [0;30;107m  Also we should report an error for glyphs not of average width.           [0m
    [0;30;107m                                                                            [0m
    [0;30;107m  Please also note:                                                         [0m
    [0;30;107m  Thomas Phinney told us that a few years ago (as of December 2019), if you [0m
    [0;30;107m  gave a font a monospace flag in Panose, Microsoft Word would ignore the   [0m
    [0;30;107m  actual advance widths and treat it as monospaced. Source:                 [0m
    [0;30;107m  https://typedrawers.com/discussion/comment/45140/#Comment_45140           [0m

    * [1;91;107mFAIL[0m: On monospaced fonts, the value of post.isFixedPitch must be set to a non-zero value (meaning 'fixed width monospaced'), but got 0 instead. [code: mono-bad-post-isFixedPitch]
    * [1;91;107mFAIL[0m: On monospaced fonts, the value of OS/2.panose.bProportion must be set to 9 (proportion: monospaced), but got 2 instead. [code: mono-bad-panose-proportion]
    * [1;30;103mWARN[0m: Font is monospaced but 249 glyphs (49.31%) have a different width. You should check the widths of: ['CR', 'space', 'uni00A0', 'a-sidd', 'aa-sidd', 'i-sidd', 'ii-sidd', 'u-sidd', 'uu-sidd', 'iAlt-sidd', 'iAlt2-sidd', 'iiAlt-sidd', 'uAlt-sidd', 'rVocalic-sidd', 'rrVocalic-sidd', 'lVocalic-sidd', 'llVocalic-sidd', 'e-sidd', 'ai-sidd', 'o-sidd', 'au-sidd', 'ka-sidd', 'kha-sidd', 'ga-sidd', 'gha-sidd', 'nga-sidd', 'ca-sidd', 'cha-sidd', 'ja-sidd', 'jha-sidd', 'nya-sidd', 'tta-sidd', 'ttha-sidd', 'dda-sidd', 'ddha-sidd', 'nna-sidd', 'ta-sidd', 'tha-sidd', 'da-sidd', 'dha-sidd', 'na-sidd', 'pa-sidd', 'pha-sidd', 'ba-sidd', 'bha-sidd', 'ma-sidd', 'ya-sidd', 'ra-sidd', 'la-sidd', 'va-sidd', 'sha-sidd', 'ssa-sidd', 'sa-sidd', 'ha-sidd', 'aaMatra-sidd', 'iiMatra-sidd', 'eMatra-sidd', 'aiMatra-sidd', 'oMatra-sidd', 'auMatra-sidd', 'visarga-sidd', 'jha-sidd.ini.aaMatra', 'nya-sidd.ini.aaMatra', 'jha-sidd.iniThird.aaMatra', 'nya-sidd.iniThird.aaMatra', 'jha-sidd.aaMatra', 'nya-sidd.aaMatra', 'ka-sidd.ini.centre', 'tta-sidd.ini.centre', 'ttha-sidd.ini.centre', 'ka-sidd.iniThird.centre', 'tta-sidd.iniThird.centre', 'ttha-sidd.iniThird.centre', 'da-sidd.ini.diaB', 'da-sidd.iniThird.diaB', 'a-sidd.ini', 'aa-sidd.ini', 'ka-sidd.ini', 'kha-sidd.ini', 'ga-sidd.ini', 'gha-sidd.ini', 'nga-sidd.ini', 'ca-sidd.ini', 'cha-sidd.ini', 'ja-sidd.ini', 'jha-sidd.ini', 'nya-sidd.ini', 'tta-sidd.ini', 'ttha-sidd.ini', 'dda-sidd.ini', 'ddha-sidd.ini', 'nna-sidd.ini', 'ta-sidd.ini', 'tha-sidd.ini', 'da-sidd.ini', 'dha-sidd.ini', 'na-sidd.ini', 'pa-sidd.ini', 'pha-sidd.ini', 'ba-sidd.ini', 'bha-sidd.ini', 'ma-sidd.ini', 'ya-sidd.ini', 'ra-sidd.ini', 'la-sidd.ini', 'va-sidd.ini', 'sha-sidd.ini', 'ssa-sidd.ini', 'sa-sidd.ini', 'ha-sidd.ini', 'a-sidd.iniThird', 'aa-sidd.iniThird', 'ka-sidd.iniThird', 'kha-sidd.iniThird', 'ga-sidd.iniThird', 'gha-sidd.iniThird', 'nga-sidd.iniThird', 'ca-sidd.iniThird', 'cha-sidd.iniThird', 'ja-sidd.iniThird', 'jha-sidd.iniThird', 'nya-sidd.iniThird', 'tta-sidd.iniThird', 'ttha-sidd.iniThird', 'dda-sidd.iniThird', 'ddha-sidd.iniThird', 'nna-sidd.iniThird', 'ta-sidd.iniThird', 'tha-sidd.iniThird', 'da-sidd.iniThird', 'dha-sidd.iniThird', 'na-sidd.iniThird', 'pa-sidd.iniThird', 'pha-sidd.iniThird', 'ba-sidd.iniThird', 'bha-sidd.iniThird', 'ma-sidd.iniThird', 'ya-sidd.iniThird', 'ra-sidd.iniThird', 'la-sidd.iniThird', 'va-sidd.iniThird', 'sha-sidd.iniThird', 'ssa-sidd.iniThird', 'sa-sidd.iniThird', 'ha-sidd.iniThird', 'aaMatra-sidd.ini.jha', 'aaMatra-sidd.iniThird.jha', 'aaMatra-sidd.jha', 'iMatra-sidd.la', 'ra-sidd.ini.long', 'eMatra-sidd.long', 'iMatra-sidd.narrow', 'iiMatra-sidd.narrow', 'aaMatra-sidd.nga', 'iMatra-sidd.la.open', 'iMatra-sidd.narrow.open', 'aaMatra-sidd.jha.ra', 'iMatra-sidd.la.ra', 'eMatra-sidd.long.ra', 'iMatra-sidd.narrow.ra', 'iiMatra-sidd.narrow.ra', 'aaMatra-sidd.nga.ra', 'iMatra-sidd.la.open.ra', 'iMatra-sidd.narrow.open.ra', 'aaMatra-sidd.short.ra', 'aaMatra-sidd.ra', 'iiMatra-sidd.ra', 'eMatra-sidd.ra', 'aiMatra-sidd.ra', 'aiMatra-sidd.tha.ra', 'iiMatra-sidd.wide.ra', 'iiMatra-sidd.wide2.ra', 'aaMatra-sidd.short', 'aiMatra-sidd.ra.ss02', 'aiMatra-sidd.tha.ra.ss02', 'ai-sidd.ss02', 'iiMatra-sidd.wide', 'iiMatra-sidd.wide2', 'head-sidd', 'danda-sidd', 'doubledanda-sidd', 'dot-sidd', 'bar-sidd', 'endtext-sidd', 'dottedCircle', 'repetition1-sidd', 'repetition2-sidd', 'repetition3-sidd', 'sectionTridentUOrnaments-sidd', 'sectionTridentDottedCrescents-sidd', 'sectionRaysDottedCrescents-sidd', 'sectionRaysDottedDoubleCrescents-sidd', 'sectionRaysDottedTripleCrescents-sidd', 'sectionDoubleRing-sidd', 'sectionDoubleRingRay-sidd', 'sectionDoubleCrescents-sidd', 'sectionTripleCrescents-sidd', 'sectionQuadCrescents-sidd', 'sectionSeptCrescents-sidd', 'sectionCierclesRays-sidd', 'sectionCierclesTwoEnclosures-sidd', 'sectionCierclesFourEnclosures-sidd', 'seed_ka_rMatra_tt_virama-sidd', 'seed_aaMatra_visarga-sidd', 'seed_ha_r_iiMatra-sidd', 'seed_ha_r-sidd', 'seed_hammaan-sidd', 'seed_sh_r_h_y_iMatra_m.sidd', 'seed_ha_sidd', 'seed_ta_r-sidd', 'seed_ta_r_uuMatra-sidd', 'seed_ta_h_iiMatra_ma_m-sidd', 'seed_ta_r_k_y_iMatra_anusvara-sidd', 'seed_ca_l_h_y_iMatra_candrabindu-sidd', 'seed_ca_ch_rMatra_ha_y_candrabindu-sidd', 'seed_ca_ch_r_k_y_candrabindu-sidd', 'seed_ca_ch_r_k_y_iiMatra_candrabindu-sidd', 'seed_dha_iMatra_visarga_ma_m_danda-sidd', 'seed_dha_iMatra_visarga_ma_m-sidd', 'seed_dha_iMatra_visarga_ma-sidd', 'seed_ja_nn-sidd', 'seed_ja_visarga-sidd', 'seed_ma_l_c_y_aaMatra-sidd', 'seed_ma_ha_k_l_y-sidd', 'seed_ma_ha_k_l_y_aaMatra-sidd', 'seed_ma_nn-sidd', 'seed_da_dh-sidd', 'seed_da_v_aaMatra-sidd', 'seed_da_dh_aaMatra_visarga-sidd', 'seed_ta_r_tt_virama-sidd', 'seed_ta_r_h_y_iMatra_anusvara-sidd', 'seed_ta_r_aaMatra_visagra_ha_uMatra-sidd', 'seed_ha_l-sidd', 'seed_va_c_l_m_d_y_aiMatra-sidd', 'seed_va_r_h_m_m-sidd', 'seed_va_sh_r_m_nn_y_auMatra_sidd', 'seed_sa_t_r_y_iMatra_anusvara-sidd', 'seed_sa_l_h_y_iiMatra_anusvara-sidd', 'seed_ha_k_l_oMatra_anusvara-sidd', 'seed_ha_r_iiMatra_ha_visarga-sidd', 'seed_ha_iiMatra_ha_uMatra_visarga-sidd', 'seed_ha_h_uMatra-sidd', 'seed_ha_h_uuMatra-sidd', 'seed_ha_h_uuMatraAlt-sidd', 'seed_sha_rMatra_aiMatra_ka_virama-sidd', 'seed_sha_rMatra_rMatra_aiMatra_ka_k-sidd', 'seed_ra_rMatra_iMatra_aaMatra-sidd', 'aaMatra-sidd.jha.ra.third', 'seed_hammaan_danda-sidd'] [code: mono-outliers]


    Result: [1;91;107mFAIL[0m

 >> [1;35;107mcom.google.fonts/check/dsig[0m
    [0;36;107mDoes the font have a DSIG table?[0m
    with NotoSansSiddham-Regular.ttf

    [1;35;107m  Rationale:                                                                [0m
    [0;30;107m  Microsoft Office 2013 and below products expect fonts to have a digital   [0m
    [0;30;107m  signature declared in a DSIG table in order to implement OpenType         [0m
    [0;30;107m  features. The EOL date for Microsoft Office 2013 products is 4/11/2023.   [0m
    [0;30;107m  This issue does not impact Microsoft Office 2016 and above products.      [0m
    [0;30;107m                                                                            [0m
    [0;30;107m  This checks verifies that this signature is available in the font.        [0m
    [0;30;107m                                                                            [0m
    [0;30;107m  A fake signature is enough to address this issue. If needed, a dummy      [0m
    [0;30;107m  table can be added to the font with the `gftools fix-dsig` script         [0m
    [0;30;107m  available at https://github.com/googlefonts/gftools                       [0m
    [0;30;107m                                                                            [0m
    [0;30;107m  Reference: https://github.com/googlefonts/fontbakery/issues/1845          [0m

    * [1;91;107mFAIL[0m: This font lacks a digital signature (DSIG table). Some applications may require one (even if only a dummy placeholder) in order to work properly. You can add a DSIG table by running the `gftools fix-dsig` script. [code: lacks-signature]


    Result: [1;91;107mFAIL[0m

 >> [1;35;107mcom.google.fonts/check/gdef_mark_chars[0m
    [0;36;107mCheck mark characters are in GDEF mark glyph class[0m
    with NotoSansSiddham-Regular.ttf

    [1;35;107m  Rationale:                                                                [0m
    [0;30;107m  Mark characters should be in the GDEF mark glyph class.                   [0m

    * [1;30;103mWARN[0m: The following mark characters could be in the GDEF mark glyph class:
	 U+115AF, U+115B0, U+115B1, U+115B8, U+115B9, U+115BA, U+115BB and U+115BE [code: mark-chars]


    Result: [1;30;103mWARN[0m

 >> [1;35;107mcom.google.fonts/check/outline_alignment_miss[0m
    [0;36;107mAre there any misaligned on-curve points?[0m
    with NotoSansSiddham-Regular.ttf

    [1;35;107m  Rationale:                                                                [0m
    [0;30;107m  This test heuristically looks for on-curve points which are close to, but [0m
    [0;30;107m  do not sit on, significant boundary coordinates. For example, a point     [0m
    [0;30;107m  which has a Y-coordinate of 1 or -1 might be a misplaced baseline point.  [0m
    [0;30;107m  As well as the baseline, the test also checks for points near the         [0m
    [0;30;107m  x-height (but only for lower case Latin letters), cap-height, ascender    [0m
    [0;30;107m  and descender Y coordinates.                                              [0m
    [0;30;107m                                                                            [0m
    [0;30;107m  Not all such misaligned curve points are a mistake, and sometimes the     [0m
    [0;30;107m  design may call for points in locations near the boundaries. As this test [0m
    [0;30;107m  is liable to generate significant numbers of false positives, the test    [0m
    [0;30;107m  will pass if there are more than 100 reported misalignments.              [0m

    * [1;30;103mWARN[0m: The following glyphs have on-curve points which have potentially incorrect y coordinates:
	* ii-sidd: X=279.0,Y=-1.0 (should be at baseline 0?)
	* ttha-sidd: X=350.0,Y=1.0 (should be at baseline 0?)
	* ta-sidd: X=266.5,Y=-1.0 (should be at baseline 0?)
	* tha-sidd: X=216.0,Y=0.5 (should be at baseline 0?)
	* dha-sidd: X=482.0,Y=1.5 (should be at baseline 0?)
	* ma-sidd: X=530.5,Y=-0.5 (should be at baseline 0?)
	* ma-sidd: X=594.5,Y=0.5 (should be at baseline 0?)
	* eMatra-sidd: X=185.5,Y=712.5 (should be at cap-height 714?)
	* eMatra-sidd: X=42.5,Y=715.0 (should be at cap-height 714?)
	* aiMatra-sidd: X=185.5,Y=712.5 (should be at cap-height 714?) and 72 more. [code: found-misalignments]


    Result: [1;30;103mWARN[0m

 >> [1;35;107mcom.google.fonts/check/outline_colinear_vectors[0m
    [0;36;107mDo any segments have colinear vectors?[0m
    with NotoSansSiddham-Regular.ttf

    [1;35;107m  Rationale:                                                                [0m
    [0;30;107m  This test looks for consecutive line segments which have the same angle.  [0m
    [0;30;107m  This normally happens if an outline point has been added by accident.     [0m
    [0;30;107m                                                                            [0m
    [0;30;107m  This test is not run for variable fonts, as they may legitimately have    [0m
    [0;30;107m  colinear vectors.                                                         [0m

    * [1;30;103mWARN[0m: The following glyphs have colinear vectors:
	* ddh-sidd.third.diaT: L<<274.0,365.0>--<274.0,400.0>> -> L<<274.0,400.0>--<274.0,401.0>>
	* ddh-sidd.third.diaT: L<<364.0,398.0>--<364.0,367.0>> -> L<<364.0,367.0>--<364.0,366.0>>
	* seed_ma_ha_k_l_y-sidd: L<<344.0,100.0>--<344.0,124.0>> -> L<<344.0,124.0>--<344.0,128.0>>
	* seed_ma_ha_k_l_y_aaMatra-sidd: L<<344.0,100.0>--<344.0,124.0>> -> L<<344.0,124.0>--<344.0,128.0>>
	* seed_va_sh_r_m_nn_y_auMatra_sidd: L<<576.0,-775.0>--<576.0,-717.0>> -> L<<576.0,-717.0>--<576.0,-714.0>> and seed_va_sh_r_m_nn_y_auMatra_sidd: L<<666.0,-703.0>--<666.0,-707.0>> -> L<<666.0,-707.0>--<666.0,-852.0>> [code: found-colinear-vectors]


    Result: [1;30;103mWARN[0m


Total:

    [1;97;101mERROR[0m: 0
    [1;91;107mFAIL[0m: 3
    [1;30;103mWARN[0m: 4
    [0;36;107mINFO[0m: 2
    [0;34;107mSKIP[0m: 17
    [0;32;107mPASS[0m: 51


DONE!

    [1;30;107mMeaning of check results:[0m

    An [1;97;101mERROR[0m is something wrong with FontBakery itself, possibly a bug.
    A [1;91;107mFAIL[0m is a problem with the font that must be fixed.
    A [1;30;103mWARN[0m is something that you should consider addressing.
    An [0;36;107mINFO[0m result simply prints something useful. Typically stats.
    A [0;32;107mPASS[0m means the font looks good for the given checking routine.
    And a [0;34;107mSKIP[0m happens when the check does not apply to the given font.

    If you get [1;97;101mERROR[0ms, please help us improve the tool by reporting them at
    [1;36;107mhttps://github.com/googlefonts/fontbakery/issues[0m

    (but other kinds of bug reports and/or
     feature requests are also always welcome, of course!)

