Start ... running 77 individual check executions.
 >> [1;35;107mcom.google.fonts/check/family/win_ascent_and_descent[0m
    [0;36;107mChecking OS/2 usWinAscent & usWinDescent.[0m
    with NotoSansArabicUI-SemiBold.ttf

    [1;35;107m  Rationale:                                                                [0m
    [0;30;107m  A font's winAscent and winDescent values should be greater than the head  [0m
    [0;30;107m  table's yMax, abs(yMin) values. If they are less than these values,       [0m
    [0;30;107m  clipping can occur on Windows platforms                                   [0m
    [0;30;107m  (https://github.com/RedHatBrand/Overpass/issues/33).                      [0m
    [0;30;107m                                                                            [0m
    [0;30;107m  If the font includes tall/deep writing systems such as Arabic or          [0m
    [0;30;107m  Devanagari, the winAscent and winDescent can be greater than the yMax and [0m
    [0;30;107m  abs(yMin) to accommodate vowel marks.                                     [0m
    [0;30;107m                                                                            [0m
    [0;30;107m  When the win Metrics are significantly greater than the upm, the          [0m
    [0;30;107m  linespacing can appear too loose. To counteract this, enabling the OS/2   [0m
    [0;30;107m  fsSelection bit 7 (Use_Typo_Metrics), will force Windows to use the OS/2  [0m
    [0;30;107m  typo values instead. This means the font developer can control the        [0m
    [0;30;107m  linespacing with the typo values, whilst avoiding clipping by setting the [0m
    [0;30;107m  win values to values greater than the yMax and abs(yMin).                 [0m

    * [1;91;107mFAIL[0m: OS/2.usWinDescent value should be equal or greater than 512, but got 293 instead. [code: descent]


    Result: [1;91;107mFAIL[0m

 >> [1;35;107mcom.google.fonts/check/required_tables[0m
    [0;36;107mFont contains all required tables?[0m
    with NotoSansArabicUI-SemiBold.ttf

    [1;35;107m  Rationale:                                                                [0m
    [0;30;107m  Depending on the typeface and coverage of a font, certain tables are      [0m
    [0;30;107m  recommended for optimum quality. For example, the performance of a        [0m
    [0;30;107m  non-linear font is improved if the VDMX, LTSH, and hdmx tables are        [0m
    [0;30;107m  present. Non-monospaced Latin fonts should have a kern table. A gasp      [0m
    [0;30;107m  table is necessary if a designer wants to influence the sizes at which    [0m
    [0;30;107m  grayscaling is used under Windows. A DSIG table containing a digital      [0m
    [0;30;107m  signature helps ensure the integrity of the font file. Etc.               [0m

    * [0;36;107mINFO[0m: This font contains the following optional tables [loca, GPOS, GSUB]


    Result: [0;36;107mINFO[0m

 >> [1;35;107mcom.google.fonts/check/valid_glyphnames[0m
    [0;36;107mGlyph names are all valid?[0m
    with NotoSansArabicUI-SemiBold.ttf

    [1;35;107m  Rationale:                                                                [0m
    [0;30;107m  Microsoft's recommendations for OpenType Fonts states the following:      [0m
    [0;30;107m                                                                            [0m
    [0;30;107m  'NOTE: The PostScript glyph name must be no longer than 31 characters,    [0m
    [0;30;107m  include only uppercase or lowercase English letters, European digits, the [0m
    [0;30;107m  period or the underscore, i.e. from the set [A-Za-z0-9_.] and should      [0m
    [0;30;107m  start with a letter, except the special glyph name ".notdef" which starts [0m
    [0;30;107m  with a period.'                                                           [0m
    [0;30;107m                                                                            [0m
    [0;30;107m  https://docs.microsoft.com/en-us/typography/opentype/spec/recom#post-table[0m
    [0;30;107m                                                                            [0m
    [0;30;107m                                                                            [0m
    [0;30;107m  In practice, though, particularly in modern environments, glyph names can [0m
    [0;30;107m  be as long as 63 characters.                                              [0m
    [0;30;107m  According to the "Adobe Glyph List Specification" available at:           [0m
    [0;30;107m                                                                            [0m
    [0;30;107m  https://github.com/adobe-type-tools/agl-specification                     [0m

    * [1;30;103mWARN[0m: The following glyph names may be too long for some legacy systems which may expect a maximum 31-char length limit:
behThreedotsupbelowVabovear.fina, behThreedotsupbelowVabovear.init, behThreedotsupbelowVabovear.medi, dalTwodotsverticalbelowTahabovear, dalTwodotsverticalbelowTahabovear.fina, seenThreedotsbelowthreedotsar.fina, seenThreedotsbelowthreedotsar.init and seenThreedotsbelowthreedotsar.medi [code: legacy-long-names]


    Result: [1;30;103mWARN[0m

 >> [1;35;107mcom.google.fonts/check/superfamily/list[0m
    [0;36;107mList all superfamily filepaths[0m
    with NotoSansArabicUI-SemiBold.ttf

    [1;35;107m  Rationale:                                                                [0m
    [0;30;107m  This is a merely informative check that lists all sibling families        [0m
    [0;30;107m  detected by fontbakery.                                                   [0m
    [0;30;107m                                                                            [0m
    [0;30;107m  Only the fontfiles in these directories will be considered in             [0m
    [0;30;107m  superfamily-level checks.                                                 [0m

    * [0;36;107mINFO[0m: . [code: family-path]


    Result: [0;36;107mINFO[0m

 >> [1;35;107mcom.google.fonts/check/name/match_familyname_fullfont[0m
    [0;36;107mDoes full font name begin with the font family name?[0m
    with NotoSansArabicUI-SemiBold.ttf

    * [1;91;107mFAIL[0m: On the 'name' table, the full font name (NameID 4 - FULL_FONT_NAME: 'Noto Sans Arabic UI SmBd') does not begin with font family name (NameID 1 - FONT_FAMILY_NAME: 'Noto Sans Arabic UI SemiBold') [code: does-not]


    Result: [1;91;107mFAIL[0m

 >> [1;35;107mcom.google.fonts/check/dsig[0m
    [0;36;107mDoes the font have a DSIG table?[0m
    with NotoSansArabicUI-SemiBold.ttf

    [1;35;107m  Rationale:                                                                [0m
    [0;30;107m  Microsoft Office 2013 and below products expect fonts to have a digital   [0m
    [0;30;107m  signature declared in a DSIG table in order to implement OpenType         [0m
    [0;30;107m  features. The EOL date for Microsoft Office 2013 products is 4/11/2023.   [0m
    [0;30;107m  This issue does not impact Microsoft Office 2016 and above products.      [0m
    [0;30;107m                                                                            [0m
    [0;30;107m  This checks verifies that this signature is available in the font.        [0m
    [0;30;107m                                                                            [0m
    [0;30;107m  A fake signature is enough to address this issue. If needed, a dummy      [0m
    [0;30;107m  table can be added to the font with the `gftools fix-dsig` script         [0m
    [0;30;107m  available at https://github.com/googlefonts/gftools                       [0m
    [0;30;107m                                                                            [0m
    [0;30;107m  Reference: https://github.com/googlefonts/fontbakery/issues/1845          [0m

    * [1;91;107mFAIL[0m: This font lacks a digital signature (DSIG table). Some applications may require one (even if only a dummy placeholder) in order to work properly. You can add a DSIG table by running the `gftools fix-dsig` script. [code: lacks-signature]


    Result: [1;91;107mFAIL[0m

 >> [1;35;107mcom.google.fonts/check/gdef_mark_chars[0m
    [0;36;107mCheck mark characters are in GDEF mark glyph class[0m
    with NotoSansArabicUI-SemiBold.ttf

    [1;35;107m  Rationale:                                                                [0m
    [0;30;107m  Mark characters should be in the GDEF mark glyph class.                   [0m

    * [1;30;103mWARN[0m: The following mark characters could be in the GDEF mark glyph class:
	 U+06D6, U+06D7, U+06D8, U+06D9, U+06DA and U+06DB [code: mark-chars]


    Result: [1;30;103mWARN[0m

 >> [1;35;107mcom.google.fonts/check/glyf_nested_components[0m
    [0;36;107mCheck glyphs do not have components which are themselves components.[0m
    with NotoSansArabicUI-SemiBold.ttf

    [1;35;107m  Rationale:                                                                [0m
    [0;30;107m  There have been bugs rendering variable fonts with nested components.     [0m
    [0;30;107m  Additionally, some static fonts with nested components have been reported [0m
    [0;30;107m  to have rendering and printing issues.                                    [0m
    [0;30;107m                                                                            [0m
    [0;30;107m  For more info, see:                                                       [0m
    [0;30;107m  * https://github.com/googlefonts/fontbakery/issues/2961                   [0m
    [0;30;107m  * https://github.com/arrowtype/recursive/issues/412                       [0m

    * [1;91;107mFAIL[0m: The following glyphs have components which themselves are component glyphs:
	* uni060B
	* uniFCBA
	* uniFD75
	* uniFDC4
	* uniFDF3
	* uniFD3D
	* uniFE8F
	* uniFC09
	* uniFC6E
	* uniFC06 and 415 more. [code: found-nested-components]


    Result: [1;91;107mFAIL[0m

 >> [1;35;107mcom.google.fonts/check/outline_colinear_vectors[0m
    [0;36;107mDo any segments have colinear vectors?[0m
    with NotoSansArabicUI-SemiBold.ttf

    [1;35;107m  Rationale:                                                                [0m
    [0;30;107m  This test looks for consecutive line segments which have the same angle.  [0m
    [0;30;107m  This normally happens if an outline point has been added by accident.     [0m
    [0;30;107m                                                                            [0m
    [0;30;107m  This test is not run for variable fonts, as they may legitimately have    [0m
    [0;30;107m  colinear vectors.                                                         [0m

    * [1;30;103mWARN[0m: The following glyphs have colinear vectors:
	* uni0668: L<<368.0,677.0>--<368.0,677.0>> -> L<<368.0,677.0>--<369.0,677.0>>
	* uni06F8: L<<368.0,677.0>--<368.0,677.0>> -> L<<368.0,677.0>--<369.0,677.0>>
	* uniFDFD: L<<2118.0,-3.0>--<2116.0,-3.0>> -> L<<2116.0,-3.0>--<2112.0,-3.0>>
	* uniFDFD: L<<2119.0,-3.0>--<2118.0,-3.0>> -> L<<2118.0,-3.0>--<2116.0,-3.0>>
	* uniFDFD: L<<3043.0,-3.0>--<3042.0,-3.0>> -> L<<3042.0,-3.0>--<3038.0,-3.0>>
	* uniFDFD: L<<3045.0,-3.0>--<3043.0,-3.0>> -> L<<3043.0,-3.0>--<3042.0,-3.0>>
	* uniFDFD: L<<4001.0,-3.0>--<3999.0,-3.0>> -> L<<3999.0,-3.0>--<3996.0,-3.0>>
	* uniFDFD: L<<4003.0,-3.0>--<4001.0,-3.0>> -> L<<4001.0,-3.0>--<3999.0,-3.0>>
	* uniFDFD: L<<411.0,-3.0>--<408.0,-3.0>> -> L<<408.0,-3.0>--<404.0,-3.0>>
	* uniFDFD: L<<412.0,-3.0>--<411.0,-3.0>> -> L<<411.0,-3.0>--<408.0,-3.0>> and uniFDFD: L<<7444.0,0.0>--<7443.0,0.0>> -> L<<7443.0,0.0>--<7440.0,0.0>> [code: found-colinear-vectors]


    Result: [1;30;103mWARN[0m

 >> [1;35;107mcom.google.fonts/check/outline_jaggy_segments[0m
    [0;36;107mDo outlines contain any jaggy segments?[0m
    with NotoSansArabicUI-SemiBold.ttf

    [1;35;107m  Rationale:                                                                [0m
    [0;30;107m  This test heuristically detects outline segments which form a             [0m
    [0;30;107m  particularly small angle, indicative of an outline error. This may cause  [0m
    [0;30;107m  false positives in cases such as extreme ink traps, so should be regarded [0m
    [0;30;107m  as advisory and backed up by manual inspection.                           [0m

    * [1;30;103mWARN[0m: The following glyphs have jaggy segments:
	* uni0667: L<<361.0,10.0>--<248.0,-8.0>>/L<<248.0,-8.0>--<248.0,-8.0>> = 9.050721677183743
	* uni06F7: L<<361.0,10.0>--<248.0,-8.0>>/L<<248.0,-8.0>--<248.0,-8.0>> = 9.050721677183743
	* uni08A5.fina: L<<614.0,43.0>--<615.0,43.0>>/B<<615.0,43.0>-<587.0,39.0>-<563.0,39.0>> = 8.13010235415596
	* uni08D7: L<<216.0,650.0>--<216.0,650.0>>/B<<216.0,650.0>-<207.0,649.0>-<196.0,649.0>> = 6.340191745909908
	* uniFDFD: L<<2112.0,-3.0>--<2112.0,-3.0>>/B<<2112.0,-3.0>-<2072.0,-1.0>-<2051.0,22.0>> = 2.862405226111651
	* uniFDFD: L<<3038.0,-3.0>--<3038.0,-3.0>>/B<<3038.0,-3.0>-<3000.0,-2.0>-<2977.0,18.0>> = 1.5074357587748821
	* uniFDFD: L<<3392.0,-3.0>--<3392.0,-3.0>>/B<<3392.0,-3.0>-<3346.0,0.0>-<3321.0,28.0>> = 3.731396999160402
	* uniFDFD: L<<3996.0,-3.0>--<3996.0,-3.0>>/B<<3996.0,-3.0>-<3956.0,-1.0>-<3935.0,22.0>> = 2.862405226111651
	* uniFDFD: L<<404.0,-3.0>--<404.0,-3.0>>/B<<404.0,-3.0>-<362.0,-1.0>-<335.0,27.0>> = 2.726310993906212
	* uniFDFD: L<<5881.0,0.0>--<5881.0,0.0>>/B<<5881.0,0.0>-<5839.0,2.0>-<5811.0,30.0>> = 2.726310993906212
	* uniFDFD: L<<625.0,-3.0>--<625.0,-3.0>>/B<<625.0,-3.0>-<548.0,0.0>-<529.0,43.0>> = 2.231174608031095 and uniFDFD: L<<7440.0,0.0>--<7440.0,0.0>>/B<<7440.0,0.0>-<7410.0,1.0>-<7383.0,13.5>> = 1.9091524329963898 [code: found-jaggy-segments]


    Result: [1;30;103mWARN[0m

 >> [1;35;107mcom.google.fonts/check/outline_semi_vertical[0m
    [0;36;107mDo outlines contain any semi-vertical or semi-horizontal lines?[0m
    with NotoSansArabicUI-SemiBold.ttf

    [1;35;107m  Rationale:                                                                [0m
    [0;30;107m  This test detects line segments which are nearly, but not quite, exactly  [0m
    [0;30;107m  horizontal or vertical. Sometimes such lines are created by design, but   [0m
    [0;30;107m  often they are indicative of a design error.                              [0m
    [0;30;107m                                                                            [0m
    [0;30;107m  This test is disabled for italic styles, which often contain              [0m
    [0;30;107m  nearly-upright lines.                                                     [0m

    * [1;30;103mWARN[0m: The following glyphs have semi-vertical/semi-horizontal lines:
	* uni0602: L<<294.0,-34.0>--<1114.0,-35.0>>
	* uni0606: L<<609.0,383.0>--<477.0,384.0>>
	* uni0607: L<<609.0,383.0>--<477.0,384.0>>
	* uni0659: L<<30.0,690.0>--<270.0,691.0>> and uni221B0607.pt: L<<609.0,383.0>--<477.0,384.0>> [code: found-semi-vertical]


    Result: [1;30;103mWARN[0m


Total:

    [1;97;101mERROR[0m: 0
    [1;91;107mFAIL[0m: 4
    [1;30;103mWARN[0m: 5
    [0;36;107mINFO[0m: 2
    [0;34;107mSKIP[0m: 18
    [0;32;107mPASS[0m: 48


DONE!

    [1;30;107mMeaning of check results:[0m

    An [1;97;101mERROR[0m is something wrong with FontBakery itself, possibly a bug.
    A [1;91;107mFAIL[0m is a problem with the font that must be fixed.
    A [1;30;103mWARN[0m is something that you should consider addressing.
    An [0;36;107mINFO[0m result simply prints something useful. Typically stats.
    A [0;32;107mPASS[0m means the font looks good for the given checking routine.
    And a [0;34;107mSKIP[0m happens when the check does not apply to the given font.

    If you get [1;97;101mERROR[0ms, please help us improve the tool by reporting them at
    [1;36;107mhttps://github.com/googlefonts/fontbakery/issues[0m

    (but other kinds of bug reports and/or
     feature requests are also always welcome, of course!)

