Start ... running 77 individual check executions.
 >> [1;35;107mcom.google.fonts/check/unicode_range_bits[0m
    [0;36;107mEnsure UnicodeRange bits are properly set.[0m
    with NotoSansBrahmi-Regular.ttf

    [1;35;107m  Rationale:                                                                [0m
    [0;30;107m  When the UnicodeRange bits on the OS/2 table are not properly set, some   [0m
    [0;30;107m  programs running on Windows may not recognize the font and use a system   [0m
    [0;30;107m  fallback font instead. For that reason, this check calculates the proper  [0m
    [0;30;107m  settings by inspecting the glyphs declared on the cmap table and then     [0m
    [0;30;107m  ensures that their corresponding ranges are enabled.                      [0m

    * [1;30;103mWARN[0m: UnicodeRange bit 57 "Non-Plane 0 *" should be 0 because cmap has none of the 2048 codepoints in this range. [code: bad-range-bit]


    Result: [1;30;103mWARN[0m

 >> [1;35;107mcom.google.fonts/check/required_tables[0m
    [0;36;107mFont contains all required tables?[0m
    with NotoSansBrahmi-Regular.ttf

    [1;35;107m  Rationale:                                                                [0m
    [0;30;107m  Depending on the typeface and coverage of a font, certain tables are      [0m
    [0;30;107m  recommended for optimum quality. For example, the performance of a        [0m
    [0;30;107m  non-linear font is improved if the VDMX, LTSH, and hdmx tables are        [0m
    [0;30;107m  present. Non-monospaced Latin fonts should have a kern table. A gasp      [0m
    [0;30;107m  table is necessary if a designer wants to influence the sizes at which    [0m
    [0;30;107m  grayscaling is used under Windows. A DSIG table containing a digital      [0m
    [0;30;107m  signature helps ensure the integrity of the font file. Etc.               [0m

    * [0;36;107mINFO[0m: This font contains the following optional tables [loca, GPOS, GSUB]


    Result: [0;36;107mINFO[0m

 >> [1;35;107mcom.google.fonts/check/superfamily/list[0m
    [0;36;107mList all superfamily filepaths[0m
    with NotoSansBrahmi-Regular.ttf

    [1;35;107m  Rationale:                                                                [0m
    [0;30;107m  This is a merely informative check that lists all sibling families        [0m
    [0;30;107m  detected by fontbakery.                                                   [0m
    [0;30;107m                                                                            [0m
    [0;30;107m  Only the fontfiles in these directories will be considered in             [0m
    [0;30;107m  superfamily-level checks.                                                 [0m

    * [0;36;107mINFO[0m: . [code: family-path]


    Result: [0;36;107mINFO[0m

 >> [1;35;107mcom.google.fonts/check/monospace[0m
    [0;36;107mChecking correctness of monospaced metadata.[0m
    with NotoSansBrahmi-Regular.ttf

    [1;35;107m  Rationale:                                                                [0m
    [0;30;107m  There are various metadata in the OpenType spec to specify if a font is   [0m
    [0;30;107m  monospaced or not. If the font is not truly monospaced, then no           [0m
    [0;30;107m  monospaced metadata should be set (as sometimes they mistakenly are...)   [0m
    [0;30;107m                                                                            [0m
    [0;30;107m  Requirements for monospace fonts:                                         [0m
    [0;30;107m                                                                            [0m
    [0;30;107m  * post.isFixedPitch - "Set to 0 if the font is proportionally spaced,     [0m
    [0;30;107m  non-zero if the font is not proportionally spaced (monospaced)"           [0m
    [0;30;107m    www.microsoft.com/typography/otspec/post.htm                            [0m
    [0;30;107m                                                                            [0m
    [0;30;107m  * hhea.advanceWidthMax must be correct, meaning no glyph's width value is [0m
    [0;30;107m  greater.                                                                  [0m
    [0;30;107m    www.microsoft.com/typography/otspec/hhea.htm                            [0m
    [0;30;107m                                                                            [0m
    [0;30;107m  * OS/2.panose.bProportion must be set to 9 (monospace). Spec says: "The   [0m
    [0;30;107m  PANOSE definition contains ten digits each of which currently describes   [0m
    [0;30;107m  up to sixteen variations. Windows uses bFamilyType, bSerifStyle and       [0m
    [0;30;107m  bProportion in the font mapper to determine family type. It also uses     [0m
    [0;30;107m  bProportion to determine if the font is monospaced."                      [0m
    [0;30;107m    www.microsoft.com/typography/otspec/os2.htm#pan                         [0m
    [0;30;107m    monotypecom-test.monotype.de/services/pan2                              [0m
    [0;30;107m                                                                            [0m
    [0;30;107m  * OS/2.xAvgCharWidth must be set accurately.                              [0m
    [0;30;107m    "OS/2.xAvgCharWidth is used when rendering monospaced fonts, at least   [0m
    [0;30;107m  by Windows GDI"                                                           [0m
    [0;30;107m    http://typedrawers.com/discussion/comment/15397/#Comment_15397          [0m
    [0;30;107m                                                                            [0m
    [0;30;107m  Also we should report an error for glyphs not of average width.           [0m
    [0;30;107m                                                                            [0m
    [0;30;107m  Please also note:                                                         [0m
    [0;30;107m  Thomas Phinney told us that a few years ago (as of December 2019), if you [0m
    [0;30;107m  gave a font a monospace flag in Panose, Microsoft Word would ignore the   [0m
    [0;30;107m  actual advance widths and treat it as monospaced. Source:                 [0m
    [0;30;107m  https://typedrawers.com/discussion/comment/45140/#Comment_45140           [0m

    * [1;91;107mFAIL[0m: On monospaced fonts, the value of post.isFixedPitch must be set to a non-zero value (meaning 'fixed width monospaced'), but got 0 instead. [code: mono-bad-post-isFixedPitch]
    * [1;91;107mFAIL[0m: On monospaced fonts, the value of OS/2.panose.bProportion must be set to 9 (proportion: monospaced), but got 2 instead. [code: mono-bad-panose-proportion]
    * [1;30;103mWARN[0m: Font is monospaced but 217 glyphs (84.44%) have a different width. You should check the widths of: ['CR', 'space', 'uni00A0', 'candrabindu', 'visarga', 'u11003', 'u11004', 'brm_A', 'brm_AA', 'brm_I', 'brm_II', 'brm_U', 'brm_UU', 'brm_R', 'brm_RR', 'brm_L', 'brm_LL', 'brm_E', 'brm_AI', 'brm_O', 'brm_AU', 'brm_KA', 'brm_KHA', 'brm_GA', 'brm_GHA', 'brm_NGA', 'brm_CA', 'brm_CHA', 'brm_JA', 'brm_JHA', 'brm_NYA', 'brm_TTA', 'brm_TTHA', 'brm_DDA', 'brm_DDHA', 'brm_NNA', 'brm_TA', 'brm_THA', 'brm_DA', 'brm_DHA', 'brm_NA', 'brm_PA', 'brm_PHA', 'brm_BA', 'brm_BHA', 'brm_MA', 'brm_YA', 'brm_RA', 'brm_LA', 'brm_VA', 'brm_SHA', 'brm_SSA', 'SA', 'brm_HA', 'brm_LLA', 'brm_LLLA', 'brm_RRA', 'brm_NNNA', 'brm_danda', 'brm_doubledanda', 'brm_punctDOT', 'brm_punctDBLDOT', 'brm_punctLINE', 'brm_punctBAR', 'brm_Lotus', 'brm_num1', 'brm_num2', 'brm_num3', 'brm_num4', 'brm_num5', 'brm_num6', 'brm_num7', 'brm_num8', 'brm_num9', 'brm_num10', 'brm_num20', 'brm_num30', 'brm_num40', 'brm_num50', 'brm_num60', 'brm_num70', 'brm_num80', 'brm_num90', 'brm_num100', 'brm_num1000', 'brm_digit0', 'brm_digit1', 'brm_digit2', 'brm_digit3', 'brm_digit4', 'brm_digit5', 'brm_digit6', 'brm_digit7', 'brm_digit8', 'brm_digit9', 'brm_GHU', 'brm_GHUU', 'brm_NGU', 'brm_NGUU', 'brm_CU', 'brm_CUU', 'brm_CHU', 'brm_CHUU', 'brm_JAA', 'brm_JO', 'brm_JAU', 'brm_JU', 'brm_JUU', 'brm_JHO', 'brm_JHAU', 'brm_NYO', 'brm_NYAU', 'brm_TTU', 'brm_TTUU', 'brm_TTHO', 'brm_TTHAU', 'brm_TTHU', 'brm_TTHUU', 'brm_DDHU', 'brm_DDHUU', 'brm_NNU', 'brm_NNUU', 'brm_THO', 'brm_THAU', 'brm_THU', 'brm_THUU', 'brm_DHO', 'brm_DHAU', 'brm_NU', 'brm_NUU', 'brm_PU', 'brm_PUU', 'brm_PHU', 'brm_PHUU', 'brm_BO', 'brm_BAU', 'brm_BU', 'brm_BUU', 'brm_MO', 'brm_MAU', 'brm_MU', 'brm_MUU', 'brm_YU', 'brm_YUU', 'brm_LU', 'brm_LUU', 'brm_VU', 'brm_VUU', 'brm_SSU', 'brm_SSUU', 'brm_SU', 'brm_SUU', 'brm_HU', 'brm_HUU', 'brm_LLU', 'brm_LLUU', 'brm_LLLO', 'brm_LLLAU', 'brm_RRO', 'brm_RRAU', 'brm_NNNO', 'brm_NNNAU', 'brm_NNNU', 'brm_NNNUU', 'u1107F', 'brm_SVA', 'brm_KSSA', 'brm_JNYA', 'brm_num100.2', 'brm_num100.3', 'brm_num100.4', 'brm_num100.5', 'brm_num100.6', 'brm_num100.7', 'brm_num100.8', 'brm_num100.9', 'brm_num100.10', 'brm_num100.20', 'brm_num100.30', 'brm_num100.40', 'brm_num100.50', 'brm_num100.60', 'brm_num100.70', 'brm_num100.80', 'brm_num100.90', 'brm_num100.100', 'brm_num100.1000', 'brm_num1000.2', 'brm_num1000.3', 'brm_num1000.4', 'brm_num1000.5', 'brm_num1000.6', 'brm_num1000.7', 'brm_num1000.8', 'brm_num1000.9', 'brm_num1000.10', 'brm_num1000.20', 'brm_num1000.30', 'brm_num1000.40', 'brm_num1000.50', 'brm_num1000.60', 'brm_num1000.70', 'brm_num1000.80', 'brm_num1000.90', 'brm_num1000.100', 'brm_num1000.1000', 'uni25CC', 'u11003_11013', 'u11003_11014', 'u11004_11027', 'u11004_11028', 'brm_DAU', 'brm_DHU', 'brm_DHUU', 'brm_BHAU', 'brm_TRR', 'brm_TUU'] [code: mono-outliers]


    Result: [1;91;107mFAIL[0m

 >> [1;35;107mcom.google.fonts/check/dsig[0m
    [0;36;107mDoes the font have a DSIG table?[0m
    with NotoSansBrahmi-Regular.ttf

    [1;35;107m  Rationale:                                                                [0m
    [0;30;107m  Microsoft Office 2013 and below products expect fonts to have a digital   [0m
    [0;30;107m  signature declared in a DSIG table in order to implement OpenType         [0m
    [0;30;107m  features. The EOL date for Microsoft Office 2013 products is 4/11/2023.   [0m
    [0;30;107m  This issue does not impact Microsoft Office 2016 and above products.      [0m
    [0;30;107m                                                                            [0m
    [0;30;107m  This checks verifies that this signature is available in the font.        [0m
    [0;30;107m                                                                            [0m
    [0;30;107m  A fake signature is enough to address this issue. If needed, a dummy      [0m
    [0;30;107m  table can be added to the font with the `gftools fix-dsig` script         [0m
    [0;30;107m  available at https://github.com/googlefonts/gftools                       [0m
    [0;30;107m                                                                            [0m
    [0;30;107m  Reference: https://github.com/googlefonts/fontbakery/issues/1845          [0m

    * [1;91;107mFAIL[0m: This font lacks a digital signature (DSIG table). Some applications may require one (even if only a dummy placeholder) in order to work properly. You can add a DSIG table by running the `gftools fix-dsig` script. [code: lacks-signature]


    Result: [1;91;107mFAIL[0m

 >> [1;35;107mcom.google.fonts/check/gdef_mark_chars[0m
    [0;36;107mCheck mark characters are in GDEF mark glyph class[0m
    with NotoSansBrahmi-Regular.ttf

    [1;35;107m  Rationale:                                                                [0m
    [0;30;107m  Mark characters should be in the GDEF mark glyph class.                   [0m

    * [1;30;103mWARN[0m: The following mark characters could be in the GDEF mark glyph class:
	 U+11000, U+11002 and U+1107F [code: mark-chars]


    Result: [1;30;103mWARN[0m

 >> [1;35;107mcom.google.fonts/check/outline_alignment_miss[0m
    [0;36;107mAre there any misaligned on-curve points?[0m
    with NotoSansBrahmi-Regular.ttf

    [1;35;107m  Rationale:                                                                [0m
    [0;30;107m  This test heuristically looks for on-curve points which are close to, but [0m
    [0;30;107m  do not sit on, significant boundary coordinates. For example, a point     [0m
    [0;30;107m  which has a Y-coordinate of 1 or -1 might be a misplaced baseline point.  [0m
    [0;30;107m  As well as the baseline, the test also checks for points near the         [0m
    [0;30;107m  x-height (but only for lower case Latin letters), cap-height, ascender    [0m
    [0;30;107m  and descender Y coordinates.                                              [0m
    [0;30;107m                                                                            [0m
    [0;30;107m  Not all such misaligned curve points are a mistake, and sometimes the     [0m
    [0;30;107m  design may call for points in locations near the boundaries. As this test [0m
    [0;30;107m  is liable to generate significant numbers of false positives, the test    [0m
    [0;30;107m  will pass if there are more than 100 reported misalignments.              [0m

    * [1;30;103mWARN[0m: The following glyphs have on-curve points which have potentially incorrect y coordinates:
	* brm_L: X=251.5,Y=2.0 (should be at baseline 0?)
	* brm_LL: X=251.5,Y=2.0 (should be at baseline 0?)
	* brm_Lotus: X=394.0,Y=716.0 (should be at cap-height 714?)
	* brm_num6: X=381.0,Y=713.5 (should be at cap-height 714?)
	* brm_num70: X=460.5,Y=1.5 (should be at baseline 0?)
	* brm_digit5: X=173.0,Y=712.0 (should be at cap-height 714?)
	* brm_digit7: X=523.0,Y=-2.0 (should be at baseline 0?)
	* brm_GHUU: X=472.0,Y=1.0 (should be at baseline 0?)
	* brm_CU: X=266.0,Y=2.0 (should be at baseline 0?)
	* brm_CUU: X=275.0,Y=1.0 (should be at baseline 0?) and 9 more. [code: found-misalignments]


    Result: [1;30;103mWARN[0m

 >> [1;35;107mcom.google.fonts/check/outline_colinear_vectors[0m
    [0;36;107mDo any segments have colinear vectors?[0m
    with NotoSansBrahmi-Regular.ttf

    [1;35;107m  Rationale:                                                                [0m
    [0;30;107m  This test looks for consecutive line segments which have the same angle.  [0m
    [0;30;107m  This normally happens if an outline point has been added by accident.     [0m
    [0;30;107m                                                                            [0m
    [0;30;107m  This test is not run for variable fonts, as they may legitimately have    [0m
    [0;30;107m  colinear vectors.                                                         [0m

    * [1;30;103mWARN[0m: The following glyphs have colinear vectors:
	* brm_SHA: L<<289.0,537.0>--<269.0,451.0>> -> L<<269.0,451.0>--<124.0,0.0>> and brm_SHA: L<<534.0,0.0>--<391.0,445.0>> -> L<<391.0,445.0>--<367.0,547.0>> [code: found-colinear-vectors]


    Result: [1;30;103mWARN[0m

 >> [1;35;107mcom.google.fonts/check/outline_jaggy_segments[0m
    [0;36;107mDo outlines contain any jaggy segments?[0m
    with NotoSansBrahmi-Regular.ttf

    [1;35;107m  Rationale:                                                                [0m
    [0;30;107m  This test heuristically detects outline segments which form a             [0m
    [0;30;107m  particularly small angle, indicative of an outline error. This may cause  [0m
    [0;30;107m  false positives in cases such as extreme ink traps, so should be regarded [0m
    [0;30;107m  as advisory and backed up by manual inspection.                           [0m

    * [1;30;103mWARN[0m: The following glyphs have jaggy segments:
	* brm_SHA: L<<289.0,0.0>--<289.0,537.0>>/L<<289.0,537.0>--<269.0,451.0>> = 13.091893064346833
	* brm_SHA: L<<391.0,445.0>--<367.0,547.0>>/L<<367.0,547.0>--<367.0,0.0>> = 13.24051991518721
	* u11003_11014: B<<152.5,161.5>-<183.0,182.0>-<230.0,190.0>>/L<<230.0,190.0>--<47.0,190.0>> = 9.65989307844234 and u11003_11014: L<<541.0,190.0>--<357.0,190.0>>/B<<357.0,190.0>-<417.0,179.0>-<450.0,147.5>> = 10.388857815469619 [code: found-jaggy-segments]


    Result: [1;30;103mWARN[0m


Total:

    [1;97;101mERROR[0m: 0
    [1;91;107mFAIL[0m: 2
    [1;30;103mWARN[0m: 5
    [0;36;107mINFO[0m: 2
    [0;34;107mSKIP[0m: 17
    [0;32;107mPASS[0m: 51


DONE!

    [1;30;107mMeaning of check results:[0m

    An [1;97;101mERROR[0m is something wrong with FontBakery itself, possibly a bug.
    A [1;91;107mFAIL[0m is a problem with the font that must be fixed.
    A [1;30;103mWARN[0m is something that you should consider addressing.
    An [0;36;107mINFO[0m result simply prints something useful. Typically stats.
    A [0;32;107mPASS[0m means the font looks good for the given checking routine.
    And a [0;34;107mSKIP[0m happens when the check does not apply to the given font.

    If you get [1;97;101mERROR[0ms, please help us improve the tool by reporting them at
    [1;36;107mhttps://github.com/googlefonts/fontbakery/issues[0m

    (but other kinds of bug reports and/or
     feature requests are also always welcome, of course!)

