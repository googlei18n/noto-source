Start ... running 77 individual check executions.
 >> [1;35;107mcom.google.fonts/check/whitespace_glyphnames[0m
    [0;36;107mFont has **proper** whitespace glyph names?[0m
    with NotoSansJavanese-Bold.ttf

    [1;35;107m  Rationale:                                                                [0m
    [0;30;107m  This check enforces adherence to recommended whitespace (codepoints 0020  [0m
    [0;30;107m  and 00A0) glyph names according to the Adobe Glyph List.                  [0m

    * [1;30;103mWARN[0m: Glyph 0x00A0 is called "nbspace": Change to "uni00A0" [code: not-recommended-00a0]


    Result: [1;30;103mWARN[0m

 >> [1;35;107mcom.google.fonts/check/required_tables[0m
    [0;36;107mFont contains all required tables?[0m
    with NotoSansJavanese-Bold.ttf

    [1;35;107m  Rationale:                                                                [0m
    [0;30;107m  Depending on the typeface and coverage of a font, certain tables are      [0m
    [0;30;107m  recommended for optimum quality. For example, the performance of a        [0m
    [0;30;107m  non-linear font is improved if the VDMX, LTSH, and hdmx tables are        [0m
    [0;30;107m  present. Non-monospaced Latin fonts should have a kern table. A gasp      [0m
    [0;30;107m  table is necessary if a designer wants to influence the sizes at which    [0m
    [0;30;107m  grayscaling is used under Windows. A DSIG table containing a digital      [0m
    [0;30;107m  signature helps ensure the integrity of the font file. Etc.               [0m

    * [0;36;107mINFO[0m: This font contains the following optional tables [loca, GPOS, GSUB]


    Result: [0;36;107mINFO[0m

 >> [1;35;107mcom.google.fonts/check/superfamily/list[0m
    [0;36;107mList all superfamily filepaths[0m
    with NotoSansJavanese-Bold.ttf

    [1;35;107m  Rationale:                                                                [0m
    [0;30;107m  This is a merely informative check that lists all sibling families        [0m
    [0;30;107m  detected by fontbakery.                                                   [0m
    [0;30;107m                                                                            [0m
    [0;30;107m  Only the fontfiles in these directories will be considered in             [0m
    [0;30;107m  superfamily-level checks.                                                 [0m

    * [0;36;107mINFO[0m: . [code: family-path]


    Result: [0;36;107mINFO[0m

 >> [1;35;107mcom.google.fonts/check/monospace[0m
    [0;36;107mChecking correctness of monospaced metadata.[0m
    with NotoSansJavanese-Bold.ttf

    [1;35;107m  Rationale:                                                                [0m
    [0;30;107m  There are various metadata in the OpenType spec to specify if a font is   [0m
    [0;30;107m  monospaced or not. If the font is not truly monospaced, then no           [0m
    [0;30;107m  monospaced metadata should be set (as sometimes they mistakenly are...)   [0m
    [0;30;107m                                                                            [0m
    [0;30;107m  Requirements for monospace fonts:                                         [0m
    [0;30;107m                                                                            [0m
    [0;30;107m  * post.isFixedPitch - "Set to 0 if the font is proportionally spaced,     [0m
    [0;30;107m  non-zero if the font is not proportionally spaced (monospaced)"           [0m
    [0;30;107m    www.microsoft.com/typography/otspec/post.htm                            [0m
    [0;30;107m                                                                            [0m
    [0;30;107m  * hhea.advanceWidthMax must be correct, meaning no glyph's width value is [0m
    [0;30;107m  greater.                                                                  [0m
    [0;30;107m    www.microsoft.com/typography/otspec/hhea.htm                            [0m
    [0;30;107m                                                                            [0m
    [0;30;107m  * OS/2.panose.bProportion must be set to 9 (monospace). Spec says: "The   [0m
    [0;30;107m  PANOSE definition contains ten digits each of which currently describes   [0m
    [0;30;107m  up to sixteen variations. Windows uses bFamilyType, bSerifStyle and       [0m
    [0;30;107m  bProportion in the font mapper to determine family type. It also uses     [0m
    [0;30;107m  bProportion to determine if the font is monospaced."                      [0m
    [0;30;107m    www.microsoft.com/typography/otspec/os2.htm#pan                         [0m
    [0;30;107m    monotypecom-test.monotype.de/services/pan2                              [0m
    [0;30;107m                                                                            [0m
    [0;30;107m  * OS/2.xAvgCharWidth must be set accurately.                              [0m
    [0;30;107m    "OS/2.xAvgCharWidth is used when rendering monospaced fonts, at least   [0m
    [0;30;107m  by Windows GDI"                                                           [0m
    [0;30;107m    http://typedrawers.com/discussion/comment/15397/#Comment_15397          [0m
    [0;30;107m                                                                            [0m
    [0;30;107m  Also we should report an error for glyphs not of average width.           [0m
    [0;30;107m                                                                            [0m
    [0;30;107m  Please also note:                                                         [0m
    [0;30;107m  Thomas Phinney told us that a few years ago (as of December 2019), if you [0m
    [0;30;107m  gave a font a monospace flag in Panose, Microsoft Word would ignore the   [0m
    [0;30;107m  actual advance widths and treat it as monospaced. Source:                 [0m
    [0;30;107m  https://typedrawers.com/discussion/comment/45140/#Comment_45140           [0m

    * [1;91;107mFAIL[0m: On monospaced fonts, the value of post.isFixedPitch must be set to a non-zero value (meaning 'fixed width monospaced'), but got 0 instead. [code: mono-bad-post-isFixedPitch]
    * [1;91;107mFAIL[0m: On monospaced fonts, the value of OS/2.panose.bProportion must be set to 9 (proportion: monospaced), but got 2 instead. [code: mono-bad-panose-proportion]
    * [1;30;103mWARN[0m: Font is monospaced but 246 glyphs (60.74%) have a different width. You should check the widths of: ['CR', 'space', 'nbspace', 'uni25CC', 'wignyan', 'akara', 'ikawi', 'ikara', 'iikara', 'ukara', 'pacerek', 'ngalelet', 'ngaleletras', 'ekara', 'aikara', 'okara', 'ka', 'qa', 'kha', 'ga', 'gha', 'nga', 'ca', 'cha', 'ja', 'jnya', 'jha', 'jha.alt', 'jha.alt1', 'nya', 'tta', 'ttha', 'dda', 'ddha', 'nna', 'ta', 'tha', 'da', 'dha', 'na', 'pa', 'pha', 'ba', 'bha', 'ma', 'ya', 'ra', 'raagung', 'la', 'wa', 'sha', 'ssa', 'sa', 'ha', 'tarung', 'tolong', 'taling', 'dirgam', 'pengkal', 'pengkal.alt_u.ns', 'pengkal.alt_uu.ns', 'pengkal.pas', 'pengkal.pas.alt_u.ns', 'pengkal.pas.alt_uu.ns', 'pengkal.alt1', 'pengkal.alt1_u.ns', 'pengkal.alt1_uu.ns', 'cakra', 'cakra.pas', 'cakra.pas.alt', 'pangkon', 'uniA9C1', 'uniA9C2', 'uniA9C3', 'uniA9C4', 'uniA9C5', 'uniA9C6', 'uniA9C7', 'uniA9C8', 'uniA9C9', 'uniA9CA', 'uniA9CB', 'uniA9CC', 'uniA9CD', 'uniA9CF', 'zeroJV', 'oneJV', 'twoJV', 'threeJV', 'fourJV', 'fiveJV', 'sixJV', 'sevenJV', 'eightJV', 'nineJV', 'uniA9DE', 'uniA9DF', 'ja_keret', 'jnya_keret', 'jha_keret', 'pha_keret', 'bha_keret', 'kha_pengkal', 'ja_pengkal', 'jnya_pengkal', 'jha_pengkal', 'pha_pengkal', 'bha_pengkal', 'ja_pengkal_u.ns', 'kha_pengkal_u.ns', 'jnya_pengkal_u.ns', 'jha_pengkal_u.ns', 'pha_pengkal_u.ns', 'bha_pengkal_u.ns', 'ja_pengkal_uu.ns', 'kha_pengkal_uu.ns', 'jnya_pengkal_uu.ns', 'jha_pengkal_uu.ns', 'pha_pengkal_uu.ns', 'bha_pengkal_uu.ns', 'ka_cakra', 'qa_cakra', 'gha_cakra', 'ca_cakra', 'dda_cakra', 'nna_cakra', 'ta_cakra', 'da_cakra', 'dha_cakra', 'pha_cakra', 'ba_cakra', 'bha_cakra', 'la_cakra', 'sa_cakra', 'ha_cakra', 'ka.pas_cakra', 'qa.pas_cakra', 'ta.pas_cakra', 'da.pas_cakra', 'pa.pas_cakra', 'la.pas_cakra', 'sa.pas_cakra', 'ha.pas_cakra', 'ka_cakra_u.ns', 'qa_cakra_u.ns', 'ga_cakra_u.ns', 'gha_cakra_u.ns', 'nga_cakra_u.ns', 'ca_cakra_u.ns', 'ja_cakra_u.ns', 'jnya_cakra_u.ns', 'tta_cakra_u.ns', 'ttha_cakra_u.ns', 'dda_cakra_u.ns', 'nna_cakra_u.ns', 'ta_cakra_u.ns', 'tha_cakra_u.ns', 'da_cakra_u.ns', 'dha_cakra_u.ns', 'na_cakra_u.ns', 'pa_cakra_u.ns', 'pha_cakra_u.ns', 'ba_cakra_u.ns', 'bha_cakra_u.ns', 'ma_cakra_u.ns', 'ra_cakra_u.ns', 'la_cakra_u.ns', 'wa_cakra_u.ns', 'sha_cakra_u.ns', 'ssa_cakra_u.ns', 'sa_cakra_u.ns', 'ha_cakra_u.ns', 'pa.pas_cakra_u.ns', 'pha.pas_cakra_u.ns', 'sa.pas_cakra_u.ns', 'ha.pas_cakra_u.ns', 'ja_wa.pas', 'jnya_wa.pas', 'jha_wa.pas', 'pha_wa.pas', 'bha_wa.pas', 'pacerek.pas', 'jha.pas', 'nya.pas', 'pa.pas', 'pha.pas', 'sa.pas', 'ssa.pas', 'ha.pas', 'ca.pas_pengkal', 'ca.pas_pengkal_u.ns', 'ca.pas_pengkal_uu.ns', 'cha.pas_pengkal', 'cha.pas_pengkal_u.ns', 'cha.pas_pengkal_uu.ns', 'ja.pas_pengkal', 'ja.pas_pengkal_u.ns', 'ja.pas_pengkal_uu.ns', 'jnya.pas_pengkal', 'jnya.pas_pengkal_u.ns', 'jnya.pas_pengkal_uu.ns', 'jha.pas.alt', 'jha.pas.alt1', 'jha.pas_pengkal', 'jha.pas_wa.pas', 'nya.pas.alt', 'nya.pas.alt1', 'nya.pas_pengkal', 'nya.pas_wa.pas', 'tta.pas_pengkal', 'tta.pas_pengkal_u.ns', 'tta.pas_pengkal_uu.ns', 'ttha.pas_pengkal', 'ttha.pas_pengkal_u.ns', 'ttha.pas_pengkal_uu.ns', 'dda.pas_pengkal', 'dda.pas_pengkal_u.ns', 'dda.pas_pengkal_uu.ns', 'tha.pas_pengkal', 'tha.pas_pengkal_u.ns', 'tha.pas_pengkal_uu.ns', 'da.pas_pengkal', 'da.pas_pengkal_u.ns', 'da.pas_pengkal_uu.ns', 'na.pas_pengkal', 'na.pas_pengkal_u.ns', 'na.pas_pengkal_uu.ns', 'pha.pas.alt', 'pha.pas_keret.ns', 'pha.pas_pengkal', 'pha.pas_pengkal_u.ns', 'pha.pas_pengkal_uu.ns', 'pha.pas_wa.pas', 'bha.pas_pengkal', 'bha.pas_pengkal_u.ns', 'bha.pas_pengkal_uu.ns', 'ma.pas_pengkal', 'ma.pas_pengkal_u.ns', 'ma.pas_pengkal_uu.ns', 'wa.pas_pengkal', 'wa.pas_pengkal_u.ns', 'wa.pas_pengkal_uu.ns', 'pengkal.pas.alt1', 'pengkal.pas.alt1_u.ns', 'pengkal.pas.alt1_uu.ns', 'om_javanese'] [code: mono-outliers]


    Result: [1;91;107mFAIL[0m

 >> [1;35;107mcom.google.fonts/check/dsig[0m
    [0;36;107mDoes the font have a DSIG table?[0m
    with NotoSansJavanese-Bold.ttf

    [1;35;107m  Rationale:                                                                [0m
    [0;30;107m  Microsoft Office 2013 and below products expect fonts to have a digital   [0m
    [0;30;107m  signature declared in a DSIG table in order to implement OpenType         [0m
    [0;30;107m  features. The EOL date for Microsoft Office 2013 products is 4/11/2023.   [0m
    [0;30;107m  This issue does not impact Microsoft Office 2016 and above products.      [0m
    [0;30;107m                                                                            [0m
    [0;30;107m  This checks verifies that this signature is available in the font.        [0m
    [0;30;107m                                                                            [0m
    [0;30;107m  A fake signature is enough to address this issue. If needed, a dummy      [0m
    [0;30;107m  table can be added to the font with the `gftools fix-dsig` script         [0m
    [0;30;107m  available at https://github.com/googlefonts/gftools                       [0m
    [0;30;107m                                                                            [0m
    [0;30;107m  Reference: https://github.com/googlefonts/fontbakery/issues/1845          [0m

    * [1;91;107mFAIL[0m: This font lacks a digital signature (DSIG table). Some applications may require one (even if only a dummy placeholder) in order to work properly. You can add a DSIG table by running the `gftools fix-dsig` script. [code: lacks-signature]


    Result: [1;91;107mFAIL[0m

 >> [1;35;107mcom.google.fonts/check/gdef_mark_chars[0m
    [0;36;107mCheck mark characters are in GDEF mark glyph class[0m
    with NotoSansJavanese-Bold.ttf

    [1;35;107m  Rationale:                                                                [0m
    [0;30;107m  Mark characters should be in the GDEF mark glyph class.                   [0m

    * [1;30;103mWARN[0m: The following mark characters could be in the GDEF mark glyph class:
	 U+A983, U+A9B4, U+A9B5, U+A9BA, U+A9BB, U+A9BE, U+A9BF and U+A9C0 [code: mark-chars]


    Result: [1;30;103mWARN[0m

 >> [1;35;107mcom.google.fonts/check/outline_alignment_miss[0m
    [0;36;107mAre there any misaligned on-curve points?[0m
    with NotoSansJavanese-Bold.ttf

    [1;35;107m  Rationale:                                                                [0m
    [0;30;107m  This test heuristically looks for on-curve points which are close to, but [0m
    [0;30;107m  do not sit on, significant boundary coordinates. For example, a point     [0m
    [0;30;107m  which has a Y-coordinate of 1 or -1 might be a misplaced baseline point.  [0m
    [0;30;107m  As well as the baseline, the test also checks for points near the         [0m
    [0;30;107m  x-height (but only for lower case Latin letters), cap-height, ascender    [0m
    [0;30;107m  and descender Y coordinates.                                              [0m
    [0;30;107m                                                                            [0m
    [0;30;107m  Not all such misaligned curve points are a mistake, and sometimes the     [0m
    [0;30;107m  design may call for points in locations near the boundaries. As this test [0m
    [0;30;107m  is liable to generate significant numbers of false positives, the test    [0m
    [0;30;107m  will pass if there are more than 100 reported misalignments.              [0m

    * [1;30;103mWARN[0m: The following glyphs have on-curve points which have potentially incorrect y coordinates:
	* panyangga.ns: X=-490.0,Y=749.0 (should be at cap-height 750?)
	* pacerek: X=515.0,Y=2.0 (should be at baseline 0?)
	* ekara: X=689.0,Y=1.5 (should be at baseline 0?)
	* aikara: X=689.0,Y=1.5 (should be at baseline 0?)
	* qa: X=771.0,Y=1.0 (should be at baseline 0?)
	* kha: X=1167.0,Y=-2.0 (should be at baseline 0?)
	* kha: X=1167.0,Y=-2.0 (should be at baseline 0?)
	* ca: X=854.0,Y=-1.0 (should be at baseline 0?)
	* jha: X=1060.0,Y=750.5 (should be at cap-height 750?)
	* jha.alt: X=1060.0,Y=750.5 (should be at cap-height 750?) and 84 more. [code: found-misalignments]


    Result: [1;30;103mWARN[0m

 >> [1;35;107mcom.google.fonts/check/outline_jaggy_segments[0m
    [0;36;107mDo outlines contain any jaggy segments?[0m
    with NotoSansJavanese-Bold.ttf

    [1;35;107m  Rationale:                                                                [0m
    [0;30;107m  This test heuristically detects outline segments which form a             [0m
    [0;30;107m  particularly small angle, indicative of an outline error. This may cause  [0m
    [0;30;107m  false positives in cases such as extreme ink traps, so should be regarded [0m
    [0;30;107m  as advisory and backed up by manual inspection.                           [0m

    * [1;30;103mWARN[0m: The following glyphs have jaggy segments:
	* jnya_cakra_u.ns: B<<955.0,-210.0>-<985.0,-202.0>-<1018.0,-195.0>>/L<<1018.0,-195.0>--<801.0,-195.0>> = 11.976132444203333 [code: found-jaggy-segments]


    Result: [1;30;103mWARN[0m


Total:

    [1;97;101mERROR[0m: 0
    [1;91;107mFAIL[0m: 2
    [1;30;103mWARN[0m: 4
    [0;36;107mINFO[0m: 2
    [0;34;107mSKIP[0m: 17
    [0;32;107mPASS[0m: 52


DONE!

    [1;30;107mMeaning of check results:[0m

    An [1;97;101mERROR[0m is something wrong with FontBakery itself, possibly a bug.
    A [1;91;107mFAIL[0m is a problem with the font that must be fixed.
    A [1;30;103mWARN[0m is something that you should consider addressing.
    An [0;36;107mINFO[0m result simply prints something useful. Typically stats.
    A [0;32;107mPASS[0m means the font looks good for the given checking routine.
    And a [0;34;107mSKIP[0m happens when the check does not apply to the given font.

    If you get [1;97;101mERROR[0ms, please help us improve the tool by reporting them at
    [1;36;107mhttps://github.com/googlefonts/fontbakery/issues[0m

    (but other kinds of bug reports and/or
     feature requests are also always welcome, of course!)

