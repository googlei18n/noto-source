Start ... running 77 individual check executions.
 >> [1;35;107mcom.google.fonts/check/unicode_range_bits[0m
    [0;36;107mEnsure UnicodeRange bits are properly set.[0m
    with Cousine-Regular.ttf

    [1;35;107m  Rationale:                                                                [0m
    [0;30;107m  When the UnicodeRange bits on the OS/2 table are not properly set, some   [0m
    [0;30;107m  programs running on Windows may not recognize the font and use a system   [0m
    [0;30;107m  fallback font instead. For that reason, this check calculates the proper  [0m
    [0;30;107m  settings by inspecting the glyphs declared on the cmap table and then     [0m
    [0;30;107m  ensures that their corresponding ranges are enabled.                      [0m

    * [1;30;103mWARN[0m: UnicodeRange bit 67 "Arabic Presentation Forms-B" should be 1 because cmap has 1 of the 144 codepoints in this range. [code: bad-range-bit]


    Result: [1;30;103mWARN[0m

 >> [1;35;107mcom.google.fonts/check/family/win_ascent_and_descent[0m
    [0;36;107mChecking OS/2 usWinAscent & usWinDescent.[0m
    with Cousine-Regular.ttf

    [1;35;107m  Rationale:                                                                [0m
    [0;30;107m  A font's winAscent and winDescent values should be greater than the head  [0m
    [0;30;107m  table's yMax, abs(yMin) values. If they are less than these values,       [0m
    [0;30;107m  clipping can occur on Windows platforms                                   [0m
    [0;30;107m  (https://github.com/RedHatBrand/Overpass/issues/33).                      [0m
    [0;30;107m                                                                            [0m
    [0;30;107m  If the font includes tall/deep writing systems such as Arabic or          [0m
    [0;30;107m  Devanagari, the winAscent and winDescent can be greater than the yMax and [0m
    [0;30;107m  abs(yMin) to accommodate vowel marks.                                     [0m
    [0;30;107m                                                                            [0m
    [0;30;107m  When the win Metrics are significantly greater than the upm, the          [0m
    [0;30;107m  linespacing can appear too loose. To counteract this, enabling the OS/2   [0m
    [0;30;107m  fsSelection bit 7 (Use_Typo_Metrics), will force Windows to use the OS/2  [0m
    [0;30;107m  typo values instead. This means the font developer can control the        [0m
    [0;30;107m  linespacing with the typo values, whilst avoiding clipping by setting the [0m
    [0;30;107m  win values to values greater than the yMax and abs(yMin).                 [0m

    * [1;91;107mFAIL[0m: OS/2.usWinAscent value should be equal or greater than 2009, but got 1705 instead [code: ascent]


    Result: [1;91;107mFAIL[0m

 >> [1;35;107mcom.google.fonts/check/os2_metrics_match_hhea[0m
    [0;36;107mChecking OS/2 Metrics match hhea Metrics.[0m
    with Cousine-Regular.ttf

    [1;35;107m  Rationale:                                                                [0m
    [0;30;107m  When OS/2 and hhea vertical metrics match, the same linespacing results   [0m
    [0;30;107m  on macOS, GNU+Linux and Windows. Unfortunately as of 2018, Google Fonts   [0m
    [0;30;107m  has released many fonts with vertical metrics that don't match in this    [0m
    [0;30;107m  way. When we fix this issue in these existing families, we will create a  [0m
    [0;30;107m  visible change in line/paragraph layout for either Windows or macOS       [0m
    [0;30;107m  users, which will upset some of them.                                     [0m
    [0;30;107m                                                                            [0m
    [0;30;107m  But we have a duty to fix broken stuff, and inconsistent paragraph layout [0m
    [0;30;107m  is unacceptably broken when it is possible to avoid it.                   [0m
    [0;30;107m                                                                            [0m
    [0;30;107m  If users complain and prefer the old broken version, they have the        [0m
    [0;30;107m  freedom to take care of their own situation.                              [0m

    * [1;91;107mFAIL[0m: OS/2 sTypoAscender (1255) and hhea ascent (1705) must be equal. [code: ascender]


    Result: [1;91;107mFAIL[0m

 >> [1;35;107mcom.google.fonts/check/required_tables[0m
    [0;36;107mFont contains all required tables?[0m
    with Cousine-Regular.ttf

    [1;35;107m  Rationale:                                                                [0m
    [0;30;107m  Depending on the typeface and coverage of a font, certain tables are      [0m
    [0;30;107m  recommended for optimum quality. For example, the performance of a        [0m
    [0;30;107m  non-linear font is improved if the VDMX, LTSH, and hdmx tables are        [0m
    [0;30;107m  present. Non-monospaced Latin fonts should have a kern table. A gasp      [0m
    [0;30;107m  table is necessary if a designer wants to influence the sizes at which    [0m
    [0;30;107m  grayscaling is used under Windows. A DSIG table containing a digital      [0m
    [0;30;107m  signature helps ensure the integrity of the font file. Etc.               [0m

    * [0;36;107mINFO[0m: This font contains the following optional tables [loca, GPOS, GSUB]


    Result: [0;36;107mINFO[0m

 >> [1;35;107mcom.google.fonts/check/superfamily/list[0m
    [0;36;107mList all superfamily filepaths[0m
    with Cousine-Regular.ttf

    [1;35;107m  Rationale:                                                                [0m
    [0;30;107m  This is a merely informative check that lists all sibling families        [0m
    [0;30;107m  detected by fontbakery.                                                   [0m
    [0;30;107m                                                                            [0m
    [0;30;107m  Only the fontfiles in these directories will be considered in             [0m
    [0;30;107m  superfamily-level checks.                                                 [0m

    * [0;36;107mINFO[0m: . [code: family-path]


    Result: [0;36;107mINFO[0m

 >> [1;35;107mcom.google.fonts/check/monospace[0m
    [0;36;107mChecking correctness of monospaced metadata.[0m
    with Cousine-Regular.ttf

    [1;35;107m  Rationale:                                                                [0m
    [0;30;107m  There are various metadata in the OpenType spec to specify if a font is   [0m
    [0;30;107m  monospaced or not. If the font is not truly monospaced, then no           [0m
    [0;30;107m  monospaced metadata should be set (as sometimes they mistakenly are...)   [0m
    [0;30;107m                                                                            [0m
    [0;30;107m  Requirements for monospace fonts:                                         [0m
    [0;30;107m                                                                            [0m
    [0;30;107m  * post.isFixedPitch - "Set to 0 if the font is proportionally spaced,     [0m
    [0;30;107m  non-zero if the font is not proportionally spaced (monospaced)"           [0m
    [0;30;107m    www.microsoft.com/typography/otspec/post.htm                            [0m
    [0;30;107m                                                                            [0m
    [0;30;107m  * hhea.advanceWidthMax must be correct, meaning no glyph's width value is [0m
    [0;30;107m  greater.                                                                  [0m
    [0;30;107m    www.microsoft.com/typography/otspec/hhea.htm                            [0m
    [0;30;107m                                                                            [0m
    [0;30;107m  * OS/2.panose.bProportion must be set to 9 (monospace). Spec says: "The   [0m
    [0;30;107m  PANOSE definition contains ten digits each of which currently describes   [0m
    [0;30;107m  up to sixteen variations. Windows uses bFamilyType, bSerifStyle and       [0m
    [0;30;107m  bProportion in the font mapper to determine family type. It also uses     [0m
    [0;30;107m  bProportion to determine if the font is monospaced."                      [0m
    [0;30;107m    www.microsoft.com/typography/otspec/os2.htm#pan                         [0m
    [0;30;107m    monotypecom-test.monotype.de/services/pan2                              [0m
    [0;30;107m                                                                            [0m
    [0;30;107m  * OS/2.xAvgCharWidth must be set accurately.                              [0m
    [0;30;107m    "OS/2.xAvgCharWidth is used when rendering monospaced fonts, at least   [0m
    [0;30;107m  by Windows GDI"                                                           [0m
    [0;30;107m    http://typedrawers.com/discussion/comment/15397/#Comment_15397          [0m
    [0;30;107m                                                                            [0m
    [0;30;107m  Also we should report an error for glyphs not of average width.           [0m
    [0;30;107m                                                                            [0m
    [0;30;107m  Please also note:                                                         [0m
    [0;30;107m  Thomas Phinney told us that a few years ago (as of December 2019), if you [0m
    [0;30;107m  gave a font a monospace flag in Panose, Microsoft Word would ignore the   [0m
    [0;30;107m  actual advance widths and treat it as monospaced. Source:                 [0m
    [0;30;107m  https://typedrawers.com/discussion/comment/45140/#Comment_45140           [0m

    * [1;91;107mFAIL[0m: On monospaced fonts, the value of OS/2.panose.bProportion must be set to 9 (proportion: monospaced), but got 0 instead. [code: mono-bad-panose-proportion]


    Result: [1;91;107mFAIL[0m

 >> [1;35;107mcom.google.fonts/check/dsig[0m
    [0;36;107mDoes the font have a DSIG table?[0m
    with Cousine-Regular.ttf

    [1;35;107m  Rationale:                                                                [0m
    [0;30;107m  Microsoft Office 2013 and below products expect fonts to have a digital   [0m
    [0;30;107m  signature declared in a DSIG table in order to implement OpenType         [0m
    [0;30;107m  features. The EOL date for Microsoft Office 2013 products is 4/11/2023.   [0m
    [0;30;107m  This issue does not impact Microsoft Office 2016 and above products.      [0m
    [0;30;107m                                                                            [0m
    [0;30;107m  This checks verifies that this signature is available in the font.        [0m
    [0;30;107m                                                                            [0m
    [0;30;107m  A fake signature is enough to address this issue. If needed, a dummy      [0m
    [0;30;107m  table can be added to the font with the `gftools fix-dsig` script         [0m
    [0;30;107m  available at https://github.com/googlefonts/gftools                       [0m
    [0;30;107m                                                                            [0m
    [0;30;107m  Reference: https://github.com/googlefonts/fontbakery/issues/1845          [0m

    * [1;91;107mFAIL[0m: This font lacks a digital signature (DSIG table). Some applications may require one (even if only a dummy placeholder) in order to work properly. You can add a DSIG table by running the `gftools fix-dsig` script. [code: lacks-signature]


    Result: [1;91;107mFAIL[0m

 >> [1;35;107mcom.google.fonts/check/gdef_spacing_marks[0m
    [0;36;107mCheck mark characters are in GDEF mark glyph class)[0m
    with Cousine-Regular.ttf

    [1;35;107m  Rationale:                                                                [0m
    [0;30;107m  Glyphs in the GDEF mark glyph class should be non-spacing.                [0m
    [0;30;107m  Spacing glyphs in the GDEF mark glyph class may have incorrect anchor     [0m
    [0;30;107m  positioning that was only intended for building composite glyphs during   [0m
    [0;30;107m  design.                                                                   [0m

    * [1;30;103mWARN[0m: The following spacing glyphs may be in the GDEF mark glyph class by mistake:
	 sofpasuq [code: spacing-mark-glyphs]


    Result: [1;30;103mWARN[0m

 >> [1;35;107mcom.google.fonts/check/gdef_mark_chars[0m
    [0;36;107mCheck mark characters are in GDEF mark glyph class[0m
    with Cousine-Regular.ttf

    [1;35;107m  Rationale:                                                                [0m
    [0;30;107m  Mark characters should be in the GDEF mark glyph class.                   [0m

    * [1;30;103mWARN[0m: The following mark characters could be in the GDEF mark glyph class:
	 U+0300, U+0301, U+0302, U+0303, U+0304, U+0305, U+0306, U+0307, U+0308, U+0309, U+030A, U+030B, U+030C, U+030D, U+030E, U+030F, U+0310, U+0311, U+0312, U+0313, U+0314, U+0315, U+0316, U+0317, U+0318, U+0319, U+031A, U+031B, U+031C, U+031D, U+031E, U+031F, U+0320, U+0321, U+0322, U+0323, U+0324, U+0325, U+0326, U+0327, U+0328, U+0329, U+032A, U+032B, U+032C, U+032D, U+032E, U+032F, U+0330, U+0331, U+0332, U+0333, U+0334, U+0335, U+0336, U+0337, U+0338, U+0339, U+033A, U+033B, U+033C, U+033D, U+033E, U+033F, U+0340, U+0341, U+0342, U+0343, U+0344, U+0345, U+0346, U+0347, U+0348, U+0349, U+034A, U+034B, U+034C, U+034D, U+034E, U+034F, U+0350, U+0351, U+0352, U+0353, U+0354, U+0355, U+0356, U+0357, U+0358, U+0359, U+035A, U+035B, U+035C, U+035D, U+035E, U+035F, U+0360, U+0361, U+0362, U+0363, U+0364, U+0365, U+0366, U+0367, U+0368, U+0369, U+036A, U+036B, U+036C, U+036D, U+036E, U+036F, U+0483, U+0484, U+0485, U+0486, U+0487, U+0488, U+0489, U+1DC0, U+1DC1, U+1DC2, U+1DC3, U+1DC4, U+1DC5, U+1DC6, U+1DC7, U+1DC8, U+1DC9, U+1DCA, U+1DFE, U+1DFF, U+20F0, U+FE20, U+FE21, U+FE22 and U+FE23 [code: mark-chars]


    Result: [1;30;103mWARN[0m

 >> [1;35;107mcom.google.fonts/check/gdef_non_mark_chars[0m
    [0;36;107mCheck GDEF mark glyph class doesn't have characters that are not marks)[0m
    with Cousine-Regular.ttf

    [1;35;107m  Rationale:                                                                [0m
    [0;30;107m  Glyphs in the GDEF mark glyph class become non-spacing and may be         [0m
    [0;30;107m  repositioned if they have mark anchors.                                   [0m
    [0;30;107m  Only combining mark glyphs should be in that class. Any non-mark glyph    [0m
    [0;30;107m  must not be in that class, in particular spacing glyphs.                  [0m

    * [1;30;103mWARN[0m: The following non-mark characters should not be in the GDEF mark glyph class:
	 U+05C3 [code: non-mark-chars]


    Result: [1;30;103mWARN[0m

 >> [1;35;107mcom.google.fonts/check/outline_jaggy_segments[0m
    [0;36;107mDo outlines contain any jaggy segments?[0m
    with Cousine-Regular.ttf

    [1;35;107m  Rationale:                                                                [0m
    [0;30;107m  This test heuristically detects outline segments which form a             [0m
    [0;30;107m  particularly small angle, indicative of an outline error. This may cause  [0m
    [0;30;107m  false positives in cases such as extreme ink traps, so should be regarded [0m
    [0;30;107m  as advisory and backed up by manual inspection.                           [0m

    * [1;30;103mWARN[0m: The following glyphs have jaggy segments:
	* uni025A: B<<993.0,431.0>-<939.0,505.0>-<924.0,627.0>>/B<<924.0,627.0>-<928.0,587.0>-<928.0,534.0>> = 1.2987911191213766
	* uni028D: B<<388.0,720.0>-<356.0,825.0>-<333.0,933.0>>/B<<333.0,933.0>-<333.0,903.0>-<329.0,858.0>> = 12.022276686183494
	* uni028D: B<<937.0,607.0>-<904.0,871.0>-<904.0,933.0>>/B<<904.0,933.0>-<865.0,773.0>-<846.0,719.0>> = 13.698717007084463
	* uni03FB: B<<552.0,441.0>-<605.0,272.0>-<620.0,135.0>>/B<<620.0,135.0>-<642.0,294.0>-<688.0,441.0>> = 14.126071336905063
	* uni03FB: L<<977.0,838.0>--<982.0,953.0>>/L<<982.0,953.0>--<697.0,0.0>> = 14.160036821236542
	* uni043C: B<<552.0,441.0>-<605.0,272.0>-<620.0,135.0>>/B<<620.0,135.0>-<642.0,294.0>-<688.0,441.0>> = 14.126071336905063
	* uni043C: B<<974.0,724.0>-<974.0,777.0>-<982.0,953.0>>/L<<982.0,953.0>--<697.0,0.0>> = 14.047027540735872
	* uni043C: L<<544.0,0.0>--<250.0,951.0>>/B<<250.0,951.0>-<256.0,876.0>-<256.0,724.0>> = 12.604981977826933
	* uni04AA: L<<620.0,-19.0>--<621.0,-19.0>>/B<<621.0,-19.0>-<374.0,-6.0>-<243.5,175.5>> = 3.012787504183286
	* uni04CE: B<<552.0,441.0>-<605.0,272.0>-<620.0,135.0>>/B<<620.0,135.0>-<642.0,294.0>-<688.0,441.0>> = 14.126071336905063 and 31 more. [code: found-jaggy-segments]


    Result: [1;30;103mWARN[0m

 >> [1;35;107mcom.google.fonts/check/outline_semi_vertical[0m
    [0;36;107mDo outlines contain any semi-vertical or semi-horizontal lines?[0m
    with Cousine-Regular.ttf

    [1;35;107m  Rationale:                                                                [0m
    [0;30;107m  This test detects line segments which are nearly, but not quite, exactly  [0m
    [0;30;107m  horizontal or vertical. Sometimes such lines are created by design, but   [0m
    [0;30;107m  often they are indicative of a design error.                              [0m
    [0;30;107m                                                                            [0m
    [0;30;107m  This test is disabled for italic styles, which often contain              [0m
    [0;30;107m  nearly-upright lines.                                                     [0m

    * [1;30;103mWARN[0m: The following glyphs have semi-vertical/semi-horizontal lines:
	* ij: L<<236.0,0.0>--<237.0,1082.0>>
	* revlogicalnot: L<<115.0,180.0>--<116.0,754.0>>
	* uni01A3: L<<635.0,135.0>--<634.0,949.0>>
	* uni01F7: L<<346.0,1349.0>--<347.0,1185.0>>
	* uni01F7: L<<354.0,849.0>--<353.0,2.0>>
	* uni02AF: L<<1063.0,1082.0>--<1064.0,-20.0>>
	* uni03DC: L<<1061.0,699.0>--<1060.0,332.0>>
	* uni1D6B: L<<628.0,1082.0>--<627.0,963.0>> and uni1E9E: L<<611.0,653.0>--<612.0,806.0>> [code: found-semi-vertical]


    Result: [1;30;103mWARN[0m


Total:

    [1;97;101mERROR[0m: 0
    [1;91;107mFAIL[0m: 4
    [1;30;103mWARN[0m: 6
    [0;36;107mINFO[0m: 2
    [0;34;107mSKIP[0m: 17
    [0;32;107mPASS[0m: 48


DONE!

    [1;30;107mMeaning of check results:[0m

    An [1;97;101mERROR[0m is something wrong with FontBakery itself, possibly a bug.
    A [1;91;107mFAIL[0m is a problem with the font that must be fixed.
    A [1;30;103mWARN[0m is something that you should consider addressing.
    An [0;36;107mINFO[0m result simply prints something useful. Typically stats.
    A [0;32;107mPASS[0m means the font looks good for the given checking routine.
    And a [0;34;107mSKIP[0m happens when the check does not apply to the given font.

    If you get [1;97;101mERROR[0ms, please help us improve the tool by reporting them at
    [1;36;107mhttps://github.com/googlefonts/fontbakery/issues[0m

    (but other kinds of bug reports and/or
     feature requests are also always welcome, of course!)

