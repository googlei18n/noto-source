Start ... running 77 individual check executions.
 >> [1;35;107mcom.google.fonts/check/unicode_range_bits[0m
    [0;36;107mEnsure UnicodeRange bits are properly set.[0m
    with NotoSansTirhuta-Regular-VF.ttf

    [1;35;107m  Rationale:                                                                [0m
    [0;30;107m  When the UnicodeRange bits on the OS/2 table are not properly set, some   [0m
    [0;30;107m  programs running on Windows may not recognize the font and use a system   [0m
    [0;30;107m  fallback font instead. For that reason, this check calculates the proper  [0m
    [0;30;107m  settings by inspecting the glyphs declared on the cmap table and then     [0m
    [0;30;107m  ensures that their corresponding ranges are enabled.                      [0m

    * [1;30;103mWARN[0m: UnicodeRange bit 57 "Non-Plane 0 *" should be 0 because cmap has none of the 2048 codepoints in this range. [code: bad-range-bit]


    Result: [1;30;103mWARN[0m

 >> [1;35;107mcom.google.fonts/check/required_tables[0m
    [0;36;107mFont contains all required tables?[0m
    with NotoSansTirhuta-Regular-VF.ttf

    [1;35;107m  Rationale:                                                                [0m
    [0;30;107m  Depending on the typeface and coverage of a font, certain tables are      [0m
    [0;30;107m  recommended for optimum quality. For example, the performance of a        [0m
    [0;30;107m  non-linear font is improved if the VDMX, LTSH, and hdmx tables are        [0m
    [0;30;107m  present. Non-monospaced Latin fonts should have a kern table. A gasp      [0m
    [0;30;107m  table is necessary if a designer wants to influence the sizes at which    [0m
    [0;30;107m  grayscaling is used under Windows. A DSIG table containing a digital      [0m
    [0;30;107m  signature helps ensure the integrity of the font file. Etc.               [0m

    * [0;36;107mINFO[0m: This font contains the following optional tables [loca, GPOS, GSUB]


    Result: [0;36;107mINFO[0m

 >> [1;35;107mcom.google.fonts/check/superfamily/list[0m
    [0;36;107mList all superfamily filepaths[0m
    with NotoSansTirhuta-Regular-VF.ttf

    [1;35;107m  Rationale:                                                                [0m
    [0;30;107m  This is a merely informative check that lists all sibling families        [0m
    [0;30;107m  detected by fontbakery.                                                   [0m
    [0;30;107m                                                                            [0m
    [0;30;107m  Only the fontfiles in these directories will be considered in             [0m
    [0;30;107m  superfamily-level checks.                                                 [0m

    * [0;36;107mINFO[0m: . [code: family-path]


    Result: [0;36;107mINFO[0m

 >> [1;35;107mcom.google.fonts/check/monospace[0m
    [0;36;107mChecking correctness of monospaced metadata.[0m
    with NotoSansTirhuta-Regular-VF.ttf

    [1;35;107m  Rationale:                                                                [0m
    [0;30;107m  There are various metadata in the OpenType spec to specify if a font is   [0m
    [0;30;107m  monospaced or not. If the font is not truly monospaced, then no           [0m
    [0;30;107m  monospaced metadata should be set (as sometimes they mistakenly are...)   [0m
    [0;30;107m                                                                            [0m
    [0;30;107m  Requirements for monospace fonts:                                         [0m
    [0;30;107m                                                                            [0m
    [0;30;107m  * post.isFixedPitch - "Set to 0 if the font is proportionally spaced,     [0m
    [0;30;107m  non-zero if the font is not proportionally spaced (monospaced)"           [0m
    [0;30;107m    www.microsoft.com/typography/otspec/post.htm                            [0m
    [0;30;107m                                                                            [0m
    [0;30;107m  * hhea.advanceWidthMax must be correct, meaning no glyph's width value is [0m
    [0;30;107m  greater.                                                                  [0m
    [0;30;107m    www.microsoft.com/typography/otspec/hhea.htm                            [0m
    [0;30;107m                                                                            [0m
    [0;30;107m  * OS/2.panose.bProportion must be set to 9 (monospace). Spec says: "The   [0m
    [0;30;107m  PANOSE definition contains ten digits each of which currently describes   [0m
    [0;30;107m  up to sixteen variations. Windows uses bFamilyType, bSerifStyle and       [0m
    [0;30;107m  bProportion in the font mapper to determine family type. It also uses     [0m
    [0;30;107m  bProportion to determine if the font is monospaced."                      [0m
    [0;30;107m    www.microsoft.com/typography/otspec/os2.htm#pan                         [0m
    [0;30;107m    monotypecom-test.monotype.de/services/pan2                              [0m
    [0;30;107m                                                                            [0m
    [0;30;107m  * OS/2.xAvgCharWidth must be set accurately.                              [0m
    [0;30;107m    "OS/2.xAvgCharWidth is used when rendering monospaced fonts, at least   [0m
    [0;30;107m  by Windows GDI"                                                           [0m
    [0;30;107m    http://typedrawers.com/discussion/comment/15397/#Comment_15397          [0m
    [0;30;107m                                                                            [0m
    [0;30;107m  Also we should report an error for glyphs not of average width.           [0m
    [0;30;107m                                                                            [0m
    [0;30;107m  Please also note:                                                         [0m
    [0;30;107m  Thomas Phinney told us that a few years ago (as of December 2019), if you [0m
    [0;30;107m  gave a font a monospace flag in Panose, Microsoft Word would ignore the   [0m
    [0;30;107m  actual advance widths and treat it as monospaced. Source:                 [0m
    [0;30;107m  https://typedrawers.com/discussion/comment/45140/#Comment_45140           [0m

    * [1;91;107mFAIL[0m: On monospaced fonts, the value of post.isFixedPitch must be set to a non-zero value (meaning 'fixed width monospaced'), but got 0 instead. [code: mono-bad-post-isFixedPitch]
    * [1;91;107mFAIL[0m: On monospaced fonts, the value of OS/2.panose.bProportion must be set to 9 (proportion: monospaced), but got 0 instead. [code: mono-bad-panose-proportion]
    * [1;30;103mWARN[0m: Font is monospaced but 219 glyphs (83.59%) have a different width. You should check the widths of: ['CR', 'space', 'uni00A0', 'uni0964', 'uni0965', 'uni25CC', 'anji_tirh', 'a_tirh', 'aa_tirh', 'i_tirh', 'ii_tirh', 'u_tirh', 'uu_tirh', 'rVocalic_tirh', 'rrVocalic_tirh', 'lVocalic_tirh', 'llVocalic_tirh', 'e_tirh', 'ai_tirh', 'o_tirh', 'au_tirh', 'ka_tirh', 'kha_tirh', 'ga_tirh', 'gha_tirh', 'nga_tirh', 'ca_tirh', 'ja_tirh', 'jha_tirh', 'nya_tirh', 'tta_tirh', 'ttha_tirh', 'dda_tirh', 'ddha_tirh', 'nna_tirh', 'ta_tirh', 'tha_tirh', 'da_tirh', 'dha_tirh', 'na_tirh', 'pa_tirh', 'pha_tirh', 'ba_tirh', 'bha_tirh', 'ma_tirh', 'ya_tirh', 'ra_tirh', 'la_tirh', 'va_tirh', 'sha_tirh', 'ssa_tirh', 'sa_tirh', 'ha_tirh', 'aaMatra_tirh', 'iMatra_tirh', 'iiMatra_tirh', 'eMatra_tirh', 'aiMatra_tirh', 'oMatra_tirh', 'shortOMatra_tirh', 'auMatra_tirh', 'visarga_tirh', 'avagraha_tirh', 'gvang_tirh', 'abbreviationSign_tirh', 'om_tirh', 'zero_tirh', 'one_tirh', 'two_tirh', 'three_tirh', 'four_tirh', 'five_tirh', 'six_tirh', 'seven_tirh', 'eight_tirh', 'nine_tirh', 'Gu', 'Ju', 'Nnu', 'Du', 'Nu.tirh', 'Pu', 'Mu.tirh', 'Lu', 'Shu', 'Su', 'Ku', 'Tu', 'Tuu', 'Dhu', 'Bhu', 'Yu', 'Ru', 'Ssu', 'Hu', 'Kuu', 'Dhuu', 'Ruu', 'Huu', 'Kr', 'Tr', 'Bhr', 'Hr', 'KhaNa', 'PhaNa', 'SaNa', 'BaDa', 'MaBa', 'TaYa', 'DaYa', 'NaYa', 'BhaYa', 'ShaYa', 'SaYa', 'HaYa', 'Ya.post', 'RaGa', 'KaLa', 'PhaLa', 'ShaLa', 'Ta.fina', 'Ma.fina', 'TaVirama.alt', 'KaTa', 'KaRa', 'KaSsa', 'GaGa', 'GaDha', 'NgaKa', 'NgaKha', 'NgaGa', 'NgaGha', 'CaCa', 'JaNya', 'NyaCa', 'NyaCha', 'TtaTta', 'TtaTtha', 'NnaTta', 'NnaTtha', 'NnaDda', 'NnaDdha', 'TaTa', 'TaVa', 'DaDha', 'NaDha', 'NaHa', 'ShaCha', 'SsaTta', 'SsaTtha', 'SsaNna', 'HaNna', 'HaNa', 'HaMa', 'HaRa', 'HaLa', 'HaVa', 'TaRa', 'letterVocR.alt', 'letterVocRR.alt', 'Ra.alt1', 'Ra.alt2', 'Ru.alt1', 'Ru.alt2', 'Ruu.alt1', 'Ruu.alt2', 'uniA830', 'uniA831', 'uniA832', 'uniA833', 'uniA834', 'uniA835', 'uniA836', 'uniA837', 'uniA838', 'uniA839', 'uni09F4', 'uni09F5', 'uni09F6', 'uni09F7', 'uni1CF2', 'Ta.init', 'BaDa.part', 'MaBa.part', 'uni114B1.alt', 'uni114B1.alt2', 'uni114B1_tall', 'uni114B1_tall.alt', 'uni114B1_Repha', 'uni114B2.alt', 'uni114B2.alt2', 'uni114B2_tall.alt', 'uni114B2_tall.alt3', 'uni114BD.alt', 'uni114BD.alt2', 'uni114BD_Ba', 'Bhra', 'Bhuu', 'Dbhu', 'Dhru', 'Dra', 'Gna', 'Gra', 'NaNa', 'Nda', 'NnaNna', 'Nta', 'Ntra', 'Ntu', 'Pra', 'ShaCa', 'Shra', 'Sra', 'SsaKa', 'SsaKr', 'Sta', 'Stra', 'Stu', 'Tru'] [code: mono-outliers]


    Result: [1;91;107mFAIL[0m

 >> [1;35;107mcom.google.fonts/check/dsig[0m
    [0;36;107mDoes the font have a DSIG table?[0m
    with NotoSansTirhuta-Regular-VF.ttf

    [1;35;107m  Rationale:                                                                [0m
    [0;30;107m  Microsoft Office 2013 and below products expect fonts to have a digital   [0m
    [0;30;107m  signature declared in a DSIG table in order to implement OpenType         [0m
    [0;30;107m  features. The EOL date for Microsoft Office 2013 products is 4/11/2023.   [0m
    [0;30;107m  This issue does not impact Microsoft Office 2016 and above products.      [0m
    [0;30;107m                                                                            [0m
    [0;30;107m  This checks verifies that this signature is available in the font.        [0m
    [0;30;107m                                                                            [0m
    [0;30;107m  A fake signature is enough to address this issue. If needed, a dummy      [0m
    [0;30;107m  table can be added to the font with the `gftools fix-dsig` script         [0m
    [0;30;107m  available at https://github.com/googlefonts/gftools                       [0m
    [0;30;107m                                                                            [0m
    [0;30;107m  Reference: https://github.com/googlefonts/fontbakery/issues/1845          [0m

    * [1;91;107mFAIL[0m: This font lacks a digital signature (DSIG table). Some applications may require one (even if only a dummy placeholder) in order to work properly. You can add a DSIG table by running the `gftools fix-dsig` script. [code: lacks-signature]


    Result: [1;91;107mFAIL[0m

 >> [1;35;107mcom.google.fonts/check/gdef_mark_chars[0m
    [0;36;107mCheck mark characters are in GDEF mark glyph class[0m
    with NotoSansTirhuta-Regular-VF.ttf

    [1;35;107m  Rationale:                                                                [0m
    [0;30;107m  Mark characters should be in the GDEF mark glyph class.                   [0m

    * [1;30;103mWARN[0m: The following mark characters could be in the GDEF mark glyph class:
	 U+114B0, U+114B1, U+114B2, U+114B9, U+114BB, U+114BC, U+114BD, U+114BE and U+114C1 [code: mark-chars]


    Result: [1;30;103mWARN[0m

 >> [1;35;107mcom.google.fonts/check/outline_alignment_miss[0m
    [0;36;107mAre there any misaligned on-curve points?[0m
    with NotoSansTirhuta-Regular-VF.ttf

    [1;35;107m  Rationale:                                                                [0m
    [0;30;107m  This test heuristically looks for on-curve points which are close to, but [0m
    [0;30;107m  do not sit on, significant boundary coordinates. For example, a point     [0m
    [0;30;107m  which has a Y-coordinate of 1 or -1 might be a misplaced baseline point.  [0m
    [0;30;107m  As well as the baseline, the test also checks for points near the         [0m
    [0;30;107m  x-height (but only for lower case Latin letters), cap-height, ascender    [0m
    [0;30;107m  and descender Y coordinates.                                              [0m
    [0;30;107m                                                                            [0m
    [0;30;107m  Not all such misaligned curve points are a mistake, and sometimes the     [0m
    [0;30;107m  design may call for points in locations near the boundaries. As this test [0m
    [0;30;107m  is liable to generate significant numbers of false positives, the test    [0m
    [0;30;107m  will pass if there are more than 100 reported misalignments.              [0m

    * [1;30;103mWARN[0m: The following glyphs have on-curve points which have potentially incorrect y coordinates:
	* rrVocalic_tirh: X=697.0,Y=1.0 (should be at baseline 0?)
	* nga_tirh: X=152.5,Y=623.5 (should be at cap-height 622?)
	* nga_tirh: X=397.5,Y=623.5 (should be at cap-height 622?)
	* tta_tirh: X=472.5,Y=620.0 (should be at cap-height 622?)
	* dha_tirh: X=293.0,Y=624.0 (should be at cap-height 622?)
	* sha_tirh: X=505.0,Y=623.0 (should be at cap-height 622?)
	* three_tirh: X=377.5,Y=-2.0 (should be at baseline 0?)
	* eight_tirh: X=225.0,Y=624.0 (should be at cap-height 622?)
	* Dhu: X=293.0,Y=624.0 (should be at cap-height 622?)
	* Ssu: X=237.0,Y=623.0 (should be at cap-height 622?) and 25 more. [code: found-misalignments]


    Result: [1;30;103mWARN[0m


Total:

    [1;97;101mERROR[0m: 0
    [1;91;107mFAIL[0m: 2
    [1;30;103mWARN[0m: 3
    [0;36;107mINFO[0m: 2
    [0;34;107mSKIP[0m: 16
    [0;32;107mPASS[0m: 54


DONE!

    [1;30;107mMeaning of check results:[0m

    An [1;97;101mERROR[0m is something wrong with FontBakery itself, possibly a bug.
    A [1;91;107mFAIL[0m is a problem with the font that must be fixed.
    A [1;30;103mWARN[0m is something that you should consider addressing.
    An [0;36;107mINFO[0m result simply prints something useful. Typically stats.
    A [0;32;107mPASS[0m means the font looks good for the given checking routine.
    And a [0;34;107mSKIP[0m happens when the check does not apply to the given font.

    If you get [1;97;101mERROR[0ms, please help us improve the tool by reporting them at
    [1;36;107mhttps://github.com/googlefonts/fontbakery/issues[0m

    (but other kinds of bug reports and/or
     feature requests are also always welcome, of course!)

