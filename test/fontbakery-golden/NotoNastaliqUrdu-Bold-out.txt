Start ... running 77 individual check executions.
 >> [1;35;107mcom.google.fonts/check/family/win_ascent_and_descent[0m
    [0;36;107mChecking OS/2 usWinAscent & usWinDescent.[0m
    with NotoNastaliqUrdu-Bold.ttf

    [1;35;107m  Rationale:                                                                [0m
    [0;30;107m  A font's winAscent and winDescent values should be greater than the head  [0m
    [0;30;107m  table's yMax, abs(yMin) values. If they are less than these values,       [0m
    [0;30;107m  clipping can occur on Windows platforms                                   [0m
    [0;30;107m  (https://github.com/RedHatBrand/Overpass/issues/33).                      [0m
    [0;30;107m                                                                            [0m
    [0;30;107m  If the font includes tall/deep writing systems such as Arabic or          [0m
    [0;30;107m  Devanagari, the winAscent and winDescent can be greater than the yMax and [0m
    [0;30;107m  abs(yMin) to accommodate vowel marks.                                     [0m
    [0;30;107m                                                                            [0m
    [0;30;107m  When the win Metrics are significantly greater than the upm, the          [0m
    [0;30;107m  linespacing can appear too loose. To counteract this, enabling the OS/2   [0m
    [0;30;107m  fsSelection bit 7 (Use_Typo_Metrics), will force Windows to use the OS/2  [0m
    [0;30;107m  typo values instead. This means the font developer can control the        [0m
    [0;30;107m  linespacing with the typo values, whilst avoiding clipping by setting the [0m
    [0;30;107m  win values to values greater than the yMax and abs(yMin).                 [0m

    * [1;91;107mFAIL[0m: OS/2.usWinAscent value should be equal or greater than 1981, but got 1904 instead [code: ascent]
    * [1;91;107mFAIL[0m: OS/2.usWinDescent value should be equal or greater than 1518, but got 596 instead. [code: descent]


    Result: [1;91;107mFAIL[0m

 >> [1;35;107mcom.google.fonts/check/required_tables[0m
    [0;36;107mFont contains all required tables?[0m
    with NotoNastaliqUrdu-Bold.ttf

    [1;35;107m  Rationale:                                                                [0m
    [0;30;107m  Depending on the typeface and coverage of a font, certain tables are      [0m
    [0;30;107m  recommended for optimum quality. For example, the performance of a        [0m
    [0;30;107m  non-linear font is improved if the VDMX, LTSH, and hdmx tables are        [0m
    [0;30;107m  present. Non-monospaced Latin fonts should have a kern table. A gasp      [0m
    [0;30;107m  table is necessary if a designer wants to influence the sizes at which    [0m
    [0;30;107m  grayscaling is used under Windows. A DSIG table containing a digital      [0m
    [0;30;107m  signature helps ensure the integrity of the font file. Etc.               [0m

    * [0;36;107mINFO[0m: This font contains the following optional tables [loca, GPOS, GSUB]


    Result: [0;36;107mINFO[0m

 >> [1;35;107mcom.google.fonts/check/superfamily/list[0m
    [0;36;107mList all superfamily filepaths[0m
    with NotoNastaliqUrdu-Bold.ttf

    [1;35;107m  Rationale:                                                                [0m
    [0;30;107m  This is a merely informative check that lists all sibling families        [0m
    [0;30;107m  detected by fontbakery.                                                   [0m
    [0;30;107m                                                                            [0m
    [0;30;107m  Only the fontfiles in these directories will be considered in             [0m
    [0;30;107m  superfamily-level checks.                                                 [0m

    * [0;36;107mINFO[0m: . [code: family-path]


    Result: [0;36;107mINFO[0m

 >> [1;35;107mcom.google.fonts/check/dsig[0m
    [0;36;107mDoes the font have a DSIG table?[0m
    with NotoNastaliqUrdu-Bold.ttf

    [1;35;107m  Rationale:                                                                [0m
    [0;30;107m  Microsoft Office 2013 and below products expect fonts to have a digital   [0m
    [0;30;107m  signature declared in a DSIG table in order to implement OpenType         [0m
    [0;30;107m  features. The EOL date for Microsoft Office 2013 products is 4/11/2023.   [0m
    [0;30;107m  This issue does not impact Microsoft Office 2016 and above products.      [0m
    [0;30;107m                                                                            [0m
    [0;30;107m  This checks verifies that this signature is available in the font.        [0m
    [0;30;107m                                                                            [0m
    [0;30;107m  A fake signature is enough to address this issue. If needed, a dummy      [0m
    [0;30;107m  table can be added to the font with the `gftools fix-dsig` script         [0m
    [0;30;107m  available at https://github.com/googlefonts/gftools                       [0m
    [0;30;107m                                                                            [0m
    [0;30;107m  Reference: https://github.com/googlefonts/fontbakery/issues/1845          [0m

    * [1;91;107mFAIL[0m: This font lacks a digital signature (DSIG table). Some applications may require one (even if only a dummy placeholder) in order to work properly. You can add a DSIG table by running the `gftools fix-dsig` script. [code: lacks-signature]


    Result: [1;91;107mFAIL[0m

 >> [1;35;107mcom.google.fonts/check/gpos_kerning_info[0m
    [0;36;107mDoes GPOS table have kerning information? This check skips monospaced fonts as defined by post.isFixedPitch value[0m
    with NotoNastaliqUrdu-Bold.ttf

    * [1;30;103mWARN[0m: GPOS table lacks kerning information. [code: lacks-kern-info]


    Result: [1;30;103mWARN[0m

 >> [1;35;107mcom.google.fonts/check/outline_colinear_vectors[0m
    [0;36;107mDo any segments have colinear vectors?[0m
    with NotoNastaliqUrdu-Bold.ttf

    [1;35;107m  Rationale:                                                                [0m
    [0;30;107m  This test looks for consecutive line segments which have the same angle.  [0m
    [0;30;107m  This normally happens if an outline point has been added by accident.     [0m
    [0;30;107m                                                                            [0m
    [0;30;107m  This test is not run for variable fonts, as they may legitimately have    [0m
    [0;30;107m  colinear vectors.                                                         [0m

    * [1;30;103mWARN[0m: The following glyphs have colinear vectors:
	* CircumArabicAltNS: L<<-54.0,885.0>--<-71.0,858.0>> -> L<<-71.0,858.0>--<-91.0,829.0>>
	* CircumArabicNS: L<<-54.0,885.0>--<-71.0,858.0>> -> L<<-71.0,858.0>--<-91.0,829.0>>
	* EightArabic.encl: L<<-112.0,27.0>--<-116.0,45.0>> -> L<<-116.0,45.0>--<-118.0,55.0>>
	* EightArabic.encl: L<<-24.0,189.0>--<-42.0,135.0>> -> L<<-42.0,135.0>--<-63.0,74.0>>
	* EightArabic.small: L<<-34.0,257.0>--<-47.0,221.0>> -> L<<-47.0,221.0>--<-58.0,190.0>>
	* EightFarsi: L<<230.0,575.0>--<275.0,663.0>> -> L<<275.0,663.0>--<287.0,684.0>>
	* GafIni.N: L<<342.0,1032.0>--<297.0,993.0>> -> L<<297.0,993.0>--<272.0,968.0>>
	* GafIni.NoutD1: L<<723.0,1052.0>--<678.0,1013.0>> -> L<<678.0,1013.0>--<653.0,988.0>>
	* GafIni.NoutD2: L<<337.0,766.0>--<292.0,727.0>> -> L<<292.0,727.0>--<267.0,702.0>>
	* GafIni.NoutT2: L<<282.0,946.0>--<237.0,907.0>> -> L<<237.0,907.0>--<212.0,882.0>> and 38 more. [code: found-colinear-vectors]


    Result: [1;30;103mWARN[0m

 >> [1;35;107mcom.google.fonts/check/outline_jaggy_segments[0m
    [0;36;107mDo outlines contain any jaggy segments?[0m
    with NotoNastaliqUrdu-Bold.ttf

    [1;35;107m  Rationale:                                                                [0m
    [0;30;107m  This test heuristically detects outline segments which form a             [0m
    [0;30;107m  particularly small angle, indicative of an outline error. This may cause  [0m
    [0;30;107m  false positives in cases such as extreme ink traps, so should be regarded [0m
    [0;30;107m  as advisory and backed up by manual inspection.                           [0m

    * [1;30;103mWARN[0m: The following glyphs have jaggy segments:
	* Tah: B<<355.0,336.5>-<347.0,307.0>-<334.0,273.0>>/B<<334.0,273.0>-<364.0,319.0>-<404.5,361.5>> = 12.186840215450852
	* TahFin: B<<355.0,316.5>-<347.0,287.0>-<334.0,253.0>>/B<<334.0,253.0>-<364.0,299.0>-<404.5,341.5>> = 12.186840215450852
	* TahIni.outD11: B<<482.5,457.5>-<473.0,420.0>-<457.0,380.0>>/B<<457.0,380.0>-<491.0,433.0>-<531.5,478.0>> = 10.87914525701154
	* TahIni.outD1: B<<643.0,450.5>-<633.0,413.0>-<617.0,373.0>>/B<<617.0,373.0>-<651.0,426.0>-<691.5,471.0>> = 10.87914525701154
	* TahIni.outD2: B<<299.0,470.5>-<289.0,433.0>-<273.0,393.0>>/B<<273.0,393.0>-<307.0,446.0>-<347.5,491.0>> = 10.87914525701154
	* TahIni.outD2D: B<<299.0,470.5>-<289.0,433.0>-<273.0,393.0>>/B<<273.0,393.0>-<307.0,446.0>-<347.5,491.0>> = 10.87914525701154
	* TahIni.outD2H: B<<371.0,449.5>-<361.0,412.0>-<345.0,372.0>>/B<<345.0,372.0>-<379.0,425.0>-<419.5,470.0>> = 10.87914525701154
	* TahIni.outD2M: B<<403.0,517.5>-<393.0,480.0>-<377.0,440.0>>/B<<377.0,440.0>-<411.0,493.0>-<451.5,538.0>> = 10.87914525701154
	* TahIni.outD2MM: B<<191.5,441.0>-<182.0,403.0>-<165.0,361.0>>/B<<165.0,361.0>-<199.0,414.0>-<239.5,459.0>> = 10.644327803217948
	* TahIni.outD2YB: B<<299.0,470.5>-<289.0,433.0>-<273.0,393.0>>/B<<273.0,393.0>-<307.0,446.0>-<347.5,491.0>> = 10.87914525701154 and 19 more. [code: found-jaggy-segments]


    Result: [1;30;103mWARN[0m


Total:

    [1;97;101mERROR[0m: 0
    [1;91;107mFAIL[0m: 2
    [1;30;103mWARN[0m: 3
    [0;36;107mINFO[0m: 2
    [0;34;107mSKIP[0m: 17
    [0;32;107mPASS[0m: 53


DONE!

    [1;30;107mMeaning of check results:[0m

    An [1;97;101mERROR[0m is something wrong with FontBakery itself, possibly a bug.
    A [1;91;107mFAIL[0m is a problem with the font that must be fixed.
    A [1;30;103mWARN[0m is something that you should consider addressing.
    An [0;36;107mINFO[0m result simply prints something useful. Typically stats.
    A [0;32;107mPASS[0m means the font looks good for the given checking routine.
    And a [0;34;107mSKIP[0m happens when the check does not apply to the given font.

    If you get [1;97;101mERROR[0ms, please help us improve the tool by reporting them at
    [1;36;107mhttps://github.com/googlefonts/fontbakery/issues[0m

    (but other kinds of bug reports and/or
     feature requests are also always welcome, of course!)

